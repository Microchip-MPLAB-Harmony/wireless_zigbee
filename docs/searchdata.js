var SearchFiles = ["GUID-CC00474A-018F-4772-8C7F-5C64FA7F7E38.html","GUID-221B4CC9-4C60-4770-BBD4-843543C6F801.html","GUID-DAAD5A86-E4B0-4898-B010-BB929E2ED4A7.html","GUID-98806DB1-0C0C-4446-9310-897A7198C078.html","GUID-A957AC73-ED37-41AC-99B0-DD8F1D1BF4B6.html","GUID-9C75AAB9-DEF1-4F13-9EB8-2E1C99834EF0.html","GUID-3FD09F76-6492-4AA5-8F98-0995FEAD2686.html","GUID-768F65E7-9E39-4BD4-9F8B-42788C9CDDD2.html","GUID-50BAC389-580B-41FF-9568-F232A37AECE3.html","GUID-8884835A-E4B5-440F-95E8-C58E51B73C5E.html","GUID-33F4B1D2-11CF-41E0-8F6D-767D9A2156D8.html","GUID-1F8843B7-F0AB-4802-9DDB-1F7C1A61BADB.html","GUID-4B11E416-2460-4B98-8A36-0C6BCAA60F1B.html","GUID-1599DD35-8680-4FD4-867D-938D77A52B57.html","GUID-FC956B9D-553C-4CEF-B7C2-73CCE741705B.html","GUID-4E1A2E1B-742A-4E77-BA9C-2113C476E480.html","GUID-E048204C-1D49-45BD-B22A-AB073BD4DBC3.html","GUID-36F8A430-5242-4D62-8F6F-717289A4FDA2.html","GUID-9C6193BB-A947-4EA5-ADD5-AA03B5209B5A.html","GUID-DA18F7A9-ED49-45A5-A94F-B9B5ECE48790.html","GUID-C306947F-F175-4699-B119-75961F5CDE21.html","GUID-1CC2DCEF-B3D3-427B-BF09-05C2662012D0.html","GUID-70B9455F-A11E-46B9-B53A-7450BC565C6E.html","GUID-70B9455F-A11E-46B9-B53A-7450BC565C6E.html",
							"GUID-70B9455F-A11E-46B9-B53A-7450BC565C6E.html",
							"GUID-70B9455F-A11E-46B9-B53A-7450BC565C6E.html",
							"GUID-F10F3EE4-47CD-48DA-976F-3178D0854597.html","GUID-AC16DBEB-CD79-4F2A-B95C-5FAE75F3A25B.html","GUID-503AD343-CB62-4C0F-A1E4-9446D29AB847.html","GUID-1A0F625D-59D4-4BD8-A522-F6ED95033CDE.html","GUID-39CF18F8-E921-45B0-BA0B-B39CCD326B44.html","GUID-DD07EEF6-E26F-4AEA-9E76-21D17D97576A.html","GUID-9FB630CE-6798-4AC3-B24B-0830EBC69BFB.html","GUID-9EA8133D-53DD-415E-8E08-CBC0969FFCA5.html","GUID-98520E1B-11C6-49E8-B7F1-1AAD1BF47D39.html","GUID-FC9875D9-A408-4F6C-9FC9-20AF96FF9078.html","GUID-0685D527-995B-4A5C-AFB9-036CF801ADCF.html","GUID-524ACEE2-A392-4353-8AD1-1EF70EE05579.html","GUID-BD14A879-020B-43A2-9FDE-44DA0A02314D.html","GUID-A3352E57-26BB-4F2A-9BFA-A68B84110B40.html","GUID-CDA2A98F-5409-4E41-A200-70F6A72CC7D2.html","GUID-72AB5A6D-8A28-4640-A202-8B23B24F01F3.html","GUID-7DA11783-3823-4A61-BE28-6A83F87EB2DC.html","GUID-7DA11783-3823-4A61-BE28-6A83F87EB2DC.html",
							"GUID-D1C161BD-B851-41F5-9523-4A4BCB3E09B0.html","GUID-E61C299E-3CC5-4694-899F-4BBDBED1AEF7.html","GUID-E61C299E-3CC5-4694-899F-4BBDBED1AEF7.html",
							"GUID-E61C299E-3CC5-4694-899F-4BBDBED1AEF7.html",
							"GUID-E61C299E-3CC5-4694-899F-4BBDBED1AEF7.html",
							"GUID-B10D2E54-2455-4C1C-ACA0-3F48DFA9033C.html","GUID-B10D2E54-2455-4C1C-ACA0-3F48DFA9033C.html",
							"GUID-C3B630B1-A4CC-427B-B956-BBE243030804.html","GUID-C3B630B1-A4CC-427B-B956-BBE243030804.html",
							"GUID-C3B630B1-A4CC-427B-B956-BBE243030804.html",
							"GUID-C3B630B1-A4CC-427B-B956-BBE243030804.html",
							"GUID-C3B630B1-A4CC-427B-B956-BBE243030804.html",
							"GUID-397BF2A8-C30D-41CD-AF5A-48074AB7E108.html","GUID-6FD6A58A-FB65-4351-B201-FB3F09CBBDEC.html","GUID-30FDFF33-1536-44CF-BC7C-57139F215ED4.html","GUID-A10ACB70-BB43-4614-853C-AE0CCEB796A5.html","GUID-342E3571-D9A5-41B0-ADEC-F781ABC209CB.html",
							"GUID-342E3571-D9A5-41B0-ADEC-F781ABC209CB.html",
							"GUID-342E3571-D9A5-41B0-ADEC-F781ABC209CB.html",
							"GUID-342E3571-D9A5-41B0-ADEC-F781ABC209CB.html",
							"GUID-342E3571-D9A5-41B0-ADEC-F781ABC209CB.html",
							"GUID-EE9C4D73-80E2-4A18-929B-65EDA577DE2E.html",
							"GUID-EE9C4D73-80E2-4A18-929B-65EDA577DE2E.html",
							"GUID-EE9C4D73-80E2-4A18-929B-65EDA577DE2E.html",
							"GUID-EE9C4D73-80E2-4A18-929B-65EDA577DE2E.html",
							"GUID-EE9C4D73-80E2-4A18-929B-65EDA577DE2E.html",
							"GUID-AC994CE6-82C3-4862-B635-3F4420E55647.html",
							"GUID-AC994CE6-82C3-4862-B635-3F4420E55647.html",
							"GUID-AC994CE6-82C3-4862-B635-3F4420E55647.html",
							"GUID-AC994CE6-82C3-4862-B635-3F4420E55647.html",
							"GUID-AC994CE6-82C3-4862-B635-3F4420E55647.html",
							"GUID-09849E00-A5C1-41EE-A9DF-1F7B9B53C626.html",
							"GUID-09849E00-A5C1-41EE-A9DF-1F7B9B53C626.html",
							"GUID-09849E00-A5C1-41EE-A9DF-1F7B9B53C626.html",
							"GUID-09849E00-A5C1-41EE-A9DF-1F7B9B53C626.html",
							"GUID-09849E00-A5C1-41EE-A9DF-1F7B9B53C626.html",
							"GUID-8386AECE-8194-4CCA-8C32-B2ABB060A1E2.html",
							"GUID-8386AECE-8194-4CCA-8C32-B2ABB060A1E2.html",
							"GUID-8386AECE-8194-4CCA-8C32-B2ABB060A1E2.html",
							"GUID-8386AECE-8194-4CCA-8C32-B2ABB060A1E2.html",
							"GUID-8386AECE-8194-4CCA-8C32-B2ABB060A1E2.html",
							"GUID-958A8269-CD06-4872-86FB-0984D53561E2.html",
							"GUID-958A8269-CD06-4872-86FB-0984D53561E2.html",
							"GUID-958A8269-CD06-4872-86FB-0984D53561E2.html",
							"GUID-958A8269-CD06-4872-86FB-0984D53561E2.html",
							"GUID-958A8269-CD06-4872-86FB-0984D53561E2.html",
							"GUID-000800A5-C333-4D6F-A9FE-4FB0682783A5.html",
							"GUID-000800A5-C333-4D6F-A9FE-4FB0682783A5.html",
							"GUID-000800A5-C333-4D6F-A9FE-4FB0682783A5.html",
							"GUID-000800A5-C333-4D6F-A9FE-4FB0682783A5.html",
							"GUID-000800A5-C333-4D6F-A9FE-4FB0682783A5.html",
							"GUID-245B0A13-3A4E-4819-9B4D-7A57DE276308.html",
							"GUID-245B0A13-3A4E-4819-9B4D-7A57DE276308.html",
							"GUID-245B0A13-3A4E-4819-9B4D-7A57DE276308.html",
							"GUID-245B0A13-3A4E-4819-9B4D-7A57DE276308.html",
							"GUID-245B0A13-3A4E-4819-9B4D-7A57DE276308.html",
							"GUID-56EC5D19-A462-4C76-B261-862D68E867B5.html",
							"GUID-56EC5D19-A462-4C76-B261-862D68E867B5.html",
							"GUID-56EC5D19-A462-4C76-B261-862D68E867B5.html",
							"GUID-56EC5D19-A462-4C76-B261-862D68E867B5.html",
							"GUID-56EC5D19-A462-4C76-B261-862D68E867B5.html",
							"GUID-B2AA1152-C7C7-437A-988A-D35C3008B61C.html",
							"GUID-B2AA1152-C7C7-437A-988A-D35C3008B61C.html",
							"GUID-B2AA1152-C7C7-437A-988A-D35C3008B61C.html",
							"GUID-B2AA1152-C7C7-437A-988A-D35C3008B61C.html",
							"GUID-B2AA1152-C7C7-437A-988A-D35C3008B61C.html",
							"GUID-99D76CFE-A3FC-4286-9957-2C0089D0D758.html",
							"GUID-99D76CFE-A3FC-4286-9957-2C0089D0D758.html",
							"GUID-99D76CFE-A3FC-4286-9957-2C0089D0D758.html",
							"GUID-99D76CFE-A3FC-4286-9957-2C0089D0D758.html",
							"GUID-99D76CFE-A3FC-4286-9957-2C0089D0D758.html",
							"GUID-CC073ECD-ECA7-4E54-9B83-7D53F4BA0217.html","GUID-9B6019C3-D94D-4362-8D48-E7992DD76590.html",
							"GUID-9B6019C3-D94D-4362-8D48-E7992DD76590.html",
							"GUID-9B6019C3-D94D-4362-8D48-E7992DD76590.html",
							"GUID-9B6019C3-D94D-4362-8D48-E7992DD76590.html",
							"GUID-9B6019C3-D94D-4362-8D48-E7992DD76590.html",
							"GUID-C42B1A72-B38A-49F8-A157-EAC767290BD8.html",
							"GUID-C42B1A72-B38A-49F8-A157-EAC767290BD8.html",
							"GUID-C42B1A72-B38A-49F8-A157-EAC767290BD8.html",
							"GUID-C42B1A72-B38A-49F8-A157-EAC767290BD8.html",
							"GUID-C42B1A72-B38A-49F8-A157-EAC767290BD8.html",
							"GUID-2A88E0FB-F57C-48AC-87AF-701D0F9104DC.html",
							"GUID-2A88E0FB-F57C-48AC-87AF-701D0F9104DC.html",
							"GUID-2A88E0FB-F57C-48AC-87AF-701D0F9104DC.html",
							"GUID-2A88E0FB-F57C-48AC-87AF-701D0F9104DC.html",
							"GUID-2A88E0FB-F57C-48AC-87AF-701D0F9104DC.html",
							"GUID-993FC40D-A229-4EA0-B56C-4B582340A9E0.html",
							"GUID-993FC40D-A229-4EA0-B56C-4B582340A9E0.html",
							"GUID-993FC40D-A229-4EA0-B56C-4B582340A9E0.html",
							"GUID-993FC40D-A229-4EA0-B56C-4B582340A9E0.html",
							"GUID-993FC40D-A229-4EA0-B56C-4B582340A9E0.html",
							"GUID-6103B067-13E0-47AF-893C-CB3FDCC9B7F1.html",
							"GUID-6103B067-13E0-47AF-893C-CB3FDCC9B7F1.html",
							"GUID-6103B067-13E0-47AF-893C-CB3FDCC9B7F1.html",
							"GUID-6103B067-13E0-47AF-893C-CB3FDCC9B7F1.html",
							"GUID-6103B067-13E0-47AF-893C-CB3FDCC9B7F1.html",
							"GUID-2EA92218-1BD5-4D2B-9F85-53394B6CFE08.html",
							"GUID-2EA92218-1BD5-4D2B-9F85-53394B6CFE08.html",
							"GUID-2EA92218-1BD5-4D2B-9F85-53394B6CFE08.html",
							"GUID-2EA92218-1BD5-4D2B-9F85-53394B6CFE08.html",
							"GUID-2EA92218-1BD5-4D2B-9F85-53394B6CFE08.html",
							"GUID-5578CE1F-C01F-4ECE-AF4E-7B9AED1FCBFA.html","GUID-FC890FAD-4B35-47AF-AE74-76E8EC3C860C.html",
							"GUID-FC890FAD-4B35-47AF-AE74-76E8EC3C860C.html",
							"GUID-FC890FAD-4B35-47AF-AE74-76E8EC3C860C.html",
							"GUID-FC890FAD-4B35-47AF-AE74-76E8EC3C860C.html",
							"GUID-FC890FAD-4B35-47AF-AE74-76E8EC3C860C.html",
							"GUID-502BED1C-B836-408A-828D-D8D38EB24770.html",
							"GUID-502BED1C-B836-408A-828D-D8D38EB24770.html",
							"GUID-502BED1C-B836-408A-828D-D8D38EB24770.html",
							"GUID-502BED1C-B836-408A-828D-D8D38EB24770.html",
							"GUID-502BED1C-B836-408A-828D-D8D38EB24770.html",
							"GUID-701FB045-479F-4334-8EBF-C7D3F90BFB2D.html",
							"GUID-701FB045-479F-4334-8EBF-C7D3F90BFB2D.html",
							"GUID-701FB045-479F-4334-8EBF-C7D3F90BFB2D.html",
							"GUID-701FB045-479F-4334-8EBF-C7D3F90BFB2D.html",
							"GUID-701FB045-479F-4334-8EBF-C7D3F90BFB2D.html",
							"GUID-53F661F9-E6CE-44A2-BA0E-64F60BEAC4A2.html",
							"GUID-53F661F9-E6CE-44A2-BA0E-64F60BEAC4A2.html",
							"GUID-53F661F9-E6CE-44A2-BA0E-64F60BEAC4A2.html",
							"GUID-53F661F9-E6CE-44A2-BA0E-64F60BEAC4A2.html",
							"GUID-53F661F9-E6CE-44A2-BA0E-64F60BEAC4A2.html",
							"GUID-E89751D0-02AE-4A96-ADFA-A937630FB0C0.html",
							"GUID-E89751D0-02AE-4A96-ADFA-A937630FB0C0.html",
							"GUID-E89751D0-02AE-4A96-ADFA-A937630FB0C0.html",
							"GUID-E89751D0-02AE-4A96-ADFA-A937630FB0C0.html",
							"GUID-E89751D0-02AE-4A96-ADFA-A937630FB0C0.html",
							"GUID-3795A457-8FF7-44C4-AE5B-31635C006DAE.html",
							"GUID-3795A457-8FF7-44C4-AE5B-31635C006DAE.html",
							"GUID-3795A457-8FF7-44C4-AE5B-31635C006DAE.html",
							"GUID-3795A457-8FF7-44C4-AE5B-31635C006DAE.html",
							"GUID-3795A457-8FF7-44C4-AE5B-31635C006DAE.html",
							"GUID-D4DB9C17-ACD6-4781-9BE4-72D34E2B03C1.html",
							"GUID-D4DB9C17-ACD6-4781-9BE4-72D34E2B03C1.html",
							"GUID-D4DB9C17-ACD6-4781-9BE4-72D34E2B03C1.html",
							"GUID-D4DB9C17-ACD6-4781-9BE4-72D34E2B03C1.html",
							"GUID-D4DB9C17-ACD6-4781-9BE4-72D34E2B03C1.html",
							"GUID-39F9EF5F-1821-45D9-B3B8-05A4EBA187AA.html",
							"GUID-39F9EF5F-1821-45D9-B3B8-05A4EBA187AA.html",
							"GUID-39F9EF5F-1821-45D9-B3B8-05A4EBA187AA.html",
							"GUID-39F9EF5F-1821-45D9-B3B8-05A4EBA187AA.html",
							"GUID-39F9EF5F-1821-45D9-B3B8-05A4EBA187AA.html",
							"GUID-DD92A162-732C-4CD2-919C-CCB764ECCA1C.html",
							"GUID-DD92A162-732C-4CD2-919C-CCB764ECCA1C.html",
							"GUID-DD92A162-732C-4CD2-919C-CCB764ECCA1C.html",
							"GUID-DD92A162-732C-4CD2-919C-CCB764ECCA1C.html",
							"GUID-DD92A162-732C-4CD2-919C-CCB764ECCA1C.html",
							"GUID-0D21BA38-C9AD-4923-BAFA-82F86CDC777F.html",
							"GUID-0D21BA38-C9AD-4923-BAFA-82F86CDC777F.html",
							"GUID-0D21BA38-C9AD-4923-BAFA-82F86CDC777F.html",
							"GUID-0D21BA38-C9AD-4923-BAFA-82F86CDC777F.html",
							"GUID-0D21BA38-C9AD-4923-BAFA-82F86CDC777F.html",
							"GUID-F15086CA-C818-42A4-B99D-96BE21E75614.html",
							"GUID-F15086CA-C818-42A4-B99D-96BE21E75614.html",
							"GUID-F15086CA-C818-42A4-B99D-96BE21E75614.html",
							"GUID-F15086CA-C818-42A4-B99D-96BE21E75614.html",
							"GUID-F15086CA-C818-42A4-B99D-96BE21E75614.html",
							"GUID-002344EE-668A-458F-9217-FCE9E28D24B1.html",
							"GUID-002344EE-668A-458F-9217-FCE9E28D24B1.html",
							"GUID-002344EE-668A-458F-9217-FCE9E28D24B1.html",
							"GUID-002344EE-668A-458F-9217-FCE9E28D24B1.html",
							"GUID-002344EE-668A-458F-9217-FCE9E28D24B1.html",
							"GUID-8149671D-FC16-4A0F-BA99-5EAFE079011F.html",
							"GUID-8149671D-FC16-4A0F-BA99-5EAFE079011F.html",
							"GUID-8149671D-FC16-4A0F-BA99-5EAFE079011F.html",
							"GUID-8149671D-FC16-4A0F-BA99-5EAFE079011F.html",
							"GUID-8149671D-FC16-4A0F-BA99-5EAFE079011F.html",
							"GUID-84860AC7-40BA-4D40-87F5-41DC6A1D7636.html",
							"GUID-84860AC7-40BA-4D40-87F5-41DC6A1D7636.html",
							"GUID-84860AC7-40BA-4D40-87F5-41DC6A1D7636.html",
							"GUID-84860AC7-40BA-4D40-87F5-41DC6A1D7636.html",
							"GUID-84860AC7-40BA-4D40-87F5-41DC6A1D7636.html",
							"GUID-9791A217-43DE-4E50-A894-E3BEECE61682.html",
							"GUID-9791A217-43DE-4E50-A894-E3BEECE61682.html",
							"GUID-9791A217-43DE-4E50-A894-E3BEECE61682.html",
							"GUID-9791A217-43DE-4E50-A894-E3BEECE61682.html",
							"GUID-9791A217-43DE-4E50-A894-E3BEECE61682.html",
							"GUID-675390BA-C225-4B5A-976E-BD9CF76AC16F.html",
							"GUID-675390BA-C225-4B5A-976E-BD9CF76AC16F.html",
							"GUID-675390BA-C225-4B5A-976E-BD9CF76AC16F.html",
							"GUID-675390BA-C225-4B5A-976E-BD9CF76AC16F.html",
							"GUID-675390BA-C225-4B5A-976E-BD9CF76AC16F.html",
							"GUID-B6E26F71-A5F3-4B02-82A7-E2B5016101D7.html",
							"GUID-B6E26F71-A5F3-4B02-82A7-E2B5016101D7.html",
							"GUID-B6E26F71-A5F3-4B02-82A7-E2B5016101D7.html",
							"GUID-B6E26F71-A5F3-4B02-82A7-E2B5016101D7.html",
							"GUID-B6E26F71-A5F3-4B02-82A7-E2B5016101D7.html",
							"GUID-99BD884A-AB63-46F1-AE0C-042364695E53.html",
							"GUID-99BD884A-AB63-46F1-AE0C-042364695E53.html",
							"GUID-99BD884A-AB63-46F1-AE0C-042364695E53.html",
							"GUID-99BD884A-AB63-46F1-AE0C-042364695E53.html",
							"GUID-99BD884A-AB63-46F1-AE0C-042364695E53.html",
							"GUID-B12FDF61-A423-4EFD-AFE8-21430ED24CAE.html",
							"GUID-B12FDF61-A423-4EFD-AFE8-21430ED24CAE.html",
							"GUID-B12FDF61-A423-4EFD-AFE8-21430ED24CAE.html",
							"GUID-B12FDF61-A423-4EFD-AFE8-21430ED24CAE.html",
							"GUID-B12FDF61-A423-4EFD-AFE8-21430ED24CAE.html",
							"GUID-C6DABBBF-E26E-43F6-9815-2E30E9DEC1A0.html","GUID-15982137-AC2B-408F-9269-6C611C03ABCB.html",
							"GUID-15982137-AC2B-408F-9269-6C611C03ABCB.html",
							"GUID-15982137-AC2B-408F-9269-6C611C03ABCB.html",
							"GUID-15982137-AC2B-408F-9269-6C611C03ABCB.html",
							"GUID-15982137-AC2B-408F-9269-6C611C03ABCB.html",
							"GUID-EABFAAA5-8E3C-4F22-83A0-695C1639F41D.html",
							"GUID-EABFAAA5-8E3C-4F22-83A0-695C1639F41D.html",
							"GUID-EABFAAA5-8E3C-4F22-83A0-695C1639F41D.html",
							"GUID-EABFAAA5-8E3C-4F22-83A0-695C1639F41D.html",
							"GUID-EABFAAA5-8E3C-4F22-83A0-695C1639F41D.html",
							"GUID-EE5BEA2E-7256-495E-A6EB-0795305BACE6.html",
							"GUID-EE5BEA2E-7256-495E-A6EB-0795305BACE6.html",
							"GUID-EE5BEA2E-7256-495E-A6EB-0795305BACE6.html",
							"GUID-EE5BEA2E-7256-495E-A6EB-0795305BACE6.html",
							"GUID-EE5BEA2E-7256-495E-A6EB-0795305BACE6.html",
							"GUID-EC867986-14B5-4091-95A3-9A3E76B82983.html",
							"GUID-EC867986-14B5-4091-95A3-9A3E76B82983.html",
							"GUID-EC867986-14B5-4091-95A3-9A3E76B82983.html",
							"GUID-EC867986-14B5-4091-95A3-9A3E76B82983.html",
							"GUID-EC867986-14B5-4091-95A3-9A3E76B82983.html",
							"GUID-8D84E555-9EB4-4BCE-9BA9-88FA04A63E82.html",
							"GUID-8D84E555-9EB4-4BCE-9BA9-88FA04A63E82.html",
							"GUID-8D84E555-9EB4-4BCE-9BA9-88FA04A63E82.html",
							"GUID-8D84E555-9EB4-4BCE-9BA9-88FA04A63E82.html",
							"GUID-8D84E555-9EB4-4BCE-9BA9-88FA04A63E82.html",
							"GUID-FA3D764B-3638-40B4-B88F-2E8F14D94DF5.html",
							"GUID-FA3D764B-3638-40B4-B88F-2E8F14D94DF5.html",
							"GUID-FA3D764B-3638-40B4-B88F-2E8F14D94DF5.html",
							"GUID-FA3D764B-3638-40B4-B88F-2E8F14D94DF5.html",
							"GUID-FA3D764B-3638-40B4-B88F-2E8F14D94DF5.html",
							"GUID-B464E028-65EA-4A5A-AF83-4DCA13D71462.html",
							"GUID-B464E028-65EA-4A5A-AF83-4DCA13D71462.html",
							"GUID-B464E028-65EA-4A5A-AF83-4DCA13D71462.html",
							"GUID-B464E028-65EA-4A5A-AF83-4DCA13D71462.html",
							"GUID-B464E028-65EA-4A5A-AF83-4DCA13D71462.html",
							"GUID-30F8C6C5-3AAB-41B4-B608-4D7F49F897A1.html",
							"GUID-30F8C6C5-3AAB-41B4-B608-4D7F49F897A1.html",
							"GUID-30F8C6C5-3AAB-41B4-B608-4D7F49F897A1.html",
							"GUID-30F8C6C5-3AAB-41B4-B608-4D7F49F897A1.html",
							"GUID-30F8C6C5-3AAB-41B4-B608-4D7F49F897A1.html",
							"GUID-8F1EAAC8-94FE-4B43-97C4-537DB73AB8B2.html",
							"GUID-8F1EAAC8-94FE-4B43-97C4-537DB73AB8B2.html",
							"GUID-8F1EAAC8-94FE-4B43-97C4-537DB73AB8B2.html",
							"GUID-8F1EAAC8-94FE-4B43-97C4-537DB73AB8B2.html",
							"GUID-8F1EAAC8-94FE-4B43-97C4-537DB73AB8B2.html",
							"GUID-5F21212A-2798-445D-A7F4-48562CC039F6.html",
							"GUID-5F21212A-2798-445D-A7F4-48562CC039F6.html",
							"GUID-5F21212A-2798-445D-A7F4-48562CC039F6.html",
							"GUID-5F21212A-2798-445D-A7F4-48562CC039F6.html",
							"GUID-5F21212A-2798-445D-A7F4-48562CC039F6.html",
							"GUID-15E9FF49-9BD2-4D12-B10C-420A052D3403.html",
							"GUID-15E9FF49-9BD2-4D12-B10C-420A052D3403.html",
							"GUID-15E9FF49-9BD2-4D12-B10C-420A052D3403.html",
							"GUID-15E9FF49-9BD2-4D12-B10C-420A052D3403.html",
							"GUID-15E9FF49-9BD2-4D12-B10C-420A052D3403.html",
							"GUID-529C0206-B55E-4199-933D-9D22027D452D.html",
							"GUID-529C0206-B55E-4199-933D-9D22027D452D.html",
							"GUID-529C0206-B55E-4199-933D-9D22027D452D.html",
							"GUID-529C0206-B55E-4199-933D-9D22027D452D.html",
							"GUID-529C0206-B55E-4199-933D-9D22027D452D.html",
							"GUID-CC619B2C-7C45-4F93-9B76-F0302380B151.html",
							"GUID-CC619B2C-7C45-4F93-9B76-F0302380B151.html",
							"GUID-CC619B2C-7C45-4F93-9B76-F0302380B151.html",
							"GUID-CC619B2C-7C45-4F93-9B76-F0302380B151.html",
							"GUID-CC619B2C-7C45-4F93-9B76-F0302380B151.html",
							"GUID-FFF21B18-8CA7-4C01-8CBF-09667D9B4AD6.html",
							"GUID-FFF21B18-8CA7-4C01-8CBF-09667D9B4AD6.html",
							"GUID-FFF21B18-8CA7-4C01-8CBF-09667D9B4AD6.html",
							"GUID-FFF21B18-8CA7-4C01-8CBF-09667D9B4AD6.html",
							"GUID-FFF21B18-8CA7-4C01-8CBF-09667D9B4AD6.html",
							"GUID-8AA085AA-BA13-4729-80C9-6224832A7555.html","GUID-597A4F22-CD8A-4B54-B50C-7A368E938005.html",
							"GUID-597A4F22-CD8A-4B54-B50C-7A368E938005.html",
							"GUID-597A4F22-CD8A-4B54-B50C-7A368E938005.html",
							"GUID-597A4F22-CD8A-4B54-B50C-7A368E938005.html",
							"GUID-597A4F22-CD8A-4B54-B50C-7A368E938005.html",
							"GUID-82CE14E4-8F7A-412D-87DD-80F7911C7F44.html",
							"GUID-82CE14E4-8F7A-412D-87DD-80F7911C7F44.html",
							"GUID-82CE14E4-8F7A-412D-87DD-80F7911C7F44.html",
							"GUID-82CE14E4-8F7A-412D-87DD-80F7911C7F44.html",
							"GUID-82CE14E4-8F7A-412D-87DD-80F7911C7F44.html",
							"GUID-16BDBF75-3A65-47E9-B462-30D3C883F0AA.html",
							"GUID-16BDBF75-3A65-47E9-B462-30D3C883F0AA.html",
							"GUID-16BDBF75-3A65-47E9-B462-30D3C883F0AA.html",
							"GUID-16BDBF75-3A65-47E9-B462-30D3C883F0AA.html",
							"GUID-16BDBF75-3A65-47E9-B462-30D3C883F0AA.html",
							"GUID-89AB3319-F2B0-4DA4-BB5C-73361A7F30BE.html","GUID-BFE639CE-B485-44E4-A1D0-772BA06DAB4D.html",
							"GUID-BFE639CE-B485-44E4-A1D0-772BA06DAB4D.html",
							"GUID-BFE639CE-B485-44E4-A1D0-772BA06DAB4D.html",
							"GUID-BFE639CE-B485-44E4-A1D0-772BA06DAB4D.html",
							"GUID-828C0C23-0CE8-45AD-94E5-B555F2B6DEC3.html",
							"GUID-828C0C23-0CE8-45AD-94E5-B555F2B6DEC3.html",
							"GUID-828C0C23-0CE8-45AD-94E5-B555F2B6DEC3.html",
							"GUID-828C0C23-0CE8-45AD-94E5-B555F2B6DEC3.html",
							"GUID-828C0C23-0CE8-45AD-94E5-B555F2B6DEC3.html",
							"GUID-B526D5E9-E654-4425-A646-FB588117161F.html",
							"GUID-B526D5E9-E654-4425-A646-FB588117161F.html",
							"GUID-B526D5E9-E654-4425-A646-FB588117161F.html",
							"GUID-B526D5E9-E654-4425-A646-FB588117161F.html",
							"GUID-B526D5E9-E654-4425-A646-FB588117161F.html",
							"GUID-D764F0E1-501C-41E8-A24D-0A12C563A5C6.html",
							"GUID-D764F0E1-501C-41E8-A24D-0A12C563A5C6.html",
							"GUID-D764F0E1-501C-41E8-A24D-0A12C563A5C6.html",
							"GUID-D764F0E1-501C-41E8-A24D-0A12C563A5C6.html",
							"GUID-D764F0E1-501C-41E8-A24D-0A12C563A5C6.html",
							"GUID-8D1CF7AB-FBBC-495D-9009-8010993C4D34.html",
							"GUID-8D1CF7AB-FBBC-495D-9009-8010993C4D34.html",
							"GUID-8D1CF7AB-FBBC-495D-9009-8010993C4D34.html",
							"GUID-8D1CF7AB-FBBC-495D-9009-8010993C4D34.html",
							"GUID-8D1CF7AB-FBBC-495D-9009-8010993C4D34.html",
							"GUID-F91757C8-9F06-4940-8E39-320FF012D5B5.html",
							"GUID-F91757C8-9F06-4940-8E39-320FF012D5B5.html",
							"GUID-F91757C8-9F06-4940-8E39-320FF012D5B5.html",
							"GUID-F91757C8-9F06-4940-8E39-320FF012D5B5.html",
							"GUID-F91757C8-9F06-4940-8E39-320FF012D5B5.html",
							"GUID-10D875C5-4649-47BB-8ACC-FAB84CDCB330.html",
							"GUID-10D875C5-4649-47BB-8ACC-FAB84CDCB330.html",
							"GUID-10D875C5-4649-47BB-8ACC-FAB84CDCB330.html",
							"GUID-10D875C5-4649-47BB-8ACC-FAB84CDCB330.html",
							"GUID-10D875C5-4649-47BB-8ACC-FAB84CDCB330.html",
							"GUID-018FFFC6-F13C-4B92-809B-80F972026462.html",
							"GUID-018FFFC6-F13C-4B92-809B-80F972026462.html",
							"GUID-018FFFC6-F13C-4B92-809B-80F972026462.html",
							"GUID-018FFFC6-F13C-4B92-809B-80F972026462.html",
							"GUID-018FFFC6-F13C-4B92-809B-80F972026462.html",
							"GUID-1BA25486-7B69-4360-A5EE-3D551461722D.html",
							"GUID-1BA25486-7B69-4360-A5EE-3D551461722D.html",
							"GUID-1BA25486-7B69-4360-A5EE-3D551461722D.html",
							"GUID-1BA25486-7B69-4360-A5EE-3D551461722D.html",
							"GUID-1BA25486-7B69-4360-A5EE-3D551461722D.html",
							"GUID-EADD3346-FC44-4ED3-853B-EE272EF849E9.html",
							"GUID-EADD3346-FC44-4ED3-853B-EE272EF849E9.html",
							"GUID-EADD3346-FC44-4ED3-853B-EE272EF849E9.html",
							"GUID-EADD3346-FC44-4ED3-853B-EE272EF849E9.html",
							"GUID-EADD3346-FC44-4ED3-853B-EE272EF849E9.html",
							"GUID-C914B924-A408-4335-8EF5-EBAC60324B5E.html",
							"GUID-C914B924-A408-4335-8EF5-EBAC60324B5E.html",
							"GUID-C914B924-A408-4335-8EF5-EBAC60324B5E.html",
							"GUID-C914B924-A408-4335-8EF5-EBAC60324B5E.html",
							"GUID-C914B924-A408-4335-8EF5-EBAC60324B5E.html",
							"GUID-5D8BF6EE-3E23-420F-A90B-48B71DBA0965.html",
							"GUID-5D8BF6EE-3E23-420F-A90B-48B71DBA0965.html",
							"GUID-5D8BF6EE-3E23-420F-A90B-48B71DBA0965.html",
							"GUID-5D8BF6EE-3E23-420F-A90B-48B71DBA0965.html",
							"GUID-5D8BF6EE-3E23-420F-A90B-48B71DBA0965.html",
							"GUID-1C45A73B-6270-469B-9BAD-18B5FAD9413A.html",
							"GUID-1C45A73B-6270-469B-9BAD-18B5FAD9413A.html",
							"GUID-1C45A73B-6270-469B-9BAD-18B5FAD9413A.html",
							"GUID-1C45A73B-6270-469B-9BAD-18B5FAD9413A.html",
							"GUID-1C45A73B-6270-469B-9BAD-18B5FAD9413A.html",
							"GUID-92B8C2C4-A7BE-421B-BAC0-74CA21E46703.html",
							"GUID-92B8C2C4-A7BE-421B-BAC0-74CA21E46703.html",
							"GUID-92B8C2C4-A7BE-421B-BAC0-74CA21E46703.html",
							"GUID-92B8C2C4-A7BE-421B-BAC0-74CA21E46703.html",
							"GUID-92B8C2C4-A7BE-421B-BAC0-74CA21E46703.html",
							"GUID-797FDA4F-317D-4F69-A613-0F555135EB8F.html",
							"GUID-797FDA4F-317D-4F69-A613-0F555135EB8F.html",
							"GUID-797FDA4F-317D-4F69-A613-0F555135EB8F.html",
							"GUID-797FDA4F-317D-4F69-A613-0F555135EB8F.html",
							"GUID-797FDA4F-317D-4F69-A613-0F555135EB8F.html",
							"GUID-F89621EC-E7D9-4374-87E9-B769C389E227.html",
							"GUID-F89621EC-E7D9-4374-87E9-B769C389E227.html",
							"GUID-F89621EC-E7D9-4374-87E9-B769C389E227.html",
							"GUID-F89621EC-E7D9-4374-87E9-B769C389E227.html",
							"GUID-F89621EC-E7D9-4374-87E9-B769C389E227.html",
							"GUID-BD68D16B-283C-40B6-9CF8-CEC2C27DCD4A.html","GUID-5EA991EC-2629-4D3D-9E78-B8FF5A23D7B4.html",
							"GUID-5EA991EC-2629-4D3D-9E78-B8FF5A23D7B4.html",
							"GUID-5EA991EC-2629-4D3D-9E78-B8FF5A23D7B4.html",
							"GUID-5EA991EC-2629-4D3D-9E78-B8FF5A23D7B4.html",
							"GUID-5EA991EC-2629-4D3D-9E78-B8FF5A23D7B4.html",
							"GUID-259C36E2-A11A-4CE2-8EE2-1A4359E7CEC3.html",
							"GUID-259C36E2-A11A-4CE2-8EE2-1A4359E7CEC3.html",
							"GUID-259C36E2-A11A-4CE2-8EE2-1A4359E7CEC3.html",
							"GUID-259C36E2-A11A-4CE2-8EE2-1A4359E7CEC3.html",
							"GUID-259C36E2-A11A-4CE2-8EE2-1A4359E7CEC3.html",
							"GUID-498EDB5B-D3B5-42BA-A85B-95CD7386C342.html",
							"GUID-498EDB5B-D3B5-42BA-A85B-95CD7386C342.html",
							"GUID-498EDB5B-D3B5-42BA-A85B-95CD7386C342.html",
							"GUID-498EDB5B-D3B5-42BA-A85B-95CD7386C342.html",
							"GUID-498EDB5B-D3B5-42BA-A85B-95CD7386C342.html",
							"GUID-CB581974-A48C-4B47-B201-74BCD210E740.html","GUID-27007B72-E2EB-409F-B228-FA222F74706F.html","GUID-B7813EEF-AF41-4535-A1CF-16DF15E4C8E6.html",
							"GUID-B7813EEF-AF41-4535-A1CF-16DF15E4C8E6.html",
							"GUID-B7813EEF-AF41-4535-A1CF-16DF15E4C8E6.html",
							"GUID-B7813EEF-AF41-4535-A1CF-16DF15E4C8E6.html",
							"GUID-B7813EEF-AF41-4535-A1CF-16DF15E4C8E6.html",
							"GUID-9F8E6A8D-8F76-4E3C-91E2-8B483C2A834E.html",
							"GUID-9F8E6A8D-8F76-4E3C-91E2-8B483C2A834E.html",
							"GUID-9F8E6A8D-8F76-4E3C-91E2-8B483C2A834E.html",
							"GUID-9F8E6A8D-8F76-4E3C-91E2-8B483C2A834E.html",
							"GUID-9F8E6A8D-8F76-4E3C-91E2-8B483C2A834E.html",
							"GUID-D1B40A5D-F114-45A8-936C-200128B092E7.html",
							"GUID-D1B40A5D-F114-45A8-936C-200128B092E7.html",
							"GUID-D1B40A5D-F114-45A8-936C-200128B092E7.html",
							"GUID-D1B40A5D-F114-45A8-936C-200128B092E7.html",
							"GUID-D1B40A5D-F114-45A8-936C-200128B092E7.html",
							"GUID-25CFB549-FFAB-46BC-9963-D92829B15E1C.html",
							"GUID-25CFB549-FFAB-46BC-9963-D92829B15E1C.html",
							"GUID-25CFB549-FFAB-46BC-9963-D92829B15E1C.html",
							"GUID-25CFB549-FFAB-46BC-9963-D92829B15E1C.html",
							"GUID-25CFB549-FFAB-46BC-9963-D92829B15E1C.html",
							"GUID-8A5339E9-99B3-471E-8D71-F23D97A6FDAA.html",
							"GUID-8A5339E9-99B3-471E-8D71-F23D97A6FDAA.html",
							"GUID-8A5339E9-99B3-471E-8D71-F23D97A6FDAA.html",
							"GUID-8A5339E9-99B3-471E-8D71-F23D97A6FDAA.html",
							"GUID-8A5339E9-99B3-471E-8D71-F23D97A6FDAA.html",
							"GUID-4A62B2BB-8C2B-4096-967E-7B74A6608F18.html",
							"GUID-4A62B2BB-8C2B-4096-967E-7B74A6608F18.html",
							"GUID-4A62B2BB-8C2B-4096-967E-7B74A6608F18.html",
							"GUID-4A62B2BB-8C2B-4096-967E-7B74A6608F18.html",
							"GUID-4A62B2BB-8C2B-4096-967E-7B74A6608F18.html",
							"GUID-D42460CB-F60F-4F52-A4DB-F0E1C410E6B1.html","GUID-943408A6-F829-459E-9E26-04F7334C81EE.html",
							"GUID-943408A6-F829-459E-9E26-04F7334C81EE.html",
							"GUID-943408A6-F829-459E-9E26-04F7334C81EE.html",
							"GUID-943408A6-F829-459E-9E26-04F7334C81EE.html",
							"GUID-943408A6-F829-459E-9E26-04F7334C81EE.html",
							"GUID-C9CD0C79-244D-4825-BC50-A73E97D5D79B.html",
							"GUID-C9CD0C79-244D-4825-BC50-A73E97D5D79B.html",
							"GUID-C9CD0C79-244D-4825-BC50-A73E97D5D79B.html",
							"GUID-C9CD0C79-244D-4825-BC50-A73E97D5D79B.html",
							"GUID-C9CD0C79-244D-4825-BC50-A73E97D5D79B.html",
							"GUID-FD6C9CCF-18B7-4227-BA9A-000D3EC3F5E3.html",
							"GUID-FD6C9CCF-18B7-4227-BA9A-000D3EC3F5E3.html",
							"GUID-FD6C9CCF-18B7-4227-BA9A-000D3EC3F5E3.html",
							"GUID-FD6C9CCF-18B7-4227-BA9A-000D3EC3F5E3.html",
							"GUID-FD6C9CCF-18B7-4227-BA9A-000D3EC3F5E3.html",
							"GUID-F75CF439-7362-4DEF-9FE5-D649D4F32ED1.html",
							"GUID-F75CF439-7362-4DEF-9FE5-D649D4F32ED1.html",
							"GUID-F75CF439-7362-4DEF-9FE5-D649D4F32ED1.html",
							"GUID-F75CF439-7362-4DEF-9FE5-D649D4F32ED1.html",
							"GUID-F75CF439-7362-4DEF-9FE5-D649D4F32ED1.html",
							"GUID-0ACA2901-CB92-4FDC-99DA-1C61E23DBE9A.html","GUID-1C5C7916-AD83-4D15-8407-ACCA7CC86CD0.html",
							"GUID-1C5C7916-AD83-4D15-8407-ACCA7CC86CD0.html",
							"GUID-1C5C7916-AD83-4D15-8407-ACCA7CC86CD0.html",
							"GUID-1C5C7916-AD83-4D15-8407-ACCA7CC86CD0.html",
							"GUID-1C5C7916-AD83-4D15-8407-ACCA7CC86CD0.html",
							"GUID-C85A2170-8219-4EFA-A9EC-E57F5CE504D3.html",
							"GUID-C85A2170-8219-4EFA-A9EC-E57F5CE504D3.html",
							"GUID-C85A2170-8219-4EFA-A9EC-E57F5CE504D3.html",
							"GUID-C85A2170-8219-4EFA-A9EC-E57F5CE504D3.html",
							"GUID-C85A2170-8219-4EFA-A9EC-E57F5CE504D3.html",
							"GUID-9851F12F-43FD-4F39-B9D6-406043743FC0.html",
							"GUID-9851F12F-43FD-4F39-B9D6-406043743FC0.html",
							"GUID-9851F12F-43FD-4F39-B9D6-406043743FC0.html",
							"GUID-9851F12F-43FD-4F39-B9D6-406043743FC0.html",
							"GUID-9851F12F-43FD-4F39-B9D6-406043743FC0.html",
							"GUID-57BD67CF-AC4F-45E8-9588-37F44A1180F0.html",
							"GUID-57BD67CF-AC4F-45E8-9588-37F44A1180F0.html",
							"GUID-57BD67CF-AC4F-45E8-9588-37F44A1180F0.html",
							"GUID-57BD67CF-AC4F-45E8-9588-37F44A1180F0.html",
							"GUID-57BD67CF-AC4F-45E8-9588-37F44A1180F0.html",
							"GUID-97B49612-DAB8-4D81-8BDC-D38AD7628EC6.html",
							"GUID-97B49612-DAB8-4D81-8BDC-D38AD7628EC6.html",
							"GUID-97B49612-DAB8-4D81-8BDC-D38AD7628EC6.html",
							"GUID-97B49612-DAB8-4D81-8BDC-D38AD7628EC6.html",
							"GUID-97B49612-DAB8-4D81-8BDC-D38AD7628EC6.html",
							"GUID-2785CD23-ACF3-482A-B11B-592DC8B1A921.html",
							"GUID-2785CD23-ACF3-482A-B11B-592DC8B1A921.html",
							"GUID-2785CD23-ACF3-482A-B11B-592DC8B1A921.html",
							"GUID-2785CD23-ACF3-482A-B11B-592DC8B1A921.html",
							"GUID-2785CD23-ACF3-482A-B11B-592DC8B1A921.html",
							"GUID-37E0BAE2-2FB4-48DC-A38A-6277C697E131.html",
							"GUID-37E0BAE2-2FB4-48DC-A38A-6277C697E131.html",
							"GUID-37E0BAE2-2FB4-48DC-A38A-6277C697E131.html",
							"GUID-37E0BAE2-2FB4-48DC-A38A-6277C697E131.html",
							"GUID-37E0BAE2-2FB4-48DC-A38A-6277C697E131.html",
							"GUID-F4224864-6F03-456D-B1DA-B177AEA55B7A.html",
							"GUID-F4224864-6F03-456D-B1DA-B177AEA55B7A.html",
							"GUID-F4224864-6F03-456D-B1DA-B177AEA55B7A.html",
							"GUID-F4224864-6F03-456D-B1DA-B177AEA55B7A.html",
							"GUID-F4224864-6F03-456D-B1DA-B177AEA55B7A.html",
							"GUID-32F926AD-4EBA-4D93-B32A-20F11993CFEE.html",
							"GUID-32F926AD-4EBA-4D93-B32A-20F11993CFEE.html",
							"GUID-32F926AD-4EBA-4D93-B32A-20F11993CFEE.html",
							"GUID-32F926AD-4EBA-4D93-B32A-20F11993CFEE.html",
							"GUID-32F926AD-4EBA-4D93-B32A-20F11993CFEE.html",
							"GUID-A68FC8F3-20D1-4DBC-A74E-9F10AD91DDF6.html",
							"GUID-A68FC8F3-20D1-4DBC-A74E-9F10AD91DDF6.html",
							"GUID-A68FC8F3-20D1-4DBC-A74E-9F10AD91DDF6.html",
							"GUID-A68FC8F3-20D1-4DBC-A74E-9F10AD91DDF6.html",
							"GUID-A68FC8F3-20D1-4DBC-A74E-9F10AD91DDF6.html",
							"GUID-905C1BF7-AD06-4DB3-B232-5997E91C8397.html","GUID-BE547CB3-BCFB-4552-842F-14C5CA3A241B.html",
							"GUID-BE547CB3-BCFB-4552-842F-14C5CA3A241B.html",
							"GUID-BE547CB3-BCFB-4552-842F-14C5CA3A241B.html",
							"GUID-BE547CB3-BCFB-4552-842F-14C5CA3A241B.html",
							"GUID-BE547CB3-BCFB-4552-842F-14C5CA3A241B.html",
							"GUID-C1EC9771-00CF-482A-A501-26E12E554373.html",
							"GUID-C1EC9771-00CF-482A-A501-26E12E554373.html",
							"GUID-C1EC9771-00CF-482A-A501-26E12E554373.html",
							"GUID-C1EC9771-00CF-482A-A501-26E12E554373.html",
							"GUID-C1EC9771-00CF-482A-A501-26E12E554373.html",
							"GUID-0E42A53E-E1E2-4D4E-85CA-36266AD132E5.html",
							"GUID-0E42A53E-E1E2-4D4E-85CA-36266AD132E5.html",
							"GUID-0E42A53E-E1E2-4D4E-85CA-36266AD132E5.html",
							"GUID-0E42A53E-E1E2-4D4E-85CA-36266AD132E5.html",
							"GUID-0E42A53E-E1E2-4D4E-85CA-36266AD132E5.html",
							"GUID-AB8E46AF-ACDC-4903-9CB5-A52BFE3CC267.html",
							"GUID-AB8E46AF-ACDC-4903-9CB5-A52BFE3CC267.html",
							"GUID-AB8E46AF-ACDC-4903-9CB5-A52BFE3CC267.html",
							"GUID-AB8E46AF-ACDC-4903-9CB5-A52BFE3CC267.html",
							"GUID-AB8E46AF-ACDC-4903-9CB5-A52BFE3CC267.html",
							"GUID-2143A2D7-3EFD-48BF-B3F0-3BC9C7D34B06.html",
							"GUID-2143A2D7-3EFD-48BF-B3F0-3BC9C7D34B06.html",
							"GUID-2143A2D7-3EFD-48BF-B3F0-3BC9C7D34B06.html",
							"GUID-2143A2D7-3EFD-48BF-B3F0-3BC9C7D34B06.html",
							"GUID-2143A2D7-3EFD-48BF-B3F0-3BC9C7D34B06.html",
							"GUID-EBE88ADF-31D9-4DC7-8E0A-D9888D34DD9E.html",
							"GUID-EBE88ADF-31D9-4DC7-8E0A-D9888D34DD9E.html",
							"GUID-EBE88ADF-31D9-4DC7-8E0A-D9888D34DD9E.html",
							"GUID-EBE88ADF-31D9-4DC7-8E0A-D9888D34DD9E.html",
							"GUID-EBE88ADF-31D9-4DC7-8E0A-D9888D34DD9E.html",
							"GUID-44303E4F-007B-4E93-AAE0-9DCDC1546C92.html",
							"GUID-44303E4F-007B-4E93-AAE0-9DCDC1546C92.html",
							"GUID-44303E4F-007B-4E93-AAE0-9DCDC1546C92.html",
							"GUID-44303E4F-007B-4E93-AAE0-9DCDC1546C92.html",
							"GUID-44303E4F-007B-4E93-AAE0-9DCDC1546C92.html",
							"GUID-7998E0A4-9334-4963-89D9-9FA5EB7CA71A.html",
							"GUID-7998E0A4-9334-4963-89D9-9FA5EB7CA71A.html",
							"GUID-7998E0A4-9334-4963-89D9-9FA5EB7CA71A.html",
							"GUID-7998E0A4-9334-4963-89D9-9FA5EB7CA71A.html",
							"GUID-7998E0A4-9334-4963-89D9-9FA5EB7CA71A.html",
							"GUID-8C232068-06AE-4338-B639-B076904E3407.html",
							"GUID-8C232068-06AE-4338-B639-B076904E3407.html",
							"GUID-8C232068-06AE-4338-B639-B076904E3407.html",
							"GUID-8C232068-06AE-4338-B639-B076904E3407.html",
							"GUID-8C232068-06AE-4338-B639-B076904E3407.html",
							"GUID-0F326672-6BFD-402B-A90A-9839F5DADA53.html",
							"GUID-0F326672-6BFD-402B-A90A-9839F5DADA53.html",
							"GUID-0F326672-6BFD-402B-A90A-9839F5DADA53.html",
							"GUID-0F326672-6BFD-402B-A90A-9839F5DADA53.html",
							"GUID-0F326672-6BFD-402B-A90A-9839F5DADA53.html",
							"GUID-CD32C8EA-1C7C-488C-88B1-8EDA42AF5AD9.html",
							"GUID-CD32C8EA-1C7C-488C-88B1-8EDA42AF5AD9.html",
							"GUID-CD32C8EA-1C7C-488C-88B1-8EDA42AF5AD9.html",
							"GUID-CD32C8EA-1C7C-488C-88B1-8EDA42AF5AD9.html",
							"GUID-CD32C8EA-1C7C-488C-88B1-8EDA42AF5AD9.html",
							"GUID-4D8A6259-3EC8-4641-A731-19126140A641.html",
							"GUID-4D8A6259-3EC8-4641-A731-19126140A641.html",
							"GUID-4D8A6259-3EC8-4641-A731-19126140A641.html",
							"GUID-4D8A6259-3EC8-4641-A731-19126140A641.html",
							"GUID-4D8A6259-3EC8-4641-A731-19126140A641.html",
							"GUID-AB5C79F0-0419-4CF1-BE26-7ADAED16BB72.html",
							"GUID-AB5C79F0-0419-4CF1-BE26-7ADAED16BB72.html",
							"GUID-AB5C79F0-0419-4CF1-BE26-7ADAED16BB72.html",
							"GUID-AB5C79F0-0419-4CF1-BE26-7ADAED16BB72.html",
							"GUID-AB5C79F0-0419-4CF1-BE26-7ADAED16BB72.html",
							"GUID-8B25EDA8-4615-4864-A346-BE1B562750FD.html",
							"GUID-8B25EDA8-4615-4864-A346-BE1B562750FD.html",
							"GUID-8B25EDA8-4615-4864-A346-BE1B562750FD.html",
							"GUID-8B25EDA8-4615-4864-A346-BE1B562750FD.html",
							"GUID-8B25EDA8-4615-4864-A346-BE1B562750FD.html",
							"GUID-54D3D96D-2B62-4D06-BAB4-658479B77AF3.html",
							"GUID-54D3D96D-2B62-4D06-BAB4-658479B77AF3.html",
							"GUID-54D3D96D-2B62-4D06-BAB4-658479B77AF3.html",
							"GUID-54D3D96D-2B62-4D06-BAB4-658479B77AF3.html",
							"GUID-54D3D96D-2B62-4D06-BAB4-658479B77AF3.html",
							"GUID-B91EBB43-88F1-4602-A2DB-E3E624CFCC1F.html",
							"GUID-B91EBB43-88F1-4602-A2DB-E3E624CFCC1F.html",
							"GUID-B91EBB43-88F1-4602-A2DB-E3E624CFCC1F.html",
							"GUID-B91EBB43-88F1-4602-A2DB-E3E624CFCC1F.html",
							"GUID-B91EBB43-88F1-4602-A2DB-E3E624CFCC1F.html",
							"GUID-9A7A37E2-C14B-404E-8D8E-BBB1C649CE39.html",
							"GUID-9A7A37E2-C14B-404E-8D8E-BBB1C649CE39.html",
							"GUID-9A7A37E2-C14B-404E-8D8E-BBB1C649CE39.html",
							"GUID-9A7A37E2-C14B-404E-8D8E-BBB1C649CE39.html",
							"GUID-9A7A37E2-C14B-404E-8D8E-BBB1C649CE39.html",
							"GUID-9E6E728C-E3A6-47FF-B4F1-6CEA3E1971A8.html",
							"GUID-9E6E728C-E3A6-47FF-B4F1-6CEA3E1971A8.html",
							"GUID-9E6E728C-E3A6-47FF-B4F1-6CEA3E1971A8.html",
							"GUID-9E6E728C-E3A6-47FF-B4F1-6CEA3E1971A8.html",
							"GUID-9E6E728C-E3A6-47FF-B4F1-6CEA3E1971A8.html",
							"GUID-7EA49504-B32B-4A78-91B7-A05C1674B5B0.html",
							"GUID-7EA49504-B32B-4A78-91B7-A05C1674B5B0.html",
							"GUID-7EA49504-B32B-4A78-91B7-A05C1674B5B0.html",
							"GUID-7EA49504-B32B-4A78-91B7-A05C1674B5B0.html",
							"GUID-7EA49504-B32B-4A78-91B7-A05C1674B5B0.html",
							"GUID-94132FE9-766B-4A73-A5E1-904DA8BB08E1.html",
							"GUID-94132FE9-766B-4A73-A5E1-904DA8BB08E1.html",
							"GUID-94132FE9-766B-4A73-A5E1-904DA8BB08E1.html",
							"GUID-94132FE9-766B-4A73-A5E1-904DA8BB08E1.html",
							"GUID-94132FE9-766B-4A73-A5E1-904DA8BB08E1.html",
							"GUID-518408E4-C42B-4A95-A596-C5991781FE78.html",
							"GUID-518408E4-C42B-4A95-A596-C5991781FE78.html",
							"GUID-518408E4-C42B-4A95-A596-C5991781FE78.html",
							"GUID-518408E4-C42B-4A95-A596-C5991781FE78.html",
							"GUID-518408E4-C42B-4A95-A596-C5991781FE78.html",
							"GUID-081A5563-337A-44A4-921F-B2F41BBF12F2.html",
							"GUID-081A5563-337A-44A4-921F-B2F41BBF12F2.html",
							"GUID-081A5563-337A-44A4-921F-B2F41BBF12F2.html",
							"GUID-081A5563-337A-44A4-921F-B2F41BBF12F2.html",
							"GUID-081A5563-337A-44A4-921F-B2F41BBF12F2.html",
							"GUID-0FDD3A8D-A16A-4A0A-B878-B8BBD036EFAF.html",
							"GUID-0FDD3A8D-A16A-4A0A-B878-B8BBD036EFAF.html",
							"GUID-0FDD3A8D-A16A-4A0A-B878-B8BBD036EFAF.html",
							"GUID-0FDD3A8D-A16A-4A0A-B878-B8BBD036EFAF.html",
							"GUID-0FDD3A8D-A16A-4A0A-B878-B8BBD036EFAF.html",
							"GUID-464C07AA-1FF5-4C3C-85C9-9D7B4E6ABC8A.html",
							"GUID-464C07AA-1FF5-4C3C-85C9-9D7B4E6ABC8A.html",
							"GUID-464C07AA-1FF5-4C3C-85C9-9D7B4E6ABC8A.html",
							"GUID-464C07AA-1FF5-4C3C-85C9-9D7B4E6ABC8A.html",
							"GUID-464C07AA-1FF5-4C3C-85C9-9D7B4E6ABC8A.html",
							"GUID-7B46799C-762F-4250-9CEA-E21E023802EF.html",
							"GUID-7B46799C-762F-4250-9CEA-E21E023802EF.html",
							"GUID-7B46799C-762F-4250-9CEA-E21E023802EF.html",
							"GUID-7B46799C-762F-4250-9CEA-E21E023802EF.html",
							"GUID-7B46799C-762F-4250-9CEA-E21E023802EF.html",
							"GUID-98E3BF39-EA6A-4426-A73F-92BF42F4F5D5.html",
							"GUID-98E3BF39-EA6A-4426-A73F-92BF42F4F5D5.html",
							"GUID-98E3BF39-EA6A-4426-A73F-92BF42F4F5D5.html",
							"GUID-98E3BF39-EA6A-4426-A73F-92BF42F4F5D5.html",
							"GUID-98E3BF39-EA6A-4426-A73F-92BF42F4F5D5.html",
							"GUID-81B739E0-B011-4DF0-B252-FABE1991EE49.html",
							"GUID-81B739E0-B011-4DF0-B252-FABE1991EE49.html",
							"GUID-81B739E0-B011-4DF0-B252-FABE1991EE49.html",
							"GUID-81B739E0-B011-4DF0-B252-FABE1991EE49.html",
							"GUID-81B739E0-B011-4DF0-B252-FABE1991EE49.html",
							"GUID-7F23FD59-307B-4FEF-A923-0C775FA3E779.html",
							"GUID-7F23FD59-307B-4FEF-A923-0C775FA3E779.html",
							"GUID-7F23FD59-307B-4FEF-A923-0C775FA3E779.html",
							"GUID-7F23FD59-307B-4FEF-A923-0C775FA3E779.html",
							"GUID-7F23FD59-307B-4FEF-A923-0C775FA3E779.html",
							"GUID-CF91256F-9FBC-482A-9983-B1FE32F710E2.html",
							"GUID-CF91256F-9FBC-482A-9983-B1FE32F710E2.html",
							"GUID-CF91256F-9FBC-482A-9983-B1FE32F710E2.html",
							"GUID-CF91256F-9FBC-482A-9983-B1FE32F710E2.html",
							"GUID-CF91256F-9FBC-482A-9983-B1FE32F710E2.html",
							"GUID-41A9E734-71AB-45F3-825C-652B4E1930C0.html",
							"GUID-41A9E734-71AB-45F3-825C-652B4E1930C0.html",
							"GUID-41A9E734-71AB-45F3-825C-652B4E1930C0.html",
							"GUID-41A9E734-71AB-45F3-825C-652B4E1930C0.html",
							"GUID-41A9E734-71AB-45F3-825C-652B4E1930C0.html",
							"GUID-061F16D2-2CAE-4035-8BB3-E52E3D787EB4.html",
							"GUID-061F16D2-2CAE-4035-8BB3-E52E3D787EB4.html",
							"GUID-061F16D2-2CAE-4035-8BB3-E52E3D787EB4.html",
							"GUID-061F16D2-2CAE-4035-8BB3-E52E3D787EB4.html",
							"GUID-061F16D2-2CAE-4035-8BB3-E52E3D787EB4.html",
							"GUID-FEDC84EC-4CE3-4698-91F7-2AEAE3FB4199.html",
							"GUID-FEDC84EC-4CE3-4698-91F7-2AEAE3FB4199.html",
							"GUID-FEDC84EC-4CE3-4698-91F7-2AEAE3FB4199.html",
							"GUID-FEDC84EC-4CE3-4698-91F7-2AEAE3FB4199.html",
							"GUID-FEDC84EC-4CE3-4698-91F7-2AEAE3FB4199.html",
							"GUID-677ED949-89C0-4564-9DFB-614E8E399F5C.html",
							"GUID-677ED949-89C0-4564-9DFB-614E8E399F5C.html",
							"GUID-677ED949-89C0-4564-9DFB-614E8E399F5C.html",
							"GUID-677ED949-89C0-4564-9DFB-614E8E399F5C.html",
							"GUID-677ED949-89C0-4564-9DFB-614E8E399F5C.html",
							"GUID-BC26E1BD-5336-4FAD-AFF7-4E4683B8422D.html",
							"GUID-BC26E1BD-5336-4FAD-AFF7-4E4683B8422D.html",
							"GUID-BC26E1BD-5336-4FAD-AFF7-4E4683B8422D.html",
							"GUID-BC26E1BD-5336-4FAD-AFF7-4E4683B8422D.html",
							"GUID-BC26E1BD-5336-4FAD-AFF7-4E4683B8422D.html",
							"GUID-DF5A36BD-DA60-4E19-8AA7-185F9EECED22.html",
							"GUID-DF5A36BD-DA60-4E19-8AA7-185F9EECED22.html",
							"GUID-DF5A36BD-DA60-4E19-8AA7-185F9EECED22.html",
							"GUID-DF5A36BD-DA60-4E19-8AA7-185F9EECED22.html",
							"GUID-DF5A36BD-DA60-4E19-8AA7-185F9EECED22.html",
							"GUID-AB61F6E6-3508-4240-9795-727C03E7E52D.html",
							"GUID-AB61F6E6-3508-4240-9795-727C03E7E52D.html",
							"GUID-AB61F6E6-3508-4240-9795-727C03E7E52D.html",
							"GUID-AB61F6E6-3508-4240-9795-727C03E7E52D.html",
							"GUID-AB61F6E6-3508-4240-9795-727C03E7E52D.html",
							"GUID-A74F2FFE-CDD9-4436-91CE-DA620F90F6AD.html",
							"GUID-A74F2FFE-CDD9-4436-91CE-DA620F90F6AD.html",
							"GUID-A74F2FFE-CDD9-4436-91CE-DA620F90F6AD.html",
							"GUID-A74F2FFE-CDD9-4436-91CE-DA620F90F6AD.html",
							"GUID-A74F2FFE-CDD9-4436-91CE-DA620F90F6AD.html",
							"GUID-C69A95F0-9E00-4896-ACF1-2E23140C3F37.html",
							"GUID-C69A95F0-9E00-4896-ACF1-2E23140C3F37.html",
							"GUID-C69A95F0-9E00-4896-ACF1-2E23140C3F37.html",
							"GUID-C69A95F0-9E00-4896-ACF1-2E23140C3F37.html",
							"GUID-C69A95F0-9E00-4896-ACF1-2E23140C3F37.html",
							"GUID-43B90AC6-F3D8-4BD6-81BE-F01C2DEDF18B.html",
							"GUID-43B90AC6-F3D8-4BD6-81BE-F01C2DEDF18B.html",
							"GUID-43B90AC6-F3D8-4BD6-81BE-F01C2DEDF18B.html",
							"GUID-43B90AC6-F3D8-4BD6-81BE-F01C2DEDF18B.html",
							"GUID-43B90AC6-F3D8-4BD6-81BE-F01C2DEDF18B.html",
							"GUID-747CBB24-84B4-451A-A43E-6114D8F4A565.html","GUID-15E7011D-066B-489E-9D52-13654016EDD5.html","GUID-45BE80D9-2238-48A1-B0C7-FC4631E56614.html",
							"GUID-45BE80D9-2238-48A1-B0C7-FC4631E56614.html",
							"GUID-45BE80D9-2238-48A1-B0C7-FC4631E56614.html",
							"GUID-EEFB432C-11CC-49AA-A27B-0D622358E76C.html",
							"GUID-EEFB432C-11CC-49AA-A27B-0D622358E76C.html",
							"GUID-EEFB432C-11CC-49AA-A27B-0D622358E76C.html",
							"GUID-7772289D-5F0B-45D6-AA37-C32544C1C3F4.html",
							"GUID-7772289D-5F0B-45D6-AA37-C32544C1C3F4.html",
							"GUID-7772289D-5F0B-45D6-AA37-C32544C1C3F4.html",
							"GUID-06FFC4C5-0582-4633-AFE0-6B7EFE11018D.html",
							"GUID-06FFC4C5-0582-4633-AFE0-6B7EFE11018D.html",
							"GUID-06FFC4C5-0582-4633-AFE0-6B7EFE11018D.html",
							"GUID-21B7CC3A-88B5-4BA2-8F9D-928F5CFF10F5.html",
							"GUID-21B7CC3A-88B5-4BA2-8F9D-928F5CFF10F5.html",
							"GUID-21B7CC3A-88B5-4BA2-8F9D-928F5CFF10F5.html",
							"GUID-E9966CB9-1D92-48AA-A8A1-9BAD70D1D7A9.html",
							"GUID-E9966CB9-1D92-48AA-A8A1-9BAD70D1D7A9.html",
							"GUID-E9966CB9-1D92-48AA-A8A1-9BAD70D1D7A9.html",
							"GUID-002E7D25-650D-41FE-A740-7886DE79B977.html",
							"GUID-002E7D25-650D-41FE-A740-7886DE79B977.html",
							"GUID-002E7D25-650D-41FE-A740-7886DE79B977.html",
							"GUID-7EEEBA66-42F7-4FBB-86B2-92234313F50C.html",
							"GUID-7EEEBA66-42F7-4FBB-86B2-92234313F50C.html",
							"GUID-7EEEBA66-42F7-4FBB-86B2-92234313F50C.html",
							"GUID-0E966882-579A-467C-8748-B2F92C401E5E.html",
							"GUID-0E966882-579A-467C-8748-B2F92C401E5E.html",
							"GUID-0E966882-579A-467C-8748-B2F92C401E5E.html",
							"GUID-06FB0C5F-2C54-4BC2-9825-7767A0A5C7E3.html",
							"GUID-06FB0C5F-2C54-4BC2-9825-7767A0A5C7E3.html",
							"GUID-06FB0C5F-2C54-4BC2-9825-7767A0A5C7E3.html",
							"GUID-FE46701C-BF6D-423C-86BD-EB5EA21F187A.html",
							"GUID-FE46701C-BF6D-423C-86BD-EB5EA21F187A.html",
							"GUID-FE46701C-BF6D-423C-86BD-EB5EA21F187A.html",
							"GUID-D8A5EDF3-21DA-4811-B469-4809F1EBB976.html",
							"GUID-D8A5EDF3-21DA-4811-B469-4809F1EBB976.html",
							"GUID-D8A5EDF3-21DA-4811-B469-4809F1EBB976.html",
							"GUID-DB3751E6-0713-473F-8E90-BB7A23F769BF.html",
							"GUID-DB3751E6-0713-473F-8E90-BB7A23F769BF.html",
							"GUID-DB3751E6-0713-473F-8E90-BB7A23F769BF.html",
							"GUID-3F2AF347-3A0D-44A0-9E21-340BFEE69EDB.html",
							"GUID-3F2AF347-3A0D-44A0-9E21-340BFEE69EDB.html",
							"GUID-3F2AF347-3A0D-44A0-9E21-340BFEE69EDB.html",
							"GUID-7A9E8675-6E8D-4982-A2A6-39F759BCE90D.html",
							"GUID-7A9E8675-6E8D-4982-A2A6-39F759BCE90D.html",
							"GUID-7A9E8675-6E8D-4982-A2A6-39F759BCE90D.html",
							"GUID-0CA687FA-1431-429F-B510-451C9AB58EF0.html",
							"GUID-0CA687FA-1431-429F-B510-451C9AB58EF0.html",
							"GUID-0CA687FA-1431-429F-B510-451C9AB58EF0.html",
							"GUID-EF496F0B-A421-424D-82B7-ED59485FACA2.html",
							"GUID-EF496F0B-A421-424D-82B7-ED59485FACA2.html",
							"GUID-EF496F0B-A421-424D-82B7-ED59485FACA2.html",
							"GUID-5CBACA73-1D26-484B-87DF-15C0AB3E0CFE.html",
							"GUID-5CBACA73-1D26-484B-87DF-15C0AB3E0CFE.html",
							"GUID-5CBACA73-1D26-484B-87DF-15C0AB3E0CFE.html",
							"GUID-A77AFAC7-2CBB-47CB-A550-110AD5920C8F.html",
							"GUID-A77AFAC7-2CBB-47CB-A550-110AD5920C8F.html",
							"GUID-A77AFAC7-2CBB-47CB-A550-110AD5920C8F.html",
							"GUID-7C184961-66F6-4006-A17B-C879A195F31C.html",
							"GUID-7C184961-66F6-4006-A17B-C879A195F31C.html",
							"GUID-7C184961-66F6-4006-A17B-C879A195F31C.html",
							"GUID-08DD94DA-3518-4148-9B51-66AD17921CEE.html","GUID-39D5E1EB-9EF6-4F9E-B360-F0FE642B7DC8.html",
							"GUID-39D5E1EB-9EF6-4F9E-B360-F0FE642B7DC8.html",
							"GUID-39D5E1EB-9EF6-4F9E-B360-F0FE642B7DC8.html",
							"GUID-99E23F3C-7041-4537-8289-FAACDC5BE3C4.html",
							"GUID-99E23F3C-7041-4537-8289-FAACDC5BE3C4.html",
							"GUID-99E23F3C-7041-4537-8289-FAACDC5BE3C4.html",
							"GUID-C88BE59D-D2A9-46FC-8F63-89B803429B99.html",
							"GUID-C88BE59D-D2A9-46FC-8F63-89B803429B99.html",
							"GUID-C88BE59D-D2A9-46FC-8F63-89B803429B99.html",
							"GUID-BBDEF3FD-DE5E-4FFA-BD8F-74908B6CAD66.html",
							"GUID-BBDEF3FD-DE5E-4FFA-BD8F-74908B6CAD66.html",
							"GUID-BBDEF3FD-DE5E-4FFA-BD8F-74908B6CAD66.html",
							"GUID-6412AC64-2425-44B0-A251-E3A7842BEC18.html",
							"GUID-6412AC64-2425-44B0-A251-E3A7842BEC18.html",
							"GUID-6412AC64-2425-44B0-A251-E3A7842BEC18.html",
							"GUID-9E8E9CEE-B293-4F45-BC1C-6A8A164E58F7.html",
							"GUID-9E8E9CEE-B293-4F45-BC1C-6A8A164E58F7.html",
							"GUID-9E8E9CEE-B293-4F45-BC1C-6A8A164E58F7.html",
							"GUID-1DAA1B40-8D31-4B36-9095-418869E6DCF7.html",
							"GUID-1DAA1B40-8D31-4B36-9095-418869E6DCF7.html",
							"GUID-1DAA1B40-8D31-4B36-9095-418869E6DCF7.html",
							"GUID-7A32D365-A70E-4420-99F0-C7A167181169.html",
							"GUID-7A32D365-A70E-4420-99F0-C7A167181169.html",
							"GUID-7A32D365-A70E-4420-99F0-C7A167181169.html",
							"GUID-FA8B9F5E-7A2D-48A7-A5C3-548EF23CB1F6.html",
							"GUID-FA8B9F5E-7A2D-48A7-A5C3-548EF23CB1F6.html",
							"GUID-FA8B9F5E-7A2D-48A7-A5C3-548EF23CB1F6.html",
							"GUID-10D9DB3C-446B-4F88-96BD-28848D277B22.html","GUID-DDA8C2E5-DA98-427A-8B7D-7EC43128217F.html",
							"GUID-DDA8C2E5-DA98-427A-8B7D-7EC43128217F.html",
							"GUID-DDA8C2E5-DA98-427A-8B7D-7EC43128217F.html",
							"GUID-3B862126-EE87-461B-A41E-2F20F2879C2E.html",
							"GUID-3B862126-EE87-461B-A41E-2F20F2879C2E.html",
							"GUID-3B862126-EE87-461B-A41E-2F20F2879C2E.html",
							"GUID-3F32EB5F-A1FC-4AF0-B8E0-48C3A770301D.html",
							"GUID-3F32EB5F-A1FC-4AF0-B8E0-48C3A770301D.html",
							"GUID-3F32EB5F-A1FC-4AF0-B8E0-48C3A770301D.html",
							"GUID-C0CE30A6-6F1E-47D3-857B-5481E8B72EFD.html",
							"GUID-C0CE30A6-6F1E-47D3-857B-5481E8B72EFD.html",
							"GUID-C0CE30A6-6F1E-47D3-857B-5481E8B72EFD.html",
							"GUID-28E1C7BC-C059-43BC-9AFA-A4010E7E514A.html",
							"GUID-28E1C7BC-C059-43BC-9AFA-A4010E7E514A.html",
							"GUID-28E1C7BC-C059-43BC-9AFA-A4010E7E514A.html",
							"GUID-8544194D-18B1-4B4F-9E60-E11AC21EBB39.html",
							"GUID-8544194D-18B1-4B4F-9E60-E11AC21EBB39.html",
							"GUID-8544194D-18B1-4B4F-9E60-E11AC21EBB39.html",
							"GUID-25ED609C-8332-42AE-85DE-F3383DA05BA8.html",
							"GUID-25ED609C-8332-42AE-85DE-F3383DA05BA8.html",
							"GUID-25ED609C-8332-42AE-85DE-F3383DA05BA8.html",
							"GUID-88C0EC57-2642-40FA-BF5E-767E80A0A15C.html",
							"GUID-88C0EC57-2642-40FA-BF5E-767E80A0A15C.html",
							"GUID-88C0EC57-2642-40FA-BF5E-767E80A0A15C.html",
							"GUID-64D5B11D-63AC-459A-93DC-D3F226F525FA.html",
							"GUID-64D5B11D-63AC-459A-93DC-D3F226F525FA.html",
							"GUID-64D5B11D-63AC-459A-93DC-D3F226F525FA.html",
							"GUID-7F3B0C8A-23D5-4C3E-B77D-9AE7326BFF70.html",
							"GUID-7F3B0C8A-23D5-4C3E-B77D-9AE7326BFF70.html",
							"GUID-7F3B0C8A-23D5-4C3E-B77D-9AE7326BFF70.html",
							"GUID-AA22CCBA-AFB5-40C4-A58C-42DCA6DFD921.html",
							"GUID-AA22CCBA-AFB5-40C4-A58C-42DCA6DFD921.html",
							"GUID-AA22CCBA-AFB5-40C4-A58C-42DCA6DFD921.html",
							"GUID-33F8BF89-B54F-431A-B563-3E3434A4A605.html",
							"GUID-33F8BF89-B54F-431A-B563-3E3434A4A605.html",
							"GUID-33F8BF89-B54F-431A-B563-3E3434A4A605.html",
							"GUID-43A715EC-B596-4070-A26B-185BCC4A14C4.html",
							"GUID-43A715EC-B596-4070-A26B-185BCC4A14C4.html",
							"GUID-43A715EC-B596-4070-A26B-185BCC4A14C4.html",
							"GUID-CC5CA350-3C19-4E47-B580-4CB381EFF1F4.html",
							"GUID-CC5CA350-3C19-4E47-B580-4CB381EFF1F4.html",
							"GUID-CC5CA350-3C19-4E47-B580-4CB381EFF1F4.html",
							"GUID-4D43F322-EF44-441D-B864-1EAB08A6B4C1.html",
							"GUID-4D43F322-EF44-441D-B864-1EAB08A6B4C1.html",
							"GUID-4D43F322-EF44-441D-B864-1EAB08A6B4C1.html",
							"GUID-CB1C7F82-4A2A-469B-836B-A05E9B649FFA.html",
							"GUID-CB1C7F82-4A2A-469B-836B-A05E9B649FFA.html",
							"GUID-CB1C7F82-4A2A-469B-836B-A05E9B649FFA.html",
							"GUID-BBEFA87B-3D91-4666-AF5C-7D8DD7D8937C.html",
							"GUID-BBEFA87B-3D91-4666-AF5C-7D8DD7D8937C.html",
							"GUID-BBEFA87B-3D91-4666-AF5C-7D8DD7D8937C.html",
							"GUID-98A2BDE4-3F17-4FE5-AD8E-4F932B62C995.html",
							"GUID-98A2BDE4-3F17-4FE5-AD8E-4F932B62C995.html",
							"GUID-98A2BDE4-3F17-4FE5-AD8E-4F932B62C995.html",
							"GUID-20BD8FC1-75EA-4E7C-B1C6-10D088E81907.html",
							"GUID-20BD8FC1-75EA-4E7C-B1C6-10D088E81907.html",
							"GUID-20BD8FC1-75EA-4E7C-B1C6-10D088E81907.html",
							"GUID-84F7129B-190C-4E77-8A84-3F87E271AD56.html",
							"GUID-84F7129B-190C-4E77-8A84-3F87E271AD56.html",
							"GUID-84F7129B-190C-4E77-8A84-3F87E271AD56.html",
							"GUID-5D3CD4DF-40C1-4C83-BAA5-E5EFE26646BF.html",
							"GUID-5D3CD4DF-40C1-4C83-BAA5-E5EFE26646BF.html",
							"GUID-5D3CD4DF-40C1-4C83-BAA5-E5EFE26646BF.html",
							"GUID-EF181CAA-786D-4EE9-B00D-5CD28090D3D8.html","GUID-5F06CDE2-295D-4F2A-871A-402A05577874.html",
							"GUID-5F06CDE2-295D-4F2A-871A-402A05577874.html",
							"GUID-5F06CDE2-295D-4F2A-871A-402A05577874.html",
							"GUID-D2CA76D6-410C-46F7-B647-0D7D8A64E11A.html",
							"GUID-D2CA76D6-410C-46F7-B647-0D7D8A64E11A.html",
							"GUID-D2CA76D6-410C-46F7-B647-0D7D8A64E11A.html",
							"GUID-2B561956-69D2-4EB8-8581-5DD7E6664C91.html",
							"GUID-2B561956-69D2-4EB8-8581-5DD7E6664C91.html",
							"GUID-2B561956-69D2-4EB8-8581-5DD7E6664C91.html",
							"GUID-23DF5768-CD2C-4330-B4E5-BE1D85E4D33D.html",
							"GUID-23DF5768-CD2C-4330-B4E5-BE1D85E4D33D.html",
							"GUID-23DF5768-CD2C-4330-B4E5-BE1D85E4D33D.html",
							"GUID-D6B0B8F7-12CB-4848-875F-8EE998E399FC.html",
							"GUID-D6B0B8F7-12CB-4848-875F-8EE998E399FC.html",
							"GUID-D6B0B8F7-12CB-4848-875F-8EE998E399FC.html",
							"GUID-21A8D945-F584-450D-86B5-13118DAD7C60.html",
							"GUID-21A8D945-F584-450D-86B5-13118DAD7C60.html",
							"GUID-21A8D945-F584-450D-86B5-13118DAD7C60.html",
							"GUID-1714B4C9-5EC5-473D-8F81-6FF840E79694.html",
							"GUID-1714B4C9-5EC5-473D-8F81-6FF840E79694.html",
							"GUID-1714B4C9-5EC5-473D-8F81-6FF840E79694.html",
							"GUID-8E08DD47-8117-4B3D-805B-E7223B1A643F.html",
							"GUID-8E08DD47-8117-4B3D-805B-E7223B1A643F.html",
							"GUID-8E08DD47-8117-4B3D-805B-E7223B1A643F.html",
							"GUID-13C92A80-2BC1-46F4-8A98-A537D63EA2BE.html",
							"GUID-13C92A80-2BC1-46F4-8A98-A537D63EA2BE.html",
							"GUID-13C92A80-2BC1-46F4-8A98-A537D63EA2BE.html",
							"GUID-DEF88872-CEB6-4FE8-AFDD-9351FEFE38CA.html","GUID-FBA481BC-CEB9-4935-9394-AE091D975E04.html",
							"GUID-FBA481BC-CEB9-4935-9394-AE091D975E04.html",
							"GUID-FBA481BC-CEB9-4935-9394-AE091D975E04.html",
							"GUID-05DC2E0C-5732-4DDA-A323-A3CD4B9DD7C5.html",
							"GUID-05DC2E0C-5732-4DDA-A323-A3CD4B9DD7C5.html",
							"GUID-05DC2E0C-5732-4DDA-A323-A3CD4B9DD7C5.html",
							"GUID-B88FAEB5-B880-4BE6-AC5A-B945373AAFB2.html",
							"GUID-B88FAEB5-B880-4BE6-AC5A-B945373AAFB2.html",
							"GUID-B88FAEB5-B880-4BE6-AC5A-B945373AAFB2.html",
							"GUID-C9611AEF-448A-4D44-B317-9625FDB15BA5.html",
							"GUID-C9611AEF-448A-4D44-B317-9625FDB15BA5.html",
							"GUID-C9611AEF-448A-4D44-B317-9625FDB15BA5.html",
							"GUID-0EF0E057-DCE3-46D7-B9AA-84010BFAAE35.html",
							"GUID-0EF0E057-DCE3-46D7-B9AA-84010BFAAE35.html",
							"GUID-0EF0E057-DCE3-46D7-B9AA-84010BFAAE35.html",
							"GUID-FBE69EEB-2161-4899-A15B-5F7A4CC2DBFF.html",
							"GUID-FBE69EEB-2161-4899-A15B-5F7A4CC2DBFF.html",
							"GUID-FBE69EEB-2161-4899-A15B-5F7A4CC2DBFF.html",
							"GUID-9C33B788-3804-4AE5-8670-C5BAF8675535.html",
							"GUID-9C33B788-3804-4AE5-8670-C5BAF8675535.html",
							"GUID-9C33B788-3804-4AE5-8670-C5BAF8675535.html",
							"GUID-CC147DE5-2B1C-4DE4-9359-099B81CC0422.html",
							"GUID-CC147DE5-2B1C-4DE4-9359-099B81CC0422.html",
							"GUID-CC147DE5-2B1C-4DE4-9359-099B81CC0422.html",
							"GUID-029F91B4-6A26-4AD4-8D00-7E4609162D15.html","GUID-446CA862-84F0-4F54-9023-FD763E7DCF7B.html",
							"GUID-446CA862-84F0-4F54-9023-FD763E7DCF7B.html",
							"GUID-446CA862-84F0-4F54-9023-FD763E7DCF7B.html",
							"GUID-64D796CD-8CE5-445B-961E-4229D2A8BC99.html","GUID-7D447938-CDCC-4969-96EB-2EAC906D6FE8.html",
							"GUID-7D447938-CDCC-4969-96EB-2EAC906D6FE8.html",
							"GUID-7D447938-CDCC-4969-96EB-2EAC906D6FE8.html",
							"GUID-47A8B8A3-5099-4DA5-A791-5F3BAE29BF00.html","GUID-6DC07B6C-CCE5-4805-8A55-7981BABA5043.html",
							"GUID-6DC07B6C-CCE5-4805-8A55-7981BABA5043.html",
							"GUID-6DC07B6C-CCE5-4805-8A55-7981BABA5043.html",
							"GUID-F6F0DF5F-F9AE-45C0-9128-4B0EA9B6A1F7.html",
							"GUID-F6F0DF5F-F9AE-45C0-9128-4B0EA9B6A1F7.html",
							"GUID-F6F0DF5F-F9AE-45C0-9128-4B0EA9B6A1F7.html",
							"GUID-29F24B27-7FA0-4495-A1EB-D1024B76CE53.html",
							"GUID-29F24B27-7FA0-4495-A1EB-D1024B76CE53.html",
							"GUID-29F24B27-7FA0-4495-A1EB-D1024B76CE53.html",
							"GUID-B8041A8D-CE37-473A-8E30-295E32348DA6.html",
							"GUID-B8041A8D-CE37-473A-8E30-295E32348DA6.html",
							"GUID-B8041A8D-CE37-473A-8E30-295E32348DA6.html",
							"GUID-7DE8E39E-096F-4DB4-9094-BBC893F7EBEF.html",
							"GUID-7DE8E39E-096F-4DB4-9094-BBC893F7EBEF.html",
							"GUID-7DE8E39E-096F-4DB4-9094-BBC893F7EBEF.html",
							"GUID-1FECCE8A-3C04-4F86-8054-3C29AA748401.html",
							"GUID-1FECCE8A-3C04-4F86-8054-3C29AA748401.html",
							"GUID-1FECCE8A-3C04-4F86-8054-3C29AA748401.html",
							"GUID-01DED763-8CB5-4B98-8492-6A115AB46502.html",
							"GUID-01DED763-8CB5-4B98-8492-6A115AB46502.html",
							"GUID-01DED763-8CB5-4B98-8492-6A115AB46502.html",
							"GUID-AF90026E-D809-419A-9F29-1E03DC7FFC9C.html",
							"GUID-AF90026E-D809-419A-9F29-1E03DC7FFC9C.html",
							"GUID-AF90026E-D809-419A-9F29-1E03DC7FFC9C.html",
							"GUID-DFDF6464-97E5-43C2-9D60-051E28617635.html",
							"GUID-DFDF6464-97E5-43C2-9D60-051E28617635.html",
							"GUID-DFDF6464-97E5-43C2-9D60-051E28617635.html",
							"GUID-E0FBFA0B-5033-482D-872A-1E1F220B47FC.html",
							"GUID-E0FBFA0B-5033-482D-872A-1E1F220B47FC.html",
							"GUID-E0FBFA0B-5033-482D-872A-1E1F220B47FC.html",
							"GUID-D668683F-F251-4340-973F-733DE28B6748.html",
							"GUID-D668683F-F251-4340-973F-733DE28B6748.html",
							"GUID-D668683F-F251-4340-973F-733DE28B6748.html",
							"GUID-61C9D90F-B50A-4F86-9BCA-309C1B270B47.html",
							"GUID-61C9D90F-B50A-4F86-9BCA-309C1B270B47.html",
							"GUID-61C9D90F-B50A-4F86-9BCA-309C1B270B47.html",
							"GUID-01E5A5F8-EE79-473A-B2BE-3D0C334595E0.html",
							"GUID-01E5A5F8-EE79-473A-B2BE-3D0C334595E0.html",
							"GUID-01E5A5F8-EE79-473A-B2BE-3D0C334595E0.html",
							"GUID-00081355-4EF5-454C-AAE5-CB39AE740E58.html",
							"GUID-00081355-4EF5-454C-AAE5-CB39AE740E58.html",
							"GUID-00081355-4EF5-454C-AAE5-CB39AE740E58.html",
							"GUID-F98E0699-A260-429B-B529-04F1E624D373.html",
							"GUID-F98E0699-A260-429B-B529-04F1E624D373.html",
							"GUID-F98E0699-A260-429B-B529-04F1E624D373.html",
							"GUID-F6C388EF-B816-45F2-A117-4035EFDD2CA3.html",
							"GUID-F6C388EF-B816-45F2-A117-4035EFDD2CA3.html",
							"GUID-F6C388EF-B816-45F2-A117-4035EFDD2CA3.html",
							"GUID-19E7154B-4CB3-4D7D-89EC-90F88E15C95D.html",
							"GUID-19E7154B-4CB3-4D7D-89EC-90F88E15C95D.html",
							"GUID-19E7154B-4CB3-4D7D-89EC-90F88E15C95D.html",
							"GUID-A4CFA5D4-5AE3-4FDA-87FD-078D0322DA5A.html",
							"GUID-A4CFA5D4-5AE3-4FDA-87FD-078D0322DA5A.html",
							"GUID-A4CFA5D4-5AE3-4FDA-87FD-078D0322DA5A.html",
							"GUID-CF4AF3F9-25C8-49E6-A3D5-3557775805FB.html",
							"GUID-CF4AF3F9-25C8-49E6-A3D5-3557775805FB.html",
							"GUID-CF4AF3F9-25C8-49E6-A3D5-3557775805FB.html",
							"GUID-AD6277FE-6C93-4086-9B8B-148050582507.html",
							"GUID-AD6277FE-6C93-4086-9B8B-148050582507.html",
							"GUID-AD6277FE-6C93-4086-9B8B-148050582507.html",
							"GUID-C6389489-E662-4BF0-B217-88199976A2D0.html","GUID-053A723A-ABAF-468A-9F03-0619DED82B96.html",
							"GUID-053A723A-ABAF-468A-9F03-0619DED82B96.html",
							"GUID-053A723A-ABAF-468A-9F03-0619DED82B96.html",
							"GUID-5A965228-70EB-4A8B-BD87-57E9AC8C778B.html",
							"GUID-5A965228-70EB-4A8B-BD87-57E9AC8C778B.html",
							"GUID-5A965228-70EB-4A8B-BD87-57E9AC8C778B.html",
							"GUID-D56D193F-5089-4B60-A2D7-2934126973E2.html",
							"GUID-D56D193F-5089-4B60-A2D7-2934126973E2.html",
							"GUID-D56D193F-5089-4B60-A2D7-2934126973E2.html",
							"GUID-E5C1C104-7EA0-4151-A81F-582B6155CA72.html",
							"GUID-E5C1C104-7EA0-4151-A81F-582B6155CA72.html",
							"GUID-E5C1C104-7EA0-4151-A81F-582B6155CA72.html",
							"GUID-C2F73275-5658-4849-8A22-8529B9C3F8C3.html",
							"GUID-C2F73275-5658-4849-8A22-8529B9C3F8C3.html",
							"GUID-C2F73275-5658-4849-8A22-8529B9C3F8C3.html",
							"GUID-CD92A2DD-2220-42F1-81AE-0FD1E656FE01.html",
							"GUID-CD92A2DD-2220-42F1-81AE-0FD1E656FE01.html",
							"GUID-CD92A2DD-2220-42F1-81AE-0FD1E656FE01.html",
							"GUID-5CBF4D69-8BB9-4CB0-A22D-502F67A27D53.html",
							"GUID-5CBF4D69-8BB9-4CB0-A22D-502F67A27D53.html",
							"GUID-5CBF4D69-8BB9-4CB0-A22D-502F67A27D53.html",
							"GUID-5707DD1C-CAF0-4519-A1B9-C6015E2C2A2F.html",
							"GUID-5707DD1C-CAF0-4519-A1B9-C6015E2C2A2F.html",
							"GUID-5707DD1C-CAF0-4519-A1B9-C6015E2C2A2F.html",
							"GUID-0803D6D1-0532-47E7-93F9-611ADEC91B95.html",
							"GUID-0803D6D1-0532-47E7-93F9-611ADEC91B95.html",
							"GUID-0803D6D1-0532-47E7-93F9-611ADEC91B95.html",
							"GUID-E1131B84-73C2-4785-8D8C-2FF2C13AD739.html",
							"GUID-E1131B84-73C2-4785-8D8C-2FF2C13AD739.html",
							"GUID-E1131B84-73C2-4785-8D8C-2FF2C13AD739.html",
							"GUID-8346E889-029A-4705-9042-C6092E92E323.html",
							"GUID-8346E889-029A-4705-9042-C6092E92E323.html",
							"GUID-8346E889-029A-4705-9042-C6092E92E323.html",
							"GUID-B63489D2-C74B-4BFA-8973-87A71CE0F342.html",
							"GUID-B63489D2-C74B-4BFA-8973-87A71CE0F342.html",
							"GUID-B63489D2-C74B-4BFA-8973-87A71CE0F342.html",
							"GUID-73C18F98-84AF-45A6-9D26-AC67D4B3A76B.html",
							"GUID-73C18F98-84AF-45A6-9D26-AC67D4B3A76B.html",
							"GUID-73C18F98-84AF-45A6-9D26-AC67D4B3A76B.html",
							"GUID-51B1EB4E-1F3A-4AC2-BD26-3BCED4281AD9.html",
							"GUID-51B1EB4E-1F3A-4AC2-BD26-3BCED4281AD9.html",
							"GUID-51B1EB4E-1F3A-4AC2-BD26-3BCED4281AD9.html",
							"GUID-A92E1AB0-A302-49FC-AC63-E857D4D20BB5.html",
							"GUID-A92E1AB0-A302-49FC-AC63-E857D4D20BB5.html",
							"GUID-A92E1AB0-A302-49FC-AC63-E857D4D20BB5.html",
							"GUID-88E24E48-A417-43CC-8650-DD86A6F52A41.html",
							"GUID-88E24E48-A417-43CC-8650-DD86A6F52A41.html",
							"GUID-88E24E48-A417-43CC-8650-DD86A6F52A41.html"];

var SearchTitles = ["Overview",
"Introduction",
"Features",
"Software Stack Architecture",
"Network Topology",
"BitCloud Stack APIs",
"Programming Basics",
"API documentation structure",
"Task handlers",
"The main() function",
"FreeRTOS in Zigbee applications",
"Synchronous and Asynchronous APIs",
"Requests and confirmations",
"Zigbee Stack Layer Usage",
"BDB Component Usage",
"BDB initialization",
"BDB Commissioning",
"BDB Security",
"BDB Reset",
"BDB Generic",
"ConfigServer Component Usage",
"Get or Set a CS Parameter",
"Using parameters influencing network start",
"Choosing device type",
"Handling the network PANID",
"Stochastic and static addressing",
"Sleeping end device's time spans",
"Configuring fragmentation",
"Understanding table sizes",
"Security keys",
"HAL Component APIs",
"Application Timer",
"AES Engine",
"System Environment Components APIs",
"Task management",
"Event Management",
"ZCL Components Usage",
"Sending a General cluster command",
"Read or write a Remote Attribute",
"Parsing the response payload",
"Sending a Cluster-specific command",
"ZDO Component Usage",
"Network Start",
"Configuring network start",
"Handling Network notifications",
"Sending ZDP requests",
"Device Discovery requests",
"Service Discovery requests",
"Leaving the network",
"ZGP Component Usage",
"ZGP device functionalities",
"GP Infrastructure devices",
"Initialization",
"Commissioning",
"Generic ZGP infrastructure APIs",
"NVM_Table API's",
"References",
"Components APIs",
"BDB APIs",
"BDB Commissioning APIs",
"BDB_SetBdbNodeIsOnANetwork Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_ConfigureInstallCode Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_InvokeCommissioning Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_ResetVia_TouchlinkCluster Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetInstallCodeUsage Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetNodeJoinTimeout Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetTCLKExchangeMethod Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetTCLKRetryMaxAttempts Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetTCRequireKeyExchange Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetToulinkRole Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_ResetIB Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB Generic APIs",
"BDB_EventsSubscribe Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_GetChannelMask Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_Init Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_ResetToFactoryNew Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetAllowTLResetToFN Function",
"C",
"Description",
"Parameters",
"Returns",
"BDB_SetChannelMask Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO APIs",
"ZDO_BindIndication Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_GetChildrenAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_GetLqiRssi Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_GetNeibTable Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_GetNwkStatus Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_GetParentAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_MgmtNwkUpdateNotf Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_ResetNetworkReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_ResolveAddrReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_SetChannel Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_SetTxPowerReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_SleepReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_StartNetworkReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_StartSyncReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_StopSyncReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_UnbindIndication Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_WakeUpInd Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_WakeUpReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZDO_ZdpReq Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK APIs",
"NWK_AddGroup Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetDeviceType Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetExtByShortAddress Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetExtPanId Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetLogicalChannel Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetNeighborsLqi Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetPanId Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetParentShortAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GetShortAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_GroupCapacity Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_IsGroupMember Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_NextGroup Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_RemoveAllGroups Function",
"C",
"Description",
"Parameters",
"Returns",
"NWK_RemoveGroup Function",
"C",
"Description",
"Parameters",
"Returns",
"CS APIs",
"CS_GetMemory Function",
"C",
"Description",
"Parameters",
"Returns",
"CS_ReadParameter Function",
"C",
"Description",
"Parameters",
"Returns",
"CS_WriteParameter Function",
"C",
"Description",
"Parameters",
"Returns",
"System Environment APIs",
"SYS_Initialize Function",
"C",
"Description",
"Returns",
"SYS_ClearEvents Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_Crc16Ccitt Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_GetNormalizedRandomNumber Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_GetRandomNumber Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_GetRandomSequence Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_IsEventDeliverable Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_IsEventSubscriber Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_IsMutexLocked Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_MutexLock Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_MutexUnlock Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_PostEvent Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_PostTask Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_RunTask Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_SubscribeToEvent Function",
"C",
"Description",
"Parameters",
"Returns",
"SYS_UnsubscribeFromEvent Function",
"C",
"Description",
"Parameters",
"Returns",
"HAL APIs",
"HAL_GetSystemTime Function",
"C",
"Description",
"Parameters",
"Returns",
"HAL_StartAppTimer Function",
"C",
"Description",
"Parameters",
"Returns",
"HAL_StopAppTimer Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL APIs",
"OTAU APIs",
"ZCL_GetOtauClientCluster Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_GetOtauServerCluster Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_ImageNotifyReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_StartOtauService Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_StopOtauService Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_UnsolicitedUpgradeEndResp Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL Security APIs",
"ZCL_Get Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_ResetSecurity Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_Set Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_StartSecurityReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL Generic APIs",
"ZCL_AttributeReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_CommandReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_GetAttributeLength Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_GetNextElement Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_PutNextElement Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_ReadAttributeValue Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_RegisterEndpoint Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_ResetReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_UnregisterEndpoint Function",
"C",
"Description",
"Parameters",
"Returns",
"ZCL_WriteAttributeValue Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGP APIs",
"ZGP_GetChannel Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGP_ResetReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGP_SetChannel Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGP_UnsubscribeCommissioning Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_ProxyBasicInit Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_PutLocalSinkInCommissioningMode Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_ReadTableEntryFromNvm Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SinkBasicInit Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SendProxyCommissioningModeCommand Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SendReadAttribute Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SendProxyTableRequest Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SendSinkTableRequest Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_UpdateLocalSinkEntry Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SetSinkGroupEntry Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SetGPDAssignedAlias Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_GetSinkTableEntryByIndex Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_EnableDisableDirectMode Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_DeleteTableEntryFromNvm Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_TotalNonEmptyEntries Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_FlushTxQueue Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_AddOrUpdateTableEntryOnNvm Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_GetDeviceMode Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_GpdfDataRequest Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_Init Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_KeyDerivationHmac Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_NvmTableInit Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_ResetTableEntry Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPH_SendCmdInRawMode Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_SendDeviceAnnounceCmd Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_SendSimpleDescReq Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_SetDeviceMode Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_IsValidSrcId Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_IskeyValid Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_GetAliasSourceAddr Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_CheckForDuplicate Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_ResetTableToFN Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_AddSinkGroupEntry Function",
"C",
"Description",
"Paremeters",
"Returns",
"ZGPL_SinkEntryIsPairingInfoEmpty Function",
"C",
"Description",
"Parameters",
"Returns",
"ZGPL_FrameCounterReadorUpdateOnNvm Function",
"C",
"Description",
"Parameters",
"Returns",
"Components Data Structures",
"APS DataStructures",
"Endpoint_t typedef",
"C",
"Description",
"APS_AddGroupReq_t Struct",
"C",
"Description",
"APS_BindConf_t Struct",
"C",
"Description",
"APS_BindReq_t Struct",
"C",
"Description",
"APS_DataConf_t Struct",
"C",
"Description",
"APS_DataInd_t struct",
"C",
"Description",
"APS_DataReq_t struct",
"C",
"Description",
"APS_KeyHandle_t struct",
"C",
"Description",
"APS_RegisterEndpointReq_t Struct",
"C",
"Description",
"APS_RemoveAllGroupsReq_t Struct",
"C",
"Description",
"APS_RemoveGroupReq_t Struct",
"C",
"Description",
"APS_RequestKeyReq_t Struct",
"C",
"Description",
"APS_Status_t Enum",
"C",
"Description",
"APS_SwitchKeyReq_t Struct",
"C",
"Description",
"APS_TransportKeyReq_t struct",
"C",
"Description",
"APS_UnregisterEndpointReq_t struct",
"C",
"Description",
"ApsBindingEntry_t typedef",
"C",
"Description",
"ExtAddr_t typedef",
"C",
"Description",
"SimpleDescriptor_t Struct",
"C",
"Description",
"DeviceType_t enum",
"C",
"Description",
"BDB DataStructures",
"BDB_InvokeCommissioningReq t",
"C",
"Description",
"BDB_InvokeCommissioningConf_t Struct",
"C",
"Description",
"BDB_CommissioningStatus_t Enum",
"C",
"Description",
"BDB_ChannelMaskType_t enum",
"C",
"Description",
"BDB_CommissioningMode_t typedef",
"C",
"Description",
"BDB_NodeCommissioningCapability_t Struct",
"C",
"Description",
"BDB_ResetTargetCallback_t typedef",
"C",
"Description",
"ResetTargetStatus_t enum",
"C",
"Description",
"BdbEventSubscriber_t Struct",
"C",
"Description",
"ZDO DataStructures",
"NodeAddr_t struct",
"C",
"Description",
"ZDO_BindInd_t typedef",
"C",
"Description",
"ZDO_GetChildrenAddr_t struct",
"C",
"Description",
"ZDO_GetLqiRssi_t struct",
"C",
"Description",
"ZDO_MatchDescReq_t Struct",
"C",
"Description",
"ZDO_MatchDescResp_t Struct",
"C",
"Description",
"ZDO_IeeeAddrReq_t Struct",
"C",
"Description",
"ZDO_IeeeAddrResp_t Struct",
"C",
"Description",
"ZDO_MgmtNwkUpdateNotf_t struct",
"C",
"Description",
"ZDO_Neib_t struct",
"C",
"Description",
"ZDO_NwkStatus_t enum",
"C",
"Description",
"ZDO_ResetNetworkReq_t Struct",
"C",
"Description",
"ZDO_ResolveAddrReq_t struct",
"C",
"Description",
"ZDO_SetTxPowerReq_t struct",
"C",
"Description",
"ZDO_SleepReq_t struct",
"C",
"Description",
"ZDO_StartNetworkReq_t Struct",
"C",
"Description",
"ZDO_StartNetworkConf_t Struct",
"C",
"Description",
"ZDO_Status_t enum",
"C",
"Description",
"ZDO_UnbindInd_t typedef",
"C",
"Description",
"ZDO_WakeUpReq_t struct",
"C",
"Description",
"ZDO_ZdpReq_t struct",
"C",
"Description",
"NWK DataStructures",
"Channel_t Typedef",
"C",
"Description",
"ExtPanId_t; Typedef",
"C",
"Description",
"Lqi_t Typedef",
"C",
"Description",
"NWK_GroupAddr_t Typedef",
"C",
"Description",
"NWK_GroupData_t Typedef",
"C",
"Description",
"NWK_GroupTableEntry t",
"C",
"Description",
"NWK_GroupTableSize_t Typedef",
"C",
"Description",
"NWK_JoinControl_t Struct",
"C",
"Description",
"PanId_t Typedef",
"C",
"Description",
"System Environment DataStructures",
"SYS_EventData_t typedef",
"C",
"Description",
"SYS_EventId_t Typedef",
"C",
"Description",
"SYS_EventReceiver_t struct",
"C",
"Description",
"SYS_Mutex_t Typedef",
"C",
"Description",
"SYS_MutexOwner_t struct",
"C",
"Description",
"SYS_TaskId_t Enum",
"C",
"Description",
"ZGB_InitStatus_t Enum",
"C",
"Description",
"BcTime_t typedef",
"C",
"Description",
"CS DataStructures",
"CS_MemoryItemId_t Enum",
"C",
"Description",
"HAL DataStructures",
"HAL_AppTimer_t typedef",
"C",
"Description",
"ZCL DataStructures",
"ZCL_Addressing_t struct",
"C",
"Description",
"ZCL_Cluster_t struct",
"C",
"Description",
"ZCL_DeviceEndpoint_t struct",
"C",
"Description",
"ZCL_Get_t struct",
"C",
"Description",
"ZCL_NextElement_t struct",
"C",
"Description",
"ZCL_Notify_t struct",
"C",
"Description",
"ZCL_OtauImageNotify_t struct",
"C",
"Description",
"ZCL_OtauInitParams_t struct",
"C",
"Description",
"ZCL_OtauUpgradeEndResp_t struct",
"C",
"Description",
"ZCL_ReadAttributeReq_t struct",
"C",
"Description",
"ZCL_Request_t struct",
"C",
"Description",
"ZCL_SecurityStatus_t Enum",
"C",
"Description",
"ZCL_Set_t struct",
"C",
"Description",
"ZCL_StartSecurityConf_t struct",
"C",
"Description",
"ZCL_StartSecurityReq_t struct",
"C",
"Description",
"ZCL_Status_t Enum",
"C",
"Description",
"ZCL_OtauStatInd_t typedef",
"C",
"Description",
"ZCL_WriteAttributeReq t",
"C",
"Description",
"ZCL_ReadAttributeResp_t struct",
"C",
"Description",
"ZCL_WriteAttributeResp_t Struct",
"C",
"Description",
"ZGP DataStructures",
"ZGP_DataReq_t struct",
"C",
"Description",
"ZGP_FrameType_t enum",
"C",
"Description",
"ZGP_GpdfDataReq_t struct",
"C",
"Description",
"ZGP_PairingConfigCmdInfo_t struct",
"C",
"Description",
"ZGP_ResetReq_t",
"C",
"Description",
"ZGP_SinkGroup_t struct",
"C",
"Description",
"ZGP_SinkTableEntry_t struct",
"C",
"Description",
"ZGP_CommissionConf_t struct",
"C",
"Description",
"ZGP_TableOperationField_t struct",
"C",
"Description",
"ZGP_InfraDeviceStatus_t Enum",
"C",
"Description",
"ZGP_EntryType_t Enum",
"C",
"Description",
"ZGP_TableUpdateAction_t struct",
"C",
"Description",
"ZGP_Status_t enum",
"C",
"Description",
"ZGP_ReadOperationStatus_t struct",
"C",
"Description",
"zgpGpProxyCommModeOptions_t struct",
"C",
"Description",
"ZGP_SinkTableActions_t struct",
"C",
"Description"];

var SearchInfo = [" Overview ",
							" Introduction Microchip Zigbee Stack widely known as BitCloud is a full-featured next generation embedded software stack The stack provides a software development platform for reliable and scalable wireless applications running on microchip microcontrollers and radio transceivers It is designed to support a broad ecosystem of user-designed applications addressing diverse requirements and enabling a full spectrum of software customization BitCloud is fully compliant with Zigbee PRO and Zigbee standards for wireless sensing and control It provides an augmented set of APIs which while maintaining 100% compliance with the standard offer extended functionality designed with developer's convenience and ease-of-use in mind BitCloud's target audience is system designers embedded programmers and hardware engineers evaluating prototyping and deploying wireless solutions and products built on on the Microchip hardware platform The stack is available as part of the MPLAB H3 framwork with following inclusions Documentation Zigbee stack libraray comprising multiple components of the stack System resources/middleware as source code to develop Zigbee 3 0 application device types A limited set of peripheral drivers for PIC32CXBZ apart from peripheral driver libraries provided by MPLAB H3 framework ",
							" Features BitCloud internal architecture follows IEEE 802 15 4 Standard Zigbee-defined separation of the networking stack into logical layers Besides the core stack containing protocol implementation the stack contains additional layers implementing shared services (e g task manager security and power manager) and hardware abstractions (e g hardware abstraction layer HAL ) The APIs contributed by these layers are outside the scope of core stack functionality However these essential additions to the set of APIs significantly help reduce application complexity and simplify integration The topmost of the core stack layers BDB provides the highest level of initilization commissioning and operating related APIs visible to the application Also some generic APIs to access and configure parameters which are part of BDB information base ZDO provides a set of fully compliant Zigbee Device Object APIs which enable main network management functionality (start reset formation join) which are in turn used by BDB layer ZDO also defines Zigbee Device Profile types device and service discovery binding commands implemented by the stack and provides APIs for unicast multicast and broadcast data transmission and acknowledgment Also ZDO provides notifications/indications to the application on occurence of various network events ZCL provides set of APIs to send and receive various cluster specific/generic commands (e g ON OFF Read attribute Write attribute etc ) to operate on attributes of the clusters on various Zigbee 3 0 application devices There are few system resources including: task manager configuration server and hardware abstraction which are utilized by stack layers Task manager is the propreitary scheduler implemented within Bitcloud stack which mediates the use of the MCU among internal stack layers The task manager utilizes a proprietary priority queue-based algorithm specifically tuned for multi-layer stack environment and demands of time-critical network protocols Bitcloud itself is operated as a RTOS task along with application as another task in a system More details on using Bitcloud with FreeRTOS can be found in below sections Hardware Abstraction Layer includes a set of APIs for using software timer which is based on microcontrollers' hardware timer resource Also APIs for using underlying hardware AES engine for encryption and decryption Bitcloud security module uses these AES APIs for Network and APS level security Configuration server is a component of the stack that stores key stack configuration parameters and allows users to change them without recompiling the core stack layers Users can configure the stack and specify key parameters (e g channel table sizes Network depth no of children sleep period etc ) all without managing multiple versions of the stack libraries ",
							" Software Stack Architecture ",
							" Network Topology BitCloud supports Zigbee mesh topology Usually in a mesh network the coordinator is responsible for starting the network and for choosing certain key network parameters but the network may be extended through the use of routers The coordinator holds the trust center functionality to control the devices in a secured manner in a centralized network On contrast in a distributed network any router can start the network without coordinator's presence ",
							" BitCloud Stack APIs The stack API functions contained within this package fall into the categories related to the following layers: BDB (Base Device Behavior) Configuration server functions HAL (functions dealing with the hardware functionality of the microcontroller) System Environment ZCL (Zigbee Cluster Library) ZDO (Zigbee device object) ZGP (Zigbee green power) NWK (Network) ",
							" Programming Basics This API Reference manual is intended to provide detailed information about all public APIs generally describe the stack components and how to perform typical tasks providing multiple sample code examples This document is mostly the source of reference information and basic code examples ",
							" API documentation structure  Each main stack component has the corresponding chapter which may be accessed from the root of the left navigation tree Such page focuses on some typical tasks that may be done with the help of the component's API  A separate chapter describes sample applications provided with the SDK  Each component usage chapter comprises lists of functions structures etc  ",
							" Task handlers The user's applications and the Zigbee stack operate as two tasks in a RTOS environment Allocation of the execution time is controlled by the Free RTOS scheduler based on the priorities given for Zigbee stack and application tasks The \"zigbee_task\" is the stack task There is an internal mechanism implemented by the stack to schedule the layer specific tasks among stack layers The task scheduler manages the order in which tasks raised by different stack components are executed The order is based on the priority of layers Tasks posted by a certain layer are processed with a call to the corresponding task handler which is a function specific for each layer The application task handler is defined as _APP_Tasks() and should be implemented by the application When _APP_Tasks() is executed various requests to the stack and indications from the stack events from uart etc are handled ",
							" The main() function The starting point of a User application is the main() function The main() function body is defined by the user's application to make the application development more flexible The main() function must contain two mandatory elements: a call to the SYS_Initialize ( NULL ) function and the infinite loop with SYS_Tasks ( ) inside which allows the task scheduler (eg: freeRTOS) to call the next appropriate task handler A typical main() function implementation is shown below: int main ( void ) { /* Initialize all modules */ SYS_Initialize ( NULL ); while ( true ) { /* Maintain state machines of all polled MPLAB Harmony modules */ SYS_Tasks ( ); } /* Execution should not come here during normal operation */ return ( EXIT_FAILURE ); } ",
							" FreeRTOS in Zigbee applications Refer FreeRTOS https://www freertos org/ for more details w r t Queues Semaphores APIs and usage RTOS Tasks There are two tasks created in the RTOS Application task (APP_Tasks) and Zigbee task(ZGB) during system initialization The Zigbee task is to gain the CPU time to execute stack related activities whereas APP_Tasks is for application related tasks Zigbee task is given higher priority over the application The interaction between these two tasks happens via IPC (e g Queue semaphore) mechanism Every request/indications from the application and stack to each other are posted in two different queues Zigbee task is also designed to wait on the Semaphores which are posted on certain internal stack events and RF reception etc These tasks are designed to wait and service as shown in the picture below Zigbee Task with RTOS Zigbee task is meant to service two categories of requests The requests coming from stack and the request coming from the application A stack request for an instance can be considered as an interrupt on receiving a new RF packet App request can be an API call to initiate BDB commissioning or to get short address of the device When stack receives a packet an interrupt occurs and a semaphore is posted API call from application is posted through appQueue to Zigbee task When Zigbee task is scheduled for execution it is designed in such a way to service the semaphore from stack events first and then the requests from application Refer the below flow diagram for Zigbee task ",
							" Synchronous and Asynchronous APIs A few API calls which do not consume much execution time are synchronous such as those that involve reading from and writing to internal stack structures For example NWK_GetShortAddr() API returns the short address maintained by network layer synchronously But tasks implying sending requests to other nodes in the network are always executed asynchronously as they result in considerably longer waiting for response In order not to block the execution flow (which is single-threaded on an MCU) such requests provide pointers to callbacks which are called at the end of request execution by the underlying layer to which the request is issued For example BDB_InvokeCommissioningReq(mode) API can be invoked from application layer and the corresponding callback is called once the commissioning procedure is complete between this API invocation and callback application layer is free to execute any other task ",
							" Requests and confirmations  A function that performs an asynchronous request to a stack component commonly has a name ended with Req The function argument in this case is a pointer to a structure which name is obtained from the function's name by adding _t a mark denoting a type This structure is regarded to in documentation as request parameters The main field it includes is a pointer to a callback function which is called to confirm request execution In addition to the callback function request parameters include confirmation parameters structure as a field The latter structure's name is obtained by replacing Req in its name to Conf For example network start request is issued by the ZDO_StartNetworkReq ( ZDO_StartNetworkReq_t *req) function where ZDO_StartNetworkReq_t has the confirm field of the ZDO_StartNetworkConf_t type  An instance of request parameters must be declared as a global variable because the confirmation callback's argument points exactly to the confirmation parameters' field inside the request parameters This requires that the instance of request parameres exists after the invoking function loses control Moreover the user should ensure that the instance will not be reused while current request is being executed  The status field of the confirmation parameters indicates whether the request is executed successfully and reports the failure reason if it is not a success The status is given by the value of the enumeration type defined for each stack component (for example APS_Status_t ) However the value of the status field may not fall in the range defined by the enumeration because a failure during request execution may occur not only on the layer to which the request is sent directly but on the lower layers also  ",
							" Zigbee Stack Layer Usage ",
							" BDB Component Usage Using the BDB component The base device behaviour (BDB) provides an interface for initialization commissioning and operating procedures of a base device operating on the Zigbee-PRO stack to ensure profile interoperability References BDB APIs BDB commisioning status codes BDB commisioning modes ",
							" BDB initialization BDB initialization procedure define the behavior of a device on initialization/Reset As a first step it restores all its persistent data and further the steps can differ based on the logical device type and whether the node is already part of a network For an end device if already part of a network it attempts rejoining with its parent In case of router if already not part of a network it sets the logical channel to one of the channels enabled in APP_PRIMARY_CHANNELS_MASK Other than the above two cases the devices will proceed with commissioning directly Initialization of the BDB layer is required from the application before accessing any API from the BDB layer Application can invoke BDB initialization using the below public API void BDB_Init (void); ",
							" BDB Commissioning Commissioning is executed based on the option specified in mode (parameter) The different commissioning modes are touchlink commissioning network steering network formation and finding binding Only one of these modes shall be set while calling this API and that particular commisioning procedure will be started Commissioning is invoked by application using the below Public API bool BDB_InvokeCommissioning ( BDB_InvokeCommissioningReq_t *req); Parameters:  BDB_InvokeCommissioningReq_t is request structure has the following elements to be filled mode - selected commissioning procedure to execute initiatorReq - Parameters used in f b and touchlink Ignore if touchlink or finding and binding is not set in mode  confirm - Parameters of the confirm being returned in BDB_InvokeCommissioningConf() BDB_InvokeCommissioningConf - Commissioning completion callback with commissioning status Touchlink Commissioning is invoked by application using the Public API BDB_InvokeCommissioning() The following example illustrates the touchlink process: // parameters for commissioning request BDB_InvokeCommissioningReq_t AppbdbCommissioningreq; //BDB invoke commissioning callback static void touchlinkCallback( BDB_InvokeCommissioningConf_t *conf) { } // Fill the commissioning request with mode endpoint clutser details and a // callback to be called after commissioning //#define BDB_COMMISSIONING_TOUCHLINK 0 //#define BDB_COMMISSIONING_NWK_STEERING 1 //#define BDB_COMMISSIONING_NWK_FORMATION 2 //#define BDB_COMMISSIONING_FINDING_BINDING 3 AppbdbCommissioningreq mode = BDB_COMMISSIONING_TOUCHLINK; // select one of the above list AppbdbCommissioningreq initiatorReq- initiatorEndpoint = srcEndpoint; AppbdbCommissioningreq initiatorReq- clientClustersCount = remoteServersCnt; AppbdbCommissioningreq initiatorReq- serverClustersCount = remoteClientsCnt; AppbdbCommissioningreq initiatorReq- clientClustersList= deviceServers; AppbdbCommissioningreq initiatorReq- serverClustersList= deviceClients; AppbdbCommissioningreq BDB_InvokeCommissioningConf = commissioningDoneCallback; // Start commissioning procedure BDB_InvokeCommissioning ( AppbdbCommissioningreq); 1 Touchlink commissioning In this procedure the node that initiates the touchlink operation is called the initiator and the node that responds is called the target The initiator scans for nodes also supporting touchlink and if one is found establishes a new network with the target (if the initiator is not on a network) or adds the target to the network (if the initiator is already on a network) 2 Network Steering There are two procedures in Network Steering i Network Steering when node is on a network A node that is already on a network opens up the network for a finite duration to allow other nodes to join ii Network Steering when node is not on a network A node that is not already on a network scans for open networks and if a suitable one is found attempts to join After joining the node is authenticated and receives the network key Finally if a Trust Center is present in the network the node then exchanges its preconfigured link key for one generated by the Trust Center 3 Network Formation Zigbee coordinator node forms a centralized security network and activates its Trust Center functionality whereas a Zigbee router node forms a distributed security network 4 Finding and Binding There are two procedures in Finding and binding Finding and binding for a initiator endpoint: In this procedure the initiator endpoint first searches for identifying target endpoints and if one is found its simple descriptor is requested The initiator endpoint then searches for any matching clusters between itself and the target endpoint and for each match found it creates a corresponding entry in its binding table If a group binding is requested the initiator endpoint configures group membership of the target endpoint Finding and binding for a target endpoint: In this procedure the target endpoint identifies itself for a finite duration and then handles subsequent finding binding requests from an initiator endpoint ",
							" BDB Security InstallCode In Centralized network there are two types of key that can be used to allow the devices to join i Global trust center link key This is the link key used for joining centralized security networks Which is 0x5a 0x69 0x67 0x42 0x65 0x65 0x41 0x6c 0x6c 0x69 0x61 0x6e 0x63 0x65 0x30 0x39 ii Install code link key This is the link key derived from install code from joining device to create unique trust center link key for joining The install code derived preconfigured link key is generated from a random install code created for the product and provided to the node in a manufacturer-specific way and referred to during installation Application interface API to be used to configure install code: void BDB_ConfigureInstallCode (ExtAddr_t deviceAddress uint8_t *installCode IcStatusCallback_t pfCallback); Following example illustrates the usage of configuring install code // define the callback to be called after configuring install code void myICCallback(InstallCode_Configuration_Status_t status) { } ExtAddr_t devAddr = 0xFFFFFFFFFFFFFFFF; //Update the install code from user input uint8_t icode[18]; BDB_ConfigureInstallCode (devAddr icode myICCallback); Parameters: deviceAddress -device address shall be 0xfffffffffffffff on Joining device Extended Address of the joining device on Trust center installCode - 18-byte install code (including 16 byte install code + 2 byte CRC) pfCallback - Callback to be called once the operation is complete ",
							" BDB Reset Reset of BDB can be done by the following ways Reset via touchlink commissioning cluster Reset via local action 1 Reset via touchlink commissioning cluster To reset a target to its factory new state using the touchlink commissioning cluster an initiator SHALL follow the steps of the touchlink procedure till identify request with an extended channel scan then will send reset to factory new defaults command to target On receipt of the touchlink commissioning cluster reset to factory new request inter- PAN command frame with a valid transaction identifier i e immediately following a touchlink device discovery the target SHALL perform a leave request on the network void BDB_ResetVia_TouchlinkCluster ( ResetTargetCallback_t pfcallback); Following example illustrates the usage of reset via touchlink commissioning cluster static void ResetTargetCallback( ResetTargetStatus_t status) { } BDB_ResetVia_TouchlinkCluster (ResetTargetCallback); Parameters: pfcallback - callback handler with the status code 2 Reset via local action To reset and leave its current network the node SHALL perform a leave request on the network After getting leave confirm the node SHALL then clear all Zigbee persistent data except the outgoing network frame counter void BDB_ResetToFactoryNew (bool leaveNetwork); Parameters: leaveNetwork - true or false ",
							" BDB Generic Generic functions This set of functions are generic functions which will set or get the bdb device properties 1 Setting the channel mask for either bdbPrimaryChannelSet or bdbSecondaryChannelSet attribute can be done by using the following public API void BDB_SetChannelMask ( BDB_ChannelMaskType_t type uint32_t channelMask); Parameters: type - type of channel mask primary/secondary channelMask - value of channel mask 2 Following public API is used to get the either bdbPrimaryChannelSet or bdbSecondaryChannelSet attribute uint32_t BDB_GetChannelMask ( BDB_ChannelMaskType_t type); Parameters: type - type of channel mask primary/secondary Returns: The value of the channel mask based on the type passed 3 Setting the TCLK for BDB attribute can be done by using the following public API This API is applicable for the router and enddevice The bdbTCLinkKeyExchangeMethod attribute specifies the method used to establish a new link key after joining the network and can be set to one of the non-reserved values void BDB_SetTCLKExchangeMethod (uint8_t exchangeMethod); Parameters: exchangeMethod - type of the TCLK exchange method TC_LINKKEY_EXCHANGE_METHOD_APS_REQ_KEY(0x00) or TC_LINKKEY_EXCHANGE_METHOD_CBKE(0x01-unsupported) 4 Setting the number of key establishment attempts that can be made to establish a new link key after joining can be done by using the following public API void BDB_SetTCLKRetryMaxAttempts (uint8_t attempts); Parameters: Attempts - number of max retry attempts 5 Following public API is used to get the bdbNodeCommissioningCapability attribute which defines the capabilities supported by the device like network formation finding and binding touchlink commission etc BDB_NodeCommissioningCapability_t BDB_GetCommissioningCapability(void); Parameters: None 6 Following public API is used to set bdbJoinUsesInstallCodeKey attribute to configure whether it has to block/allow the devices which is matching with the default installation code with the trust center void BDB_SetInstallCodeUsage (bool useInstallCode); Parameters: useInstallCode - true or false 7 Following public API is used to set the bdbTrustCenterNodeJoinTimeout in seconds for the Trust Center to remove the Trust Center link key of the newly joined node that did not successfully establish a new link key void BDB_SetNodeJoinTimeout (uint8_t timeOutInSec); Parameters: timeOutInSec - timeout in seconds 8 Following API is used to set the BDB IB attribute bdbTrustCenterRequireKeyExchange which specifies whether the Trust Center requires a joining device to exchange its initial link key with a new link key generated by the Trust Center void BDB_SetTCRequireKeyExchange (bool requireKeyExchange); Parameters: requireKeyExchange - true or false 9 Following API is used to set whether BDB should support touch link role or not void BDB_SetToulinkRole (bool initiator); Parameters: initiator - true or target - false 10 Following API is used to get the bdbNodeIsOnANetwork attribute to know whether it is in a network or not It will return true if it is there in network false otherwise bool BDB_GetBdbNodeIsOnANetwork (void); Parameters: None 11 Following API is used to set the bdbNodeIsOnANetwork attribute based on whether it is in a network or not void BDB_SetBdbNodeIsOnANetwork (bool onNetwork); Parameters: onNetwork - true for on network false otherwise 12 Following API sets the flag for touch link to do reset to factory new if allow is true void BDB_SetAllowTLResetToFN (bool allow); Parameters: allow - true or false 13 Reset of the BDB component Information base/attributes to default values if the device is not in a network by using the following public API void BDB_ResetIB (void); Parameters: None 14 Following API is used to subscribe for the events from BDB module and their callback handlers from the application void BDB_EventsSubscribe (const BdbEventSubscriber_t *subscriber); Parameters: BdbEventSubscriber_t - It is a structure of function handlers for the events subscribed For example the event subscriber structure shall be filled as below and passed to the BDB_EventsSubscribe API BdbEventSubscriber_t s_BDB_EventsCallback = { connected = Connected disconnected = Disconnected identifyStartIndication = IdentifyStartIndication identifyStopIndication = IdentifyStopIndication updateNetworkIndication = UpdateNetworkIndication queryingCompleted = QeryingCompleted joinNetworkIndication = JoinNetworkIndication SteeringNetwork = NULL tclkProcedureOngoing = NULL tclkProcedureCompleted = NULL addingBindingLinks = NULL scanIndication = NULL touchlinkCompleted = TouchlinkCompleted networkFormationCompleted = NetworkFormationCompleted SteeringCompleted = NetworkSteeringCompleted findingBindingCompleted = FindingBindingCompleted ResetToFactoryDefaults = ResetToFactoryDefaults querying = Querying scanning = Scanning identifying = Identifying joining = Joining findingBindingInitiatorModeCompleted = FindingBindingInitiatorModeCompleted }; // Subscribing to different bdb events with specified callbacks BDB_EventsSubscribe( s_BDB_EventsCallback); ",
							" ConfigServer Component Usage BitCloud provides an extensive set of configuration parameters which determine different aspects of network and node behavior These parameters are accessible for an application via the Configuration Server interface (ConfigServer or CS for short) CS parameters can be divided in a set of categories according to different criteria For example one can distinguish persistent and non persistent parameters Persistent parameters are stored in flash memory and their values stay unchanged after the node HW reset Non persistent parameters are stored in RAM memory and upon HW reset are reinitialized with their default values as per csDefaults h Other criteria mark out parameters that can be set only at compilation time such as the parameters that are used to calculate an amount of memory to be allocated by the application and the parameters that can be changed only when the device is out of network since they determine certain network related aspects of node behavior Note that if a parameter is persistent this automatically means that it can be modified at run time because there is no need to store in flash parameters that can not be changed between two HW resets The sections below describe typical cases of CS parameters usage accompanied with explanations on how they affects the application's or node's behavior References CS functions CS parameters defaults Contents How to get or set a CS parameter Using parameters influencing network start Sleeping end device's time spans Configuring fragmentation Understanding table sizes Security keys ",
							" Get or Set a CS Parameter  There are two options to assign a value to the CS parameter One is to specify the value at compilation time by adding a line or changing an existing one in the config file A line shall be an ordinary #define preprocessor directive for example to set the maximum number of childs that the node provided it is a router or the coordinator can accept to 5 put the following line in config :  #define CS_MAX_CHILDREN_AMOUNT 5  Fortunately most of the parameters have default values that fit typical application configuration well at least for the first time The default values are given in csDefaults h which is a part of the stack This file must not be changed If the application needs to modify a default value it shall perform this in the application config file  To change values of the parameters that can be configured at run time use the CS_ReadParameter() function For both compile-time and run-time configured parameters the application can read their value via the CS_WriteParameter() function To find out the detailed description proceed to the documentation of these function  ",
							" Using parameters influencing network start Certain CS parameters are used to achieve an appropriate form of network start This helps choose a proper network by predefining the network PANID or set either static or stochastic addressing scheme etc ",
							" Choosing device type In addition to the CS_DEVICE_TYPE parameter which specifies the type of a device according to Zigbee specification another parameter called CS_RX_ON_WHEN_IDLE should be taken into consideration to determine the device type CS_RX_ON_WHEN_IDLE indicates whether the radio is turned on permanently Therefore on routers and the coordinator its value must always be true If parameter's value is false which must happen on end devices only the radio is turned on to transmit data only and to wait for response from a parent for a certain short period of time Besides being set to false the parameter enables polling mechanism allowing sleeping end devices to receive deferred messages stored by its parent while the end device slept For that reason on sleeping end devices CS_RX_ON_WHEN_IDLE shall be set to false  For example suppose that the device type is to be specified at run-time then a typical way to configure a sleeping end device is as follows: //Prepare variablesDeviceType_t deviceType = DEVICE_TYPE_END_DEVICE; bool rxOnWhenIdle = false; //Set parameters CS_WriteParameter (CS_DEVICE_TYPE_ID deviceType); CS_WriteParameter (CS_RX_ON_WHEN_IDLE_ID rxOnWhenIdle); ",
							" Handling the network PANID There are two identifier for the network: extended PANID and short (also called network) PANID The first taking 64-bit values is the main idetifier while a 16-bit value for the second in most cases is generated randomly and is used in frame headers instead of the extended PANID to reduce overhead The extended PANID is predefined with the CS_EXT_PANID parameter causing the coordinator to form a network with the PANID equal to this parameter and other nodes to join the network with the PANID equal to this parameter If a router or an end device specifies 0x0 for CS_EXT_PANID then it will join the first suitable network The short PANID can also be predefined on the coordinator for example when it has to be reset and restore connection to the same network after is powers on In this case CS_NWK_PREDEFINED_PANID shall be set to 1 The parameters can be configured either in compile or run time The following example shows the latter case: //Prepare variables bool predefPANID = true; uint16_t nwkPANID = CPU_TO_LE16(0x1111); //Set to 16-bit value converted to little endian format CS_WriteParameter (CS_NWK_PREDEFINED_PANID_ID predefPANID); //Indicate that the PANID is predefined CS_WriteParameter (CS_NWK_PANID_ID nwkPANID); //Set the PANID value ",
							" Stochastic and static addressing The user can choose between stochastic and static addressing schemes to address nodes in the network by setting the CS_NWK_UNIQUE_ADDR parameter to 0 or 1 respectively Addressing scheme determines the method used for assigning a short (network) address for the device in the following way: in stochastic scheme a short address is chosen by the stack automatically during network start different from all existing addresses in the network while in static addressing the value provided by the CS_NWK_ADDR parameter is used In the latter case it is up to the user to ensure that all addresses assigned to nodes in the network are unique ",
							" Sleeping end device's time spans For correct communications between routers and sleeping end devices special attention should be given to a set of CS parameters The CS_END_DEVICE_SLEEP_PERIOD parameter serves exactly as it is named that is on an end device it specifies the length of a time span for which the end device falls asleep when the sleep is requested An end device's parent also uses CS_END_DEVICE_SLEEP_PERIOD to determine whether it should keep or drop a message addressed to the end device and to decide that the end device is lost if it does not send a poll request for a sufficiently long time Upon receiving the frame for an end device child its parent saves the message if the CS_MAC_TRANSACTION_TIME is greater than the estimated time remaining till the next poll request is received from the child The time of receiving the next poll request is estimated by adding CS_END_DEVICE_SLEEP_PERIOD to the moment of receiving the last poll request An end device sends poll requests with a period specified in the CS_INDIRECT_POLL_RATE parameter which is also used to calculate the default value for CS_MAC_TRANSACTION_TIME See CS parameters defaults for details Note that all time periods are measured in milliseconds ",
							" Configuring fragmentation  The fragmentation feature allows to send larger amounts of data than it fits into a single frame delegating all implementation details to the stack components However the maximum length of data that can be sent with one APS request is limited by the choice of certain CS parameters which are described in the list below:    CS_APS_MAX_BLOCKS_AMOUNT  Specifies the maximum amount of blocks to which request payload can be split      CS_APS_BLOCK_SIZE  Specifies the size of a block If the value is 0 then the maximum possible size is used      CS_APS_MAX_TRANSMISSION_WINDOW_SIZE  The number of frames sent by the stack at once before waiting for acknowledgment Once the delivery of these frames is acknowledged the next portion of frames is sent    ",
							" Understanding table sizes  The stack keeps a set of buffer tables for various purposes Configuration Server provides a parameter for the size of each table Since the table are initialized statically these parameters are used to determine an amount of memory that has to be allocated during the compilation and therefore they are not configurable at run time The tables of particular interest for the application include   CS_NEIB_TABLE_SIZE Stores information about directly accessible devices from the same network    CS_ROUTE_TABLE_SIZE Stores next-hop addresses for routes towards certain remote nodes if such routes have already been established by route discovery If the stack fails to find a route in this table it launches route discovery procedure employing the route discovery table    CS_ROUTE_DISCOVERY_TABLE_SIZE Is used by route discovery procedures if the route towards a remote node which should be reached by a data frame has not yet found If the route discovery will be performed frequently for example if the routing table size is small consider whether the size of the route discovery table is enough    CS_APS_BINDING_TABLE_SIZE Stores entries for binding links with remote nodes Each entry contains source extended address and endpoint and destination extended address and endpoint    CS_ADDRESS_MAP_TABLE_SIZE Contains pairs of corresponding short and extended addresses found out during network operation or by device discovery requests    CS_GROUP_TABLE_SIZE Stores pairs of a group address and an endpoint Each group address identifies a group to which the node is subscribed an endpoint being the destination for data frames addressed to the groups   The application developers should consider properly the sizes for the buffers for it can help reduce the amount of Flash memory consumed by the application  ",
							" Security keys Security keys BitCloud makes use of three types of security keys: network key link key and master key A network key is used for all security modes Link keys are used in standard link security Master keys are only valid for high security mode which is not supported by publicly available microchip Zigbee packages All network keys take 16-byte values A typical way to set up a value in code in to use an array of uint8_t : uint8_t[] securityKey = {0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa}; When the CS_NETWORK_KEY parameter is specified in config the same array notation should be used to point out a value for example: #define CS_NETWORK_KEY {0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa 0xaa} ",
							" HAL Component APIs ",
							" Application Timer Application timers can be used to schedule periodic tasks or execute specific actions after a certain delay A timer created with HAL API may hit only once or fire repeatedly with a given interval To start a timer call the HAL_StartAppTimer ( HAL_AppTimer_t * params) function where params represents function's parameters In the parameters specify the timer interval timer mode ( TIMER_REPEAT_MODE or TIMER_ONE_SHOT_MODE ) and the callback function which will be called each time the timer fires To stop the timer call the HAL_StopAppTimer ( HAL_AppTimer_t * params) with the pointer to the same instance of the :: HAL_AppTimer_t type that was used to configure the timer This will stop a periodic timer and prevent execution of a one-shot timer if it still has not fired Consider the following example: //Callback definition void timerFired() { //Do whatever you need } //Define the parameters instance in the outer scope HAL_AppTimer_t timer; timer interval = 5000; //Timer interval in milliseconds timer mode = TIMER_REPEAT_MODE; timer callback = timerFired; HAL_StartAppTimer ( timer); When a timer fires the MCU passes control to the callback function registered for the timer and then continues execution from the place it stopped when the timer fired ",
							" AES Engine  AES engine can be used to encrypt/decrypt stream of bytes With APIs provided by HAL it is possible to perform CBC/ECB - encryption/decryption the APIs HAL_AES_EncryptReq() and inputs are explained below with example    void HAL_AES_EncryptReq(HAL_AES_EncryptReq_t *reqParams_s)   The following actions in the enum can be performed with the above API  /** Defines HAL AES commands such as setkey cbc encrypt cbc decrypt etc */ typedef enum { SM_SET_KEY_COMMAND = 0 SM_ECB_ENCRYPT_COMMAND SM_CBC_ENCRYPT_COMMAND SM_ECB_DECRYPT_COMMAND SM_CBC_DECRYPT_COMMAND } HAL_AesCmd_t;  1 To set the key in the AES engine before performing encryption/decryption  /* Declare a memory for Encrypt request*/ HAL_AES_EncryptReq_t appSetKeyReq; /* define a callback after key is set*/ void setAesKeyConf(void) { } appSetKeyReq aesCmd = SM_SET_KEY_COMMAND; appSetKeyReq text = key; // 16 bytes of key appSetKeyReq blockcount = 1; // 128-bit block appSetKeyReq encryptConf = setAesKeyConf; HAL_AES_EncryptReq( appSetKeyReq);  2 To perform ECB encryption after setting the key  /* Declare a memory for Encrypt request*/ HAL_AES_EncryptReq_t appEncryptReq; /* define a callback after key is set*/ void aesEncryptConf(void) { // Action to be taken after the encryption is completed for a block } appEncryptReq aesCmd = SM_ECB_ENCRYPT_COMMAND; appEncryptReq text = text; // 16 bytes of text to encrypt appEncryptReq blockcount = 1; // 128-bit block appEncryptReq encryptConf = aesEncryptConf; HAL_AES_EncryptReq( appEncryptReq);  ",
							" System Environment Components APIs The System Environment component is used to maintain task management mechanism which distributes execution time between stack components and events system References System Environment functions ",
							" Task management Zigbee stack task internally uses a priority based proprietary scheduler to process the requests from various zigbee stack layers organized as tasks The Zigbee stack may use two functions to manage task execution The SYS_RunTask() function shall be called in the infinite loop inside the Zigbee task to instruct the stack to process the next task The stack checks what components have posted tasks via the SYS_PostTask() function and executes them according to priority of layers The priority of Zigbee layers increases from top to bottom i e the lower layers get high priority (The priority order from high to low : MAC/PHY NWK APS ZDO and so on) Executing a task means calling the task handler function of the corresponding layer (e g ZDO_TaskHandler() NWK_TaskHandler() ) A task handler function implements the state machine of the component selecting the code to execute according to the current state ",
							" Event Management Events are used throughout the stack and may also be employed by the application The application may add its own handlers to be executed upon events used by the stack Events used by the stack are defined in the firmware src config default zigbee lib inc systemenvironment include sysEvents h file The maximum number of events that may be supported by the System Environment component is given by SYS_MAX_EVENTS Each event may have several subscribers (handlers) associated with callback functions called one by one when the event is raised To subscribe to event call the SYS_SubscribeToEvent() function supplying event ID of the SYS_EventId_t type and the pointer to instance of the SYS_EventReceiver_t type The latter instance must be defined statically (or globally) The func field of the instance is set to the pointer to a callback function which is executed when the event is raised For example: //The callback function for the event static void eventCallback( SYS_EventId_t eventId SYS_EventData_t data) { } //Defined globally SYS_EventReceiver_t eventReceiver = { func = eventCallback }; //Subscribe to the event with the EVENT_ID identifier substitute with any //ID code from the BcEvents_t enumeration SYS_SubscribeToEvent() (EVENT_ID eventReceiver); Once a subscriber is added to the event associating a callback function with it the event may be raised by calling the SYS_PostEvent function The function is supplied with the event's ID (the first argument) and arbitrary data of the SYS_EventData_t type (the second argument) which is passed to the event's callback function as the callback's data argument If no data shall be passed to the callback set the second argument to 0 See the types of data passed with events within BcEvents_t enumeration's description To pass the pointer to a structure cast the pointer to the uintptr_t type For example: //The SYS_EventData_t_t type is supposed to be a type specific to the event that is raised static SYS_EventData_t eventData; SYS_PostEvent (EVENT_ID (uintptr_t) eventData); A handler may be removed from an event by calling the SYS_UnsubscribeFromEvent() function supplying it with the same values that were passed to SYS_SubscribeToEvent() function when the handler was added to the event It is also possible to check if an event has any subscribers - call the SYS_IsEventDeliverable() function - and to check if a given receiver instance (of the SYS_EventReceiver_t type) was subscribed to a given event ",
							" ZCL Components Usage Zigbee Cluster Library (ZCL) is a part of BitCloud which is intended to be used to create fully Zigbee compliant software for Smart Energy Building Automation and Home Automation devices ZCL implements a set of standard Zigbee clusters A cluster is a related collection of commands and attributes which together define an interface to a specific functionality available on a given device Zigbee 3 0 application device types may utilize some of the clusters defined in the ZCL References ZCL functions Common ZCL functions OTAU functions Security functions ZCL statuses ",
							" Sending a General cluster command  General cluster commands are sent via the ZCL_AttributeReq() function that has the pointer to an instance of the ZCL_Request_t type as an argument The structure behind the pointer includes complete destination specification (device address destination endpoint cluster ID etc ) command ID source endpoint ID payload length and payload itself  The argument also includes the defaultResponse field for configuring default response bit If it is set to ZCL_FRAME_CONTROL_ENABLE_DEFAULT_RESPONSE then ZCL default response command will be sent from the destination but not for the commands that already require command-specific ZCL response (e g read attribute command) Reception of unsolicited default responses is indicated by a special callback function  Consider the example:   ZCL_Request_t zclReq; //In the global scope zclReq id = …; // specify command ID e g ZCL_READ_ATTRIBUTES_COMMAND_ID zclReq endpointId = APP_ENDPOINT_LIGHT; //Source application endpoint zclReq ZCL_Notify = ZCL_AttributeResp; //The callback function //Setting destination address zclReq dstAddressing addrMode = APS_NO_ADDRESS; //Use binding zclReq dstAddressing profileId = PROFILE_ID; zclReq dstAddressing clusterId = ONOFF_CLUSTER_ID; zclReq dstAddressing clusterSide = ZCL_CLUSTER_SIDE_SERVER; //Disable default response (won’t be sent for commands with specific ZCL response) //but can be enabled for requests w/o response (e g attribute reports) zclReq defaultResponse = ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RESPONSE; zclReq requestLength = …; // specify payload length zclReq requestPayload = …; // point to payload memory //execute the request ZCL_AttributeReq ( zclReq);   Note: How to fill the req requestLength and req requestPayload fields is not shown in this example The ZCL component provides ZCL_PutNextElement() function that can be used to simplify filling and parsing the payload and calculating its length correctly  ",
							" Read or write a Remote Attribute  To read or write an attribute on a remote device the ZCL_AttribureReq() function is used A single request can access values of several attributes from the same cluster  The argument is of ZCL_Request_t * type The id field of the argument shall be set to ZCL_READ_ATTRIBUTES_COMMAND_ID to read attributes’ values and to ZCL_WRITE_ATTRIBUTES_COMMAND_ID to write attributes’ values The requestPayload and requestLength fields of the ZCL_Request_t instance shall be filled as described in following sections   Payload for Read Attributes Command  To form the payload for the read attributes command use the ZCL_PutNextElement() function With the help of this function attribute IDs are written one by one to the buffer in a correct way and the overall payload length is calculated The buffer is then used as the payload for the read attribute command See instructions below:   Define variables of ZCL_NextElement_t and ZCL_ReadAttributeReq_t types For example: ZCL_NextElement_t element; ZCL_ReadAttributeReq_t readAttrReqElement;  Define a sufficiently large buffer (but note that it should include only attribute IDs) The buffer must be defined globally and may be a variable of the uint8_t* type  Configure element in the following way: element payloadLength = 0; element payload = buffer; element id = ZCL_READ_ATTRIBUTES_COMMAND_ID; element content = readAttrReqElement; The buffer variable is assumed to be defined somewhere in the application to be used as the buffer  For each requested attribute repeat the following steps:  Set readAttrReqElement id to the target attributes identifier  Call ZCL_PutNextElement() ( element)   Set the requestLength field of the ZCL_Request_t instance to element payloadLength  Set the requestPayload field of the ZCL_Request_t instance in the request to buffer     Payload for Write Attributes Command  Forming the payload for a write attributes command involves almost the same steps as for the read attributes command:   Define a variable of ZCL_NextElement_t type and a request element The latter may have the ZCL_WriteAttributeReq_t type For example: ZCL_NextElement_t element; ZCL_WriteAttributeReq_t writeAttrReqElement; In this case the type field of the ZCL_WriteAttributeReq_t instance should be set to the constant specifying the attribute’s data type; for example ZCL_U64BIT_DATA_TYPE_ID The data type for a given attribute is defined by the ZCL specification and should coincide with the data type assigned to the attribute on the destination devices The attribute’s value should be written to the value field However this field in fact has the unit8_t[1] type A one-byte value may be assigned to value[0] But values occupying more than one byte in memory cannot be written directly A possible workaround is to allocate sufficiently long buffer and cast it to the ZCL_WriteAttributeReq_t * type Another solution is to define a custom structure containing subsequent ID type and value fields with the value field of the actual attribute’s size For example for 64-bit unsigned type the structure may be defined in the following way: typedef struct PACK { ZCL_AttributeId_t id; uint8_t type; uint64_t value; } APP_Write64BitAttributeReq_t; And the request element will be defined in this way: APP_Write64BitAttributeReq_t writeAttrReqElement;  Configure element in the following way: element payloadLength = 0; element payload = buffer; element id = ZCL_WRITE_ATTRIBUTES_COMMAND_ID; element content = writeAttrReqElement; The buffer variable is assumed to be defined somewhere in the application to be used as the buffer  For each requested attribute repeat the following steps:  Set writeAttrReqElement id to the target attribute’s ID  Write the attribute’s value to the writeAttrReqElement value field For a ZCL_WriteAttributeReq_t instance cast this field to a pointer to the attribute’s data type and dereference it for example: *(uint64_t*)writeAttrReqElement- value = VALUE;  Call ZCL_PutNextElement() ( element) Check the returned value: ZCL_END_PAYLOAD_REACHED_STATUS will be returned when the last element fitting into the payload is written   Set the requestLength field of the ZCL_Request_t instance to element payloadLength  Set the requestPayload field of the ZCL_Request_t instance in the request to buffer    ",
							" Parsing the response payload  In the callback function for a general cluster command’s response the application should first check the status of the command’s execution Parsing response payload is needed in case of:   Successful execution of the read attributes command  Error in execution of a write attributes command for several attributes at once (the payload will contain IDs of attributes for which writing operation has failed)   For the write attributes response the success status means that all attributes have been written successfully while the error status means that some attributes have not been written In the latter case the response payload contains a separate status report for each attribute (Refer ZCL specification)  To process the response payload the application should configure an instance of ZCL_NextElement_t type and use the ZCL_GetNextElement() function to extract subsequent attribute records:   Define a variable of ZCL_NextElement_t type and a variable of the ZCL_ WriteAttributeResp_t type (for read attributes response) or of the ZCL_WriteAttributeResp_t type (for write attributes response) For example: ZCL_NextElement_t element; and ZCL_ ReadAttributeResp_t *temp = NULL; or ZCL_ WriteAttributeResp_t *temp = NULL;  Configure element in the following way: element payloadLength = resp- responseLength; element payload = resp- responsePayload; element content = NULL; For read attributes response: element id = ZCL_READ_ATTRIBUTES_RESPONSE_COMMAND_ID; For write attributes response: element id = ZCL_WRITE_ATTRIBUTES_RESPONSE_COMMAND_ID;  For each requested attribute repeat the following steps:  Call ZCL_GetNextElement ( element)  Cast element content to ZCL_ReadAttributeResp_t * for read attributes response and to ZCL_WriteAttributeResp_t * for write attribute response  Access the value as *( AttrType *)value or check the id and status fields (the status field describes the result of read attributes command)  For example: ZCL_GetNextElement ( element); temp = ( ZCL_ReadAttributeResp_t *) element content; if (ZCL_SUCCESS_STATUS == temp- status) { uint64_t value = *(uint64_t*)temp- value; //Process the received value }  Check the value returned by ZCL_GetNextElement() When the last element from the payload is read the function returns ZCL_END_PAYLOAD_REACHED_STATUS   ",
							" Sending a Cluster-specific command  To send a cluster specific command the ZCL_CommandReq() function is used with the pointer to an instance of the ZCL_Request_t type as an argument that is used very similar as in ZCL_AttributeReq() function for general cluster commands described in Section Sending a General cluster command  Argument’s fields include command ID source endpoint destination addressing information command payload and command payload’s length pointers to a confirmation callback function and a field configuring default response These paremters are defined in ZCL_Request_t structure  If a cluster-specific command requires specific ZCL response command per its specification in cluster definition file then ZCL_Notify callback for the ZCL request will be triggered only after such response command is received or until timeout for it reception expires Immediately after such ZCL_Notify the callback function for the ZCL response command as specified for supported cluster commands will be called as well   Command payload formatting   For cluster-specific commands the command’s payload is set to the pointer to an instance of a special type defined for each command in the cluster header file The payload length can be calculated with the help of the sizeof operator applied to this type  The following example shows the usage of ZCL_CommandReq() API to send a OTAU cluster specific command ZCL_OtauImageBlockReq_t *tmpOtauReq = zclReqMem uImageBlockReq; ZCL_Request_t *tmpZclReq = zclCommandReq; // fill the ZCL_Request_t structure fields for outgoing request tmpZclReq- dstAddressing addrMode = APS_SHORT_ADDRESS; tmpZclReq- dstAddressing addr shortAddress = actvServer- serverShortAddress; tmpZclReq- dstAddressing endpointId = actvServer- serverEndpoint; tmpZclReq- dstAddressing profileId = zclOtauMem initParam profileId; tmpZclReq- dstAddressing clusterId = OTAU_CLUSTER_ID; tmpZclReq- dstAddressing clusterSide = ZCL_SERVER_CLUSTER_TYPE; tmpZclReq- dstAddressing manufacturerSpecCode = 0; tmpZclReq- dstAddressing sequenceNumber = ZCL_GetNextSeqNumber(); tmpZclReq- endpointId = zclOtauMem initParam otauEndpoint; tmpZclReq- id = id; tmpZclReq- defaultResponse = ZCL_FRAME_CONTROL_ENABLE_DEFAULT_RESPONSE; tmpZclReq- requestLength = length; tmpZclReq- requestPayload = payload; tmpZclReq- responseWaitTimeout = rspWaitTime; tmpZclReq- ZCL_Notify = otauSomeRequestConfirm; // fill the command structu/paremeters of the cluster command tmpOtauReq- controlField blockRequestDelayPresent = 1; tmpOtauReq- controlField reqNodeIeeeAddrPresent = 0; tmpOtauReq- controlField reserved = 0; tmpOtauReq- manufacturerId = csManufacturerId; tmpOtauReq- imageType = clientMem- downloadingImgType; memcpy( tmpOtauReq- firmwareVersion clientMem- newFirmwareVersion sizeof(ZCL_OtauFirmwareVersion_t)); tmpOtauReq- fileOffset = clientMem- imageAuxParam requestFileOffset; tmpOtauReq- maxDataSize = clientMem- imageAuxParam requestBlockSize; tmpOtauReq- minimumBlockPeriod = otauClientAttributes minimumBlockPeriod value; ZCL_CommandReq(tmpZclReq);  Note that for a cluster-specific command the application shall use the ZCL_GetNextSeqNumber() function to obtain ZCL sequence numbers set it to the sequenceNumber field in the dstAddressing structure of the argument of ZCL_CommandReq()   ",
							" ZDO Component Usage The Zigbee Device Objects (ZDO) component of the BitCloud provides an interface between the application framework that is a collection of application objects the device profile and the APS layer ZDO offers several asynchronous requests for performing basic networking operations such as network formation and join and a set of functions that help obtain network information from internal stack structures A considerable part of network related functionality is maintained by Zigbee Device Profile (ZDP) requests The sections below describe the most common tasks performed with the use of ZDO component References ZDO functions ZDO status codes The list of ZDP requests Contents Network start Configuring network start Handling network notifications Sending ZDP requests Device Discovery requests Service discovery requests Leaving the network ",
							" Network Start  Starting network on a certain device means forming a new network if the device is the coordinator or discovering and joining to an existent network if the device is a router or an end device In both cases the user should call the ZDO_StartNetworkReq_t function The function takes a pointer to an instance of ZDO_StartNetworkReq_t type as an argument The only field to be specified in the request parameters is a pointer to the confirmation callback given in the ZDO_StartNetworkConf field Upon request completion the APS layer fills the confirm field with the execution status and information about the network entered by the device A pointer to this field is received as the argument of the callback The following code sample demonstrates how to perform a network start  //The parameters for the network start request ZDO_StartNetworkReq_t networkParams; //the definition of the callback for the network start request static void ZDO_StartNetworkConf( ZDO_StartNetworkConf_t *confirmInfo) { //code goes here } //configure the request parameters networkParams ZDO_StartNetworkConf = ZDO_StartNetworkConf; //send the request ZDO_StartNetworkReq ( networkParams);  As for the most of requests in the stack the status field of confirmation parameters reports whether the request has been executed successfully The ZDO_SUCCESS_STATUS value indicates that the device has successfully formed or joined the network In this case network parameters the short address assigned to the device and the parent address are received as well (see documentation of ZDO_StartNetworkConf_t)  ",
							" Configuring network start  The stack provides a user with means of further control of a network start The way the network start goes depends on the ConfigServer parameters with the ID CS_JOIN_CONTROL_ID The application can fill a structure of NWK_JoinControl_t type and set it a the value of the parameter using the CS_WriteParameter value at any item before network start  The structure includes the method field which sets the type of network start Possible values are given in the NWK_JoinMethod_t enumeration The default value is NWK_JOIN_BY_DEFAULT which makes the stack select a network start type on the basis of ConfigServer parameters Basically if device's type is the coordinator a new network is formed and otherwise if the extended PANID of the network (CS_EXT_PANID) is unknown the association procedure is used and if the extended PANID is already known the rejoining procedure is applied A particular method for the network start is selecting by assigning a different value to the method field The application can also set any appropriate value though is shall ensure that all parameters required by the method are set or otherwise network start will fail  Other fields all of boolean type of the NWK_JoinControl_t structure are (the application can set these fields as it seems appropriate regardless of the method field's value):   secured - determines if frames exchanged during network start are encrypted with the network key The network key should be set in the CS_NETWORK_KEY parameter  discoverNetworks - causes the stack to scan for networks during network start (if set to true ) or not During scanning the neighbor table is filled with entries describing discovered devices So if this field is set to false the application can fill neighbor table by itself  annce - determines if a device announcement frame will be sent after network start notifying other devices that a new node has entered the network The application on a node can track device announcement frames sent by its child nodes if it subscribes to the BC_EVENT_DEVICE_ANNCE event using the SYS_SubscribeToEvent() function   In the following code example the node is configured to join the network via rejoin but without sending a device announcement frame on successful rejoin:  NWK_JoinControl_t joinControl = { method = NWK_JOIN_VIA_REJOIN //CS_EXT_PANID must be set secured = true discoverNetworks = true annce = false//Device announcement won't be sent after network join }; CS_WriteParameter (CS_JOIN_CONTROL_ID joinControl); //Set the parameter in ConfigServer  ",
							" Handling Network notifications  Each application must implement the ZDO_MgmtNwkUpdateNotf ( ZDO_MgmtNwkUpdateNotf_t * nwkParams) function The function is called by the stack when certain network events occur The type of the event is observed with the nwkParams- status field The application can choose to ignore or to process any of the events Possible event types are given in the following list:   ZDO_NETWORK_STARTED_STATUS Received when the stack performs network start by itself not initiated on the application level e g when the node automatically rejoined to the network after it had lost connection to the parent    ZDO_NETWORK_LOST_STATUS Indicates parent loss After issuing this notification the stack automatically attempts to rejoin the network This status can be received only on end devices    ZDO_NETWORK_LEFT_STATUS Is received either when the node loses its parent and fails to rejoin the network or when the node leaves the network by itself in response to a ZDP command    ZDO_NWK_UPDATE_STATUS Indicates that one or more of network parameters have been changed Parameters include PANID channel mask and node`s short address    ZDO_CHILD_JOINED_STATUS Indicates that a new child has successfully joined to the current node This status is not valid for end devices The notification is raised when the current node from its side finishes all procedures as the parent of the new node: for example if security is applied in the network when the node sends a transport key command This does not necessarily mean that the child device will successfully decrypt the transport key command and complete network join This is only verified by the device announcement frame The parent node can track its reception by subscribing to the BC_EVENT_DEVICE_ANNCE event    ZDO_CHILD_REMOVED_STATUS Indicates that a child has left the network    ZDO_STATIC_ADDRESS_CONFLICT_STATUS Indicates that a short address set statically has leaded to the address conflict The event is raised on the node that discovered the conflict The application is responsible for resolving the conflict typically by choosing a different short address and updating its value on the node via a ZDP request    ZDO_NO_KEY_PAIR_DESCRIPTOR_STATUS The status is valid only if a security mode with link keys is used The event is raised on the trust center node and indicates that the link key for the device that attempts to join the network has not been found The application can save the extended address of the potential child to extract the link key for it from an external source of information so that the child can be authenticated when it makes the next attempt to join the network   The definition of the ZDO_MgmtNwkUpdateNotf() function in the application code might look like the following:  void ZDO_MgmtNwkUpdateNotf ( ZDO_MgmtNwkUpdateNotf_t *nwkParams) { switch (nwkParams- status) { case ZDO_NETWORK_STARTED_STATUS: //More code goes here e g the application may save new //network parameters break; case ZDO_NO_KEY_PAIR_DESCRIPTOR_STATUS: #ifdef _LINK_SECURITY_ //The event can occur in high security mode on the trust center only //Extract the extended address of the device attempting to join the network extAddr_t addr = nwkParams- childInfo extAddr; uint8_t linkKey[16] = ; //Find out the link key value and store in this variable APS_SetLinkKey( addr linkKey); //Set the link key for the given extended address #endif break; default: break; } }  Note the use of the _LINK_SECURITY_ define It marks code parts that will be included if the application is compiled with standard link security mode If the code in the callback may consume more than 10ms its execution should be deferred  ",
							" Sending ZDP requests Zigbee Device Profile (ZDP) requests provide a set of functionality for managing the network discovering devices and services etc The ZDO_ZdpReq() function issues a ZDP request A particular action performed by the function is detemined by the reqCluster field in an instance of the ZDO_ZdpReq_t type representing request parameters Additional request parameters are given in the req reqPayload field which is actually a union so that the same memory is used for parameters specific for different request types Since the function is executed asynchronously request parameters' instance shall be defined in a global scope (or file scope - using the static keyword) Note that an instance of request parameters must not be reused until the confirmation callback is called for the current request because the callback function uses the pointer to response parameters residing in the instance of the request parameters as an argument The following sections provide some examples of issuing ZDP requests of various types For more examples explore the code of sample applications provided with the SDK ",
							" Device Discovery requests Two typical tasks in Zigbee application development are obtaining the extended address of a remote device corresponding to a given short address and the reverse task of discovering the short address of the device with a given extended address These tasks are accomplished with a help of ZDP requests of IEEE_ADDR_CLID and NWK_ADDR_CLID types respectively For example to obtain the extended address the following code may be used: ZDO_IeeeAddrReq_t *ieeeAddrReq = zdpReq req reqPayload ieeeAddrReq; zdpReq ZDO_ZdpResp = zdpIeeeAddrResp; //confirmation callback function zdpReq reqCluster = IEEE_ADDR_CLID; //type of request ieeeAddrReq- nwkAddrOfInterest = nwkAddr; //the destination short address ieeeAddrReq- reqType = SINGLE_RESPONSE_REQUESTTYPE; //indicate that response is expected from//one node only - and not from its children ieeeAddrReq- startIndex = 0; ZDO_ZdpReq() ( zdpReq); //send the request Implementation of the callback function for this request might look like the following: static void zdpIeeeAddrResp(ZDO_ZdpResp_t *resp) { //Convert the response to the appropriate type ZDO_IeeeAddrResp_t *ieeeAddrResp = (ZDO_IeeeAddrResp_t *) resp- respPayload ieeeAddrResp; //Check whether the operation is a success if (ZDO_SUCCESS_STATUS == resp- respPayload status) { //The desired extended address is contained in ieeeAddrResp- ieeeAddrRemote field //Perform actions that required obtaining the address //Post a task to notify the stack that for an appropriate task to be executed SYS_PostTask ( ); } else { //Execute required logic e g perform IEEE request again } } Note that the response payload should be converted to the type conforming to the type of the issued request For that select appropriate field from the union inside the respPayload field ",
							" Service Discovery requests Service Discovery stands for procedures of collecting information about network devices and functionality (clusters) they support Using Service Discovery the application on the current node is able to find out short addresses of devices that support certain input or output clusters and accomplish some other similar tasks An essential ZDP request implementing Service Discovery that is frequently needed in applications is of type MATCH_DESCRIPTOR_CLID It launches a search for devices that have registered endpoints supporting the specified clusters The request can be sent either to a specific node identified with the short address or to a broadcast address The application can specify a list of input and a list of output clusters although it is rarely useful to point out more than one cluster because a destination node responds with a list of all its endpoints that support at least one input or output cluster specified in the request The following code sends a match descriptor request: //define global variables static ZDO_ZdpReq_t zdpReq; ZDO_MatchDescReq_t *matchDescReq = zdpReq req reqPayload matchDescReq; zdpReq ZDO_ZdpResp = zdpMatchDescResp; //confirmation callback zdpReq reqCluster = MATCH_DESCRIPTOR_CLID; //set request type matchDescReq- nwkAddrOfInterest = CPU_TO_LE16(BROADCAST_SHORT_ADDRESS); matchDescReq- profileId = CPU_TO_LE16(APP_PROFILE); //set profile ID matchDescReq- numInClusters = 1; //number of clusters matchDescReq- inClusterList[0] = APP_CLUSTER; //set cluster ID ZDO_ZdpReq ( zdpReq); //send the request Each reply from a discovered device received by the request's originator causes the confirmation callback to be called As soon as the request is issued the stack starts a timer and waits for replies during a period of time specified in the CS_ZDP_RESPONSE_TIMEOUT parameter When the timer elapses the stack fires the callback with the ZDO_CMD_COMPLETED_STATUS status code The default CS_ZDP_RESPONSE_TIMEOUT's value is calculated by the stack in such a way that the devices sleeping at the moment the request is sent are not expected to have time to awake and answer the request So the request will normally reach only active devices Each response contains the short address the number of matching endpoints and the list of matching endpoints The confirmation callback's implementation can be like this: //A callback function for the ZDP match descriptor request static void zdpMatchDescResp(ZDO_ZdpResp_t *resp) { ZDO_MatchDescResp_t *matchResp = resp- respPayload matchDescResp; if (ZDO_CMD_COMPLETED_STATUS == resp- respPayload status) { //timeout has expired; this is the last time the callback is called //for the current request } else if (ZDO_SUCCESS_STATUS == resp- respPayload status) { //process another response from the network: for example the application //can immediately send a ZDP request to obtain the extended address of the device doIeeeAddrReq(); } else { //process failure statuses } } ",
							" Leaving the network To force a device to leave the network issue a ZDP request of the MGMT_LEAVE_CLID type The request can also be used to force a remote node to leave the network A node that has left the network cannot be reached by remote data requests and can not sent data to remote nodes from the application layer To return to the network the node should issue network start request To ensure that the same network will be chosen during network scan procedures the PANID value of the previous network shall be saved before network leave and indicated as predefined The following examples illustrates parameters configuration for the MGMT_LEAVE_CLID request which will force the current node to leave the network: static ZDO_ZdpReq_t zdpLeaveReq; //globally defined variable //set corresponding cluster ID zdpLeaveReq reqCluster = MGMT_LEAVE_CLID; zdpLeaveReq dstAddrMode = EXT_ADDR_MODE; zdpLeaveReq dstExtAddr = 0; // for own node address shall be 0 zdpLeaveReq ZDO_ZdpResp = ZDO_ZdpLeaveResp; // callback//for own node address shall be 0 zdpLeaveReq req reqPayload mgmtLeaveReq deviceAddr = 0; //specify whether to force children leave or not zdpLeaveReq req reqPayload mgmtLeaveReq removeChildren = 0; //specify whether to perform rejoin procedure after network leave zdpLeaveReq req reqPayload mgmtLeaveReq rejoin = 0; ZDO_ZdpReq ( zdpLeaveReq); // request for network leave The request can also be used for asking a remote node to leave Moreover it is possible to force all its direct children to leave For that parameters shall be configured in a different way as it is shown below: static ZDO_ZdpReq_t zdpLeaveReq; //globally defined variable //set corresponding cluster ID zdpLeaveReq reqCluster = MGMT_LEAVE_CLID; zdpLeaveReq dstAddrMode = EXT_ADDR_MODE; zdpLeaveReq dstExtAddr = DST_EXT_ADDRESS; //for own node address shall be 0 zdpLeaveReq ZDO_ZdpResp = ZDO_ZdpLeaveResp; //confirmation callback//for own node should be 0 (or equal own address) zdpLeaveReq req reqPayload mgmtLeaveReq deviceAddr = DST_EXT_ADDRESS; //specify whether to force children leave or not zdpLeaveReq req reqPayload mgmtLeaveReq removeChildren = 1; //specify whether to perform rejoin procedure after network leave zdpLeaveReq req reqPayload mgmtLeaveReq rejoin = 0; ZDO_ZdpReq ( zdpLeaveReq); // request for network leave If the rejoin field is set to 1 then a destination node will attempt to join the network again after the network leave is complete It may be used to force a device to change its parent or join with a different short address ",
							" ZGP Component Usage ",
							" ZGP device functionalities The Zigbee green power(ZGP) provides an interface to commission control or get the information from the Green power device Green Power Devices may harvest different amount of energy depending on the harvesting technology used With its own available energy budget each GPD has special requirements regarding the functionality it can implement Due to the energy budget of the GPD bidirectional communication is limited To enable GPD to communicate to Zigbee network GPD frame is much shorter than the Zigbee frame On the Zigbee network side the GP functionality required on a Zigbee node in order to receive and process the GPDF and then tunnel it if required across multiple hops in a normal Zigbee frame format to the paired node referred to as the sink which processes and acts upon the information sent by GPD Contents GP infrastructure device types Initialization Commissioning to GPD ZGP infrastructure generic APIs ZGP devices Channel configuration Uni directional commissioning Bi directional commissioning Decommissioning GPD Operation ZGP device generic APIs ",
							" GP Infrastructure devices ",
							" Initialization 1 Following public API is used to initialize the zgp high proxy which will do Getting the green power cluster information and adding the event handler for the zgp proxy attribute event Initializing zgp high generic and cluster generic feature Initializing the zgp NVM table which contains the ID of GPD security keys frame counters and sink address list commissioned id endpoint etc Initializing the zgp client cluster void ZGPH_ProxyBasicInit (void); Parameters: None 2 Following public API is used to initialize the zgp high sink which will do Initializing the zgp server cluster void ZGPH_SinkBasicInit (void); Parameters: None 3 Following public API is used to initialize the lowzgp(mainly dStub/cStub) void ZGPL_Init (void); Parameters: None ",
							" Commissioning 1 Following public API is used to put sink in commissioning mode void ZGPH_PutLocalSinkInCommissioningMode (uint8_t options uint8_t endPoint bool unicastComm); Parameters: options - commissioning mode options (bit fields according to the set bit fields) uint8_t action : 1; uint8_t involveGPMinSecurity : 1; uint8_t involveGPMinPairing : 1; uint8_t involveProxies : 1; uint8_t reserved : 4; endPoint - value of communicating endpoint unicastComm - true or false 2 Following public API is used to send the zgp proxy commissioning mode command ZCL_Status_t  ZGPH_SendProxyCommissioningModeCommand (uint8_t options uint16_t commissioningWindow uint8_t channel); Parameters: options - proxy options field commissioningWindow - commissioning window value channel - channel value Usage //If involveProxies is enabled from the options in ZGPH_PutLocalSinkInCommissioningMode (uint8_t sinkCommModeOptions uint8_t endPoint bool unicastComm) API uint8_t options; zgpGpProxyCommModeOptions_t *proxyOptions = ( zgpGpProxyCommModeOptions_t *) options; proxyOptions- action = sinkCommModeOptions- action; proxyOptions- channelPresent = false; // As per the current spec this is set to 0 always proxyOptions- exitMode = ON_FIRST_PAIRING_SUCCESS; proxyOptions- unicastCommunication = unicastComm; ZGPH_SendProxyCommissioningModeCommand (proxyOptions COMMISSIONING_WINDOW_DEFAULT_VALUE_IN_MSEC ZGP_PROXY_COMM_MODE_CHANNEL); ",
							" Generic ZGP infrastructure APIs 1 Following public API is used to enable or disable the direct mode of GPDF and it is applicable for the COMBO basic devices(proxy + sink) Depending upon this it will forward c-stub indication to d-stub block void ZGPL_EnableDisableDirectMode (bool enabled); Parameters: enabled - enable/disable flag 2 Following public API is used to request the zgp simple descriptor to get the information like cluster ids profile id and device id etc for the requested network address and end point void ZGPL_SendSimpleDescReq (ShortAddr_t addr uint8_t ep); Parameters: addr - Network address of the node ep - endpoint value 3 Following public API Is used to broadcast the device announce of zgp to the network which will be called generally after successful zgp commissioning void ZGPL_SendDeviceAnnounceCmd (uint16_t nwkAddr uint64_t extAddr); Parameters: nwkAddr - nwk addr to be placed in the device announce extAddr - ext addr to be placed in the device announce 4 Following public API is used to send the zgp read attribute command with green power profile id cluster id for the respective attribute id to the Zigbee network ZCL_Status_t  ZGPH_SendReadAttribute (uint16_t addr uint8_t dir uint16_t attrId); Parameters: addr - Destination address dir - server to client or client to server attrId - Attribute id 5 Following public API is used to send the zgp commands in raw mode with the payload ZCL_Status_t  ZGPH_SendCmdInRawMode (uint16_t dstAddr bool dir uint16_t cmdId uint8_t payLoadLength uint8_t *payLoad); Parameters: dstAddr - Destination address dir - server to client or client to server cmdId - cluster command id payLoadLength - length of payload to be sent payLoad - payload to be sent 6 A proxy node must keep information about the GP source nodes for which it acts as a proxy This information is stored in a local 'proxy table' which contains an entry for each source node which is in direct range A proxy table entry stores pairing information about the source node and the paired sink node including the security requirements and communication mode The proxy table is automatically built up by the Green Power cluster as a part of the commissioning process Following public API is used to send request for zgp proxy table to the specific network address ZCL_Status_t  ZGPH_SendProxyTableRequest (uint16_t addr uint8_t options uint64_t gpdId_Ieee uint8_t ep uint8_t index); Parameters: addr - Destination address options - options field gpdId_Ieee - gpd id or IEEE address ep - endpoint for IEEE address gpd index - index field 7 A sink node must keep a record of the source nodes with which it is paired This information is stored in a local ‘sink table’ which contains an entry for each paired source node This table allows the sink node to determine whether a GP frame received from a source node (directly or via a proxy node) is intended for itself The sink table is automatically built up by the Green Power cluster as a part of the commissioning process Following public API is used to send request for zgp sink table information for the respective network address and end point ZCL_Status_t  ZGPH_SendSinkTableRequest (uint16_t addr uint8_t options uint64_t gpdId_Ieee uint8_t ep uint8_t index); Parameters: addr - Destination address options - options field gpdId_Ieee - gpd id or IEEE address ep - endpoint for IEEE address gpd index - index field 8 Following public API is used to update sink entry locally on NVM based on the given action ZGP_InfraDeviceStatus_t  ZGPH_UpdateLocalSinkEntry ( zgpSinkTableEntry_t *sinkEntry zgpSinkTableActions_t action); Parameters: sinkEntry - pointer to the sinkEntry to be updated action - Add/Replace/Remove 9 Following public API is used to set the sink group id used for the GPD to be commissioned ZGP_InfraDeviceStatus_t ZGPH_SetSinkGroupEntry (GroupAddr_t sinkGroupId); Parameters: sinkGroupId - sink group Id to be set 10 Following public API is used to set the assigned alias for the GPD to be commissioned ZGP_InfraDeviceStatus_t  ZGPH_SetGPDAssignedAlias (ShortAddr_t gpdAssignedAlias); Parameters: gpdAssignedAlias - The commissioned 16-bit ID to be used as alias for this GPD 11 Following public API is used to read the sink entry based on the index bool ZGPH_GetSinkTableEntryByIndex ( zgpSinkTableEntry_t *entry uint8_t index); Parameters: entry - entry to be populated index - entry index 12 Following public API is used to send gpPairingConfiguration command over the air ZGP_InfraDeviceStatus_t  ZGPH_SendGpPairingConfigCmd (APS_AddrMode_t addrMode APS_Address_t *dstAddr ZGP_PairingConfigCmdInfo_t pairingConfigCmdInfo zgpCommReqAppInfo_t *commReqAppInfo zgpEndpointInfo_t endPointInfo); Parameters: addrMode - address mode to be used over the air dstAddr - destination address of the remote device pairingConfigCmdInfo - pairingConfig command inputs commReqAppInfo - Application information endpointInfo - paired Endpoints information 13 Following public API is used to flush out the tx request queued in tx queue void ZGPL_FlushTxQueue (void); Parameters: None 14 Following public API is used to initiate gpd data request from high sink/proxy void ZGPL_GpdfDataRequest ( ZGP_GpdfDataReq_t *zgpGpdfDataReq); Parameters: zgpGpdfDataReq - data request paramters to be filled in queue 15 Following public API is used to check the gpdf for duplicate packets bool ZGPL_CheckForDuplicate (ZGPL_DataInd_t *dStubDataInd); Parameters: dstubDataInd - dstub data indication paramters 16 Following public API is used to derive the GPD security key from the network/group key This API is mainly used by high Sink void ZGPL_KeyDerivationHmac ( zgpSinkTableEntry_t * sinkTableEntry uint8_t *derivedKey void (*keyedHashMacCb)(void)); Parameters: sinkTableEntry - pointer to the sinkTableEntry derivedKey - key to be derived sinkTableEntry - callback function 17 Following public API is used to set the proxy/sink mode(commissioning/operational) void ZGPL_SetDeviceMode (bool isProxy zgpMode_t mode); Parameters: isProxy - true for proxy false for sink mode - commissioning/operational 18 Following public API is used to get the proxy/sink mode(commissioning/operational) void ZGPL_GetDeviceMode (bool isProxy zgpMode_t mode); Parameters: isProxy - true for proxy false for sink mode - commissioning/operational 19 Following public API is used to check whether the given srcId is valid or not considering frame type bool ZGPL_IsValidSrcId (uint32_t srcId ZGP_FrameType_t frameType bool isPairingReq); Parameters: srcId - GPD srcId frameType - Maintanence Frame/Data Frame isPairingReq - rcId received in PairingConfig/Commissioning 20 Following public API is used to check whether the given key is valid or not bool ZGPL_IskeyValid (uint8_t *key); Parameters: key - key to be validated 21 Following public API is used to derive the alias from the given gpdId uint16_t ZGPL_GetAliasSourceAddr (gpdId_t *gpdId); Parameters: gpdId - gpdId from which the alias has to be derived ",
							" NVM_Table API's Following sections explains about the API's usage with respect to NVM table 1 Following public API is used to initilaize the NVM Table void ZGPL_NvmTableInit (void); Parameters: none 2 Following public API is used to reset all parameters of the given entry to init value void ZGPL_ResetTableEntry (void *entry ZGP_TableType_t tableType); Parameters: entry - entry to be reset tableType - sink/proxy entry 3 Following public API is used to fetch the total no of non empty entries This is mainly used by high proxy/sink while sending sink/proxy table responses uint8_t ZGPL_TotalNonEmptyEntries (bool isProxyTable); Parameters: isProxyTable - proxy/sink entry 4 Following public API is used to add/update the proxy/sink entry on NVM bool ZGPL_AddOrUpdateTableEntryOnNvm (void *entryPtr ZGP_TableUpdateAction_t action ZGP_TableType_t tableType); Parameters: entryPtr - pointer to the entry action - to be performed on the entry tableType - proxy or sink entry 5 Following public API is used to read the proxy/sink entry from NVM ZGP_ReadOperationStatus_t  ZGPL_ReadTableEntryFromNvm (void *entryPtr ZGP_TableOperationField_t tableOperationField gpdId_t *gpdId uint8_t endPoint); Parameters: entryPtr - entry to be filled tableOperationField - filter fields for read operation gpdId - pointer to the addr info endPoint - GPD end point 6 Following public API is used to delete the sink/proxy entry from NVM bool ZGPL_DeleteTableEntryFromNvm ( ZGP_TableOperationField_t filterField gpdId_t *gpdId uint8_t endPoint); Parameters: tableOperationField - filter fields for read operation gpdId - pointer to the addr info endPoint - GPD end point 7 Following public API is used to read/update frame counter on NVM bool ZGPL_FrameCounterReadorUpdateOnNvm (uint32_t *frameCounter ZGP_TableOperationField_t tableOperationField gpdId_t *gpdId uint8_t endPoint bool isUpdateOperation); Parameters: frameCounter - frameCounter to be updated/read tableOperationField - filter fields for read operation gpdId - pointer to the addr info isUpdateOperation - true for update false for read 8 Following public API is used to check whether the pairing info in the sink entry is empty or not This is used by high/low zgp while processing sink entry bool ZGPL_SinkEntryIsPairingInfoEmpty ( zgpSinkTableEntry_t *currEntry); Parameters: currEntry - entry address 9 Following public API is used to add the group entry to the given sink entry bool ZGPL_AddSinkGroupEntry ( zgpSinkTableEntry_t *currEntry zgpSinkGroup_t *groupEntry); Parameters: currEntry - entry address groupEntry - group entry id to be added 10 Following public API is used to delete all the table entries void ZGP_ResetTableToFN (void); Parameters: none ",
							" References ",
							" Components APIs  Here is a list of all APIs:   APS APIs  Data related functions  Security   BDB APIs  CS APIs  HAL APIs  HAL App timer   PDS APIs  System Environment APIs  ZCL APIs  OTAU  Security  Common APIs   ZDO APIs  ZGP APIs   ",
							" BDB APIs  All BDB component's API functions  Some functions that are not intended to be used by the application but internally by the stack only are not listed  See more information on API usage with code examples on Using the BDB component  ",
							" BDB Commissioning APIs  BDB APIs related to commissioning is listed here        Functions    void  BDB_ConfigureInstallCode(ExtAddr_t deviceAddress uint8_t *installCode IcStatusCallback_t pfCallback) This API calculates the CRC for the install code and compare with the given CRC Derives the link key using SSP AES and sets the key in APS Key Pair Set    bool  BDB_InvokeCommissioning(BDB_InvokeCommissioningReq_t *req) The commissioning API invokes the commissioning based on the given information in the request structure    void  void BDB_ResetVia_TouchlinkCluster(ResetTargetCallback_t pfcallback) Resets the target device to factory defaults using touchlink commissioning cluster TBD-Whether such API is needed or not based on application defintion    void  BDB_SetInstallCodeUsage(bool useInstallCode) Sets the install code usage at the trust center    void  BDB_SetNodeJoinTimeout(uint8_t timeOutInSec) Sets the Node Join TimeOut    void  BDB_SetTCLKExchangeMethod(uint8_t exchangeMethod) Sets the TCLK Exchange Method BDB attribute    void  BDB_SetTCLKRetryMaxAttempts(uint8_t attempts) Sets the TCLK Retry Max Attempts BDB attribute    void  BDB_SetTCRequireKeyExchange(bool requireKeyExchange) Sets the Trust center Require key change or not of the joining device    void  BDB_SetToulinkRole(bool initiator) Sets the Touchlink role      ",
							" BDB_SetBdbNodeIsOnANetwork Function ",
							" C void BDB_SetBdbNodeIsOnANetwork(bool onNetwork); ",
							" Description Set the bdbNodeIsOnANetwork status ",
							" Parameters Param Description bool true if the device is on network false ",
							" Returns None ",
							" BDB_ConfigureInstallCode Function ",
							" C void BDB_ConfigureInstallCode(ExtAddr_t deviceAddress uint8_t *installCode IcStatusCallback_t pfCallback); ",
							" Description bdb Public API to configure Install Code This API calculates the CRC for the install code and compare with the given CRC Derives the link key using SSP AES and sets the key in APS Key Pair Set ",
							" Parameters Param Description deviceAddress set to 0xffffffff in device or ext addr of the joining device installCode pointer which holds the install code to be derived pfCallback callback function to be called once the operation is finished ",
							" Returns None ",
							" BDB_InvokeCommissioning Function ",
							" C bool BDB_InvokeCommissioning(BDB_InvokeCommissioningReq_t *req); ",
							" Description The commissioning API invokes the commissioning based on the given information in the request structure ",
							" Parameters Param Description req request structure information for invoking commissioning ",
							" Returns true if event is handled false - otherwise ",
							" BDB_ResetVia_TouchlinkCluster Function ",
							" C void BDB_ResetVia_TouchlinkCluster(ResetTargetCallback_t pfcallback); ",
							" Description Resets the target device to factory defaults using touchlink commissioning cluster TBD-Whether such API is needed or not based on application defintion ",
							" Parameters Param Description pfcallback callback to be called with status once the request is complete ",
							" Returns None ",
							" BDB_SetInstallCodeUsage Function ",
							" C void BDB_SetInstallCodeUsage(bool useInstallCode); ",
							" Description Sets the install code usage at the trust center ",
							" Parameters Param Description useInstallCode if it is true TC will allow only install code devices to join ",
							" Returns None ",
							" BDB_SetNodeJoinTimeout Function ",
							" C void BDB_SetNodeJoinTimeout(uint8_t timeOutInSec); ",
							" Description Sets the Node Join TimeOut ",
							" Parameters Param Description timeOutInSec timeout in seconds ",
							" Returns None ",
							" BDB_SetTCLKExchangeMethod Function ",
							" C void BDB_SetTCLKExchangeMethod(uint8_t exchangeMethod); ",
							" Description Sets the TCLK Exchnage Method BDB attribute ",
							" Parameters Param Description exchangeMethod type of the TCLK exchange method ",
							" Returns None ",
							" BDB_SetTCLKRetryMaxAttempts Function ",
							" C void BDB_SetTCLKRetryMaxAttempts(uint8_t attempts); ",
							" Description Sets the TCLK Retry Max Attempts BDB attribute ",
							" Parameters Param Description attempts number of max retry attempts ",
							" Returns None ",
							" BDB_SetTCRequireKeyExchange Function ",
							" C void BDB_SetTCRequireKeyExchange(bool requireKeyExchange); ",
							" Description Sets the Trust center Require key change or not of the joining device ",
							" Parameters Param Description requireKeyExchange true or false ",
							" Returns None ",
							" BDB_SetToulinkRole Function ",
							" C void BDB_SetToulinkRole(bool initiator); ",
							" Description Sets the Touchlink role ",
							" Parameters Param Description initiator true is initiator false means target ",
							" Returns None ",
							" BDB_ResetIB Function ",
							" C void BDB_ResetIB(void); ",
							" Description Resets the BDB Information base/Attributes ",
							" Parameters None ",
							" Returns None ",
							" BDB Generic APIs  BDB Generic APIs are listed here       Functions    void  BDB_EventsSubscribe(const BdbEventSubscriber_t *subscriber) BDB Subscribe to different events for application    void  BDB_FsmInit(void) Initialises the FSM component of the top level commissioning procedure    uint32_t  BDB_GetChannelMask(BDB_ChannelMaskType_t type) Gets the channel mask BDB attribute    void  BDB_Init(BDB_InitDone_t initDoneCallback) Resets the BDB Information base/Attributes    void  BDB_ResetIB(void) Sets the Node Join TimeOut    void  BDB_ResetToFactoryNew(bool leaveNetwork) BDB reset via local action    void  BDB_SetAllowTLResetToFN(bool allow) BDB set the device to allow to accept TL reset to FN    void  BDB_SetBdbNodeIsOnANetwork(bool onNetwork) Set the bdbNodeIsOnANetwork status    void  BDB_SetChannelMask(BDB_ChannelMaskType_t type uint32_t channelMask) Sets the channel mask BDB attribute      ",
							" BDB_EventsSubscribe Function ",
							" C void BDB_EventsSubscribe(const BdbEventSubscriber_t *subscriber); ",
							" Description BDB Subscribe to different events for application ",
							" Parameters Param Description subscriber Structure listing functions for Events ",
							" Returns None ",
							" BDB_GetChannelMask Function ",
							" C uint32_t BDB_GetChannelMask(BDB_ChannelMaskType_t type); ",
							" Description Gets the channel mask BDB attribute ",
							" Parameters Param Description type type of the channel mask ",
							" Returns channelMask ",
							" BDB_Init Function ",
							" C void BDB_Init(BDB_InitDone_t initDoneCallback); ",
							" Description Initialises the BDB component ",
							" Parameters Param Description initDoneCallback callback after initialization ",
							" Returns None ",
							" BDB_ResetToFactoryNew Function ",
							" C void BDB_ResetToFactoryNew(bool leaveNetwork); ",
							" Description BDB reset via local action ",
							" Parameters Param Description leaveNetwork leave network before resetting to FN ",
							" Returns None ",
							" BDB_SetAllowTLResetToFN Function ",
							" C void BDB_SetAllowTLResetToFN(bool allow); ",
							" Description BDB set the device to allow to accept TL reset to FN ",
							" Parameters Param Description allow true ",
							" Returns None ",
							" BDB_SetChannelMask Function ",
							" C void BDB_SetChannelMask(BDB_ChannelMaskType_t type uint32_t channelMask); ",
							" Description Sets the channel mask BDB attribute ",
							" Parameters Param Description type type of the channel mask channelMask channel mask value to set ",
							" Returns None ",
							" ZDO APIs  This page lists public API functions of the ZDO component  More detail on API usage on Using the ZDO component        Functions    void  ZDO_StartNetworkReq (ZDO_StartNetworkReq_t *req) Performs network formation for coordinator and network join for router or end device    void  ZDO_ResetNetworkReq (ZDO_ResetNetworkReq_t *req) Resets the stack without sending any commands to the network    void  ZDO_MgmtNwkUpdateNotf (ZDO_MgmtNwkUpdateNotf_t *nwkParams) notify - update notification parameters    void  ZDO_ZdpReq (ZDO_ZdpReq_t *zdpReq) Sends a ZDP request field    void  ZDO_GetLqiRssi (ZDO_GetLqiRssi_t *lqiRssi) Requests for LQI and RSSI    void  ZDO_GetParentAddr (NodeAddr_t *parentAddr) Retrieves parent's short and extended addresses    void  ZDO_GetChildrenAddr (ZDO_GetChildrenAddr_t *childrenAddr) Retrieves children's short and extended addresses    void  ZDO_SetTxPowerReq (ZDO_SetTxPowerReq_t *req) Sets Tx power    ZDO_NwkStatus_t  ZDO_GetNwkStatus (void)Returns the network status    void  ZDO_GetNeibTable (ZDO_Neib_t *table) Retrieves the neighbor table    void  ZDO_SleepReq (ZDO_SleepReq_t *req) Puts the device into the sleep mode    void  ZDO_WakeUpInd (void) Sleep timer wake up indication    void  ZDO_WakeUpReq (ZDO_WakeUpReq_t *req) Forces the stack to wake up from the sleep mode      ZDO_SetChannel (uint8_t channel)Sets channel to ZDO information base    ZDO_Status_t  ZDO_StartSyncReq (void) Starts sending sync requests (polling the parent)      Stops sending sync requests (polling the parent)    void  ZDO_BindIndication (ZDO_BindInd_t *bindInd) Indicates that a new binding has been added to the local binding table    void  ZDO_UnbindIndication (ZDO_UnbindInd_t *unbindInd) Indicates that a certain binding has been removed from the local binding table    void  ZDO_ResolveAddrReq (ZDO_ResolveAddrReq_t *req) Determines the missing short address corresponding to the given extended address or the missing extended address corresponding to the given short address      ",
							" ZDO_BindIndication Function ",
							" C void ZDO_BindIndication(ZDO_BindInd_t *bindInd); ",
							" Description Indicates that a new binding has been added to the local binding table The function must be implemented by the application (the body may be left empty) The function is called by the stack when a ZDP binding request initiated either by a remote device or by the local device is executed (a new binding entry is added) When the APS_BindReq() function is called to add a new entry to the local binding table the indication function is not called ",
							" Parameters Param Description bindInd ZDO bind indication parameters structure pointer For details go to ZDO_BindInd_t declaration ",
							" Returns None ",
							" ZDO_GetChildrenAddr Function ",
							" C void ZDO_GetChildrenAddr(ZDO_GetChildrenAddr_t *childrenAddr); ",
							" Description Retrieves children's short and extended addresses The function gets the address information of all node's children including unauthenticated children The information is retrieved from the neighbor table and is written to the dedicated static variable given in the argument The following code example demonstrates a typical usage of the function: static NodeAddr_t childAddrTable[CS_MAX_CHILDREN_AMOUNT - CS_MAX_CHILDREN_ROUTER_AMOUNT]; static ZDO_GetChildrenAddr_t children = { childrenCount = CS_MAX_CHILDREN_AMOUNT - CS_MAX_CHILDREN_ROUTER_AMOUNT childrenTable = childAddrTable }; ZDO_GetChildrenAddr( children); int actualNumberOfChildren = children childrenCount; While initializing the structure for storing information about children set the childrenCount field to the maximum number of entries in the table After the ZDO_GetChildrenAddr() function is executed the value of this field will equal the actual number of children ",
							" Parameters Param Description childrenAddr Determines the parameters of the request ",
							" Returns None ",
							" ZDO_GetLqiRssi Function ",
							" C void ZDO_GetLqiRssi(ZDO_GetLqiRssi_t *lqiRssi); ",
							" Description Requests for LQI and RSSI This function requests LQI and RSSI for a remote node whose address is contained in ZDO_GetLqiRssi_t-nodeAddr If called for an unknown node (i e with no link established to it) will return zeros ",
							" Parameters Param Description lqiRssi Determines the parameters of the request ",
							" Returns None ",
							" ZDO_GetNeibTable Function ",
							" C void ZDO_GetNeibTable(ZDO_Neib_t *table); ",
							" Description Retrieves the neighbor table The function writes the contents of the neighbor table to the buffer specified by a pointer to it Note that not all entries of the neighbor table are included namely only neighbors with RELATIONSHIP_PARENT RELATIONSHIP_CHILD and RELATIONSHIP_NONE_OF_ABOVE relationships are included (in addtition this implies that unauthenticated children's information is not retrieved) The space for the buffer shall be allocated at compile time i e a variable for the buffer shall be static The following code example demonstrates a typical way to call the function: static ZDO_Neib_t neighborTable[CS_NEIB_TABLE_SIZE]; // Buffer for the neighbor table ZDO_GetNeibTable(neighborTable); ",
							" Parameters Param Description table neighbor table ",
							" Returns None ",
							" ZDO_GetNwkStatus Function ",
							" C ZDO_NwkStatus_t ZDO_GetNwkStatus(void); ",
							" Description Returns the network status The function returns the network status ",
							" Parameters None ",
							" Returns ZDO_IN_NETWORK_STATUS - device is in the network ZDO_OUT_NETWORK_STATUS - device is out of the network ",
							" ZDO_GetParentAddr Function ",
							" C void ZDO_GetParentAddr(NodeAddr_t *parentAddr); ",
							" Description Retrieves parent's short and extended addresses The function gets the short address and the extended address of the current node's parent Addresses' values are written to the corresponding fields of the argument The information is retrieved from the neighbor table ",
							" Parameters Param Description parentAddr Determines the parameters of the request ",
							" Returns None ",
							" ZDO_MgmtNwkUpdateNotf Function ",
							" C void ZDO_MgmtNwkUpdateNotf(ZDO_MgmtNwkUpdateNotf_t * nwkParams); ",
							" Description Indicates network parameters update The function shall be implemented by the application It is called by the stack to signal certain network-related updates The argument's fields contain indication of the event which caused the update (see possible values of ZDO_MgmtNwkUpdateNotf_t-status field) as well as additional information concerned with the update Example cases when the function is called include changing of network parameters resolving address/PANID conflict rejoining the network attaching new child and child loss Child loss notification is issued only in the case of the end device child A router is not considered a child after its parent receives the first Link status frame from the router From that moment no notification is issued on the router's parent in case the router leaves the network But if the parent has not yet received any Link status frames from its router child and the router leaves the notification is raised on the parent as usual Notification statuses: Accessed via the ZDO_MgmtNwkUpdateNotf_t-status field - for detailed info on possible status codes see ref network_notf ",
							" Parameters Param Description nwkParams Describes the reason of network update and new parameters' values ",
							" Returns None ",
							" ZDO_ResetNetworkReq Function ",
							" C void ZDO_ResetNetworkReq(ZDO_ResetNetworkReq_t *req); ",
							" Description Resets the stack without sending any commands to the network The function resets the stack to the default state All internal values and buffers including the neighbor table are reset to iniatl state No data is send to the network so the ex-parent of the node does not receive any notifications and is not able to find out child node's reset immediately Response statuses: Accessed via the ZDO_ResetNetworkConf_t-status field of the callback's argument -ZDO_SUCCESS_STATUS (0x00) - the request has been executed successfully n -NWK_INVALID_REQUEST_STATUS (0xC2) - NWK reset cannpt be performed (all stack layers are reset during ZDO reset) ",
							" Parameters Param Description req Determines the parameters of the request ",
							" Returns None ",
							" ZDO_ResolveAddrReq Function ",
							" C void ZDO_ResolveAddrReq(ZDO_ResolveAddrReq_t *req); ",
							" Description Determines the missing short address corresponding to the given extended address or the missing extended address corresponding to the given short address The function sends a ZDP request: either an IEEE address ZDP request if the extended address should be determined or a short address ZDP request if the short address should be determined The callback function reports the result of ZDP request execution If the request has completed successfully the requested addressing info is provided in the argument The function is called by the stack in several cases when one element in a pair of short and extended addresses of the same device is unknown These cases include sending a data request when soome information about destination is lacking: -APS_EXT_ADDRESS or -APS_NO_ADDRESS (send to bound devices) addressing modes are used but the short address is not known; short address addressing is used and link key security is used but the extended address to find out the link key is not known The stack also checks if the extended address is known when it receives an encrypted frame Response statuses: Accessed via the ZDO_ResolveAddrConf_t-status field of the ZDO_ResolveAddrReq_t-ZDO_ResolveAddrConf callback's argument -ZDO_SUCCESS_STATUS (0x00) - the requested short or extended address has been successfully determined -ZDO_INVALID_REQUEST_STATUS (0x80) - the address resolving module is disabled n Any of error codes reported by the ZDO_ZdpReq() function ",
							" Parameters Param Description req request structure to pass attribute id ",
							" Returns None ",
							" ZDO_SetChannel Function ",
							" C void ZDO_SetChannel(uint8_t channel); ",
							" Description Sets channel to ZDO information base This function sets channel to ZDO information base ",
							" Parameters Param Description channel channel to be set ",
							" Returns None ",
							" ZDO_SetTxPowerReq Function ",
							" C void ZDO_SetTxPowerReq(ZDO_SetTxPowerReq_t *req); ",
							" Description Sets Tx power Response statuses: Accessed via the ZDO_SetTxPowerConf_t-status field of callback's argument -ZDO_SUCCESS_STATUS (0x00) - the request executed successfully n -ZDO_FAIL_STATUS (0x07) - the request failed due to incorrect parameters or because the MAC layer is not ready or the device is not in the network ",
							" Parameters Param Description req Determines the parameters of the request ",
							" Returns None ",
							" ZDO_SleepReq Function ",
							" C void ZDO_SleepReq(ZDO_SleepReq_t *req); ",
							" Description Puts the device into the sleep mode The duration of the sleep period is determined by the -CS_END_DEVICE_SLEEP_PERIOD parameter If CS_END_DEVICE_SLEEP_PERIOD is 0 then the device will sleep infinitely and could be waken up by a hardware interrupt only Note that CS_END_DEVICE_SLEEP_PERIOD is also used by the parent to track the state of the child Response statuses: Accessed via the ZDO_SleepConf_t-status field of the ZDO_SleepReq_t:ZDO_SleepConf callback's argument -ZDO_SUCCESS_STATUS (0x00) - operation has completed successfully and the node will be put into the sleeping mode after the callback function returns -ZDO_BUSY_STATUS (0x04) - the ZDO component is processing a transaction and turning to the sleeping mode cannot be done -ZDO_INVALID_REQUEST_STATUS (0x80) - the node is already going to the sleeping mode ",
							" Parameters Param Description req sleep request parameters ",
							" Returns None ",
							" ZDO_StartNetworkReq Function ",
							" C void ZDO_StartNetworkReq(ZDO_StartNetworkReq_t *req); ",
							" Description Performs network formation for coordinator and network join for router or end device This function makes a request for starting a network Before calling this function a device cannot participate in network interactions with other nodes If node type is the coordinator a new network is created while nodes of the router or the end device type search for and join an existing network Before calling the function make sure that certain node and network parameters affecting the result of a network start are set correctly Node parameters include extended address (#CS_UID) short address (#CS_NWK_ADDR) if static addressing scheme is used and device type (#CS_DEVICE_TYPE) Network parameters are comprised of channel mask (#CS_CHANNEL_MASK) channel page (#CS_CHANNEL_PAGE) extended PANID (#CS_EXT_PANID) and maximum network depth(#CS_MAX_NETWORK_DEPTH) Special attention should be given to security options Note that for a coordinator extended PANID must be always set to a notzero value In the case of a router or an end device it may equal 0 which will cause joining to the first suitable network while a nonzero value makes it possible to join only a network which PANID equal the specified value The argument's ZDO_StartNetworkConf field must contain a pointer to a callback function typically named ZDO_StartNetworkConf() Upon successful request completion ZDO_SUCCESS_STATUS is returned Successful netwrok join will also cause a notification of obtained parent node via ZDO_MgmtNwkUpdateNotf() function reporting ZDO_CHILD_JOINED_STATUS anchor StartNwkStatuses Response statuses: Accessed via the ZDO_StartNetworkConf_t-status field of the ZDO_StartNetworkReq_t-ZDO_StartNetworkConf callback's argument -ZDO_SUCCESS_STATUS (0x00) - network start has been completed successfully the node is now in the network -ZDO_AUTHENTICATION_FAIL_STATUS (0x09) - authentication has failed after joining a secured network (due to absent link key no response from the TC in time fail in SKKE procedure etc ) -NWK_STARTUP_FAILURE_STATUS (0xC4) - the coordinator has failed to perform active scanning (intended to detect other networks and select a non-conflicting short PANID) -NWK_NO_NETWORKS_STATUS (0xCA) - no suitable parents have been detected when joining via association or potential parents are found but joining to them has been unsuccessful -NWK_NOT_PERMITTED_STATUS (0xC3) - not suitable parents have been detected when rejoining the network (extended PANID is known or static addressing mode is used) or potential parents are found but rejoining them has been unsuccessful -MAC_NO_BEACON_STATUS (0xEA) - no devices have been detected: no beacons have been received during scanning ",
							" Parameters Param Description req Determines the network parameters for join and formation ",
							" Returns None ",
							" ZDO_StartSyncReq Function ",
							" C ZDO_Status_t ZDO_StartSyncReq(void); ",
							" Description Starts sending sync requests (polling the parent) The function turns on auto polling mechanism if it was turned off by ZDO_StopSyncReq() before The stack starts sending polling requests to the parent automatically So if the parent node receives some data frames for the node when the node is sleeping the node will automatically request for those data frames stored by its parent when it wakes up The function should be used only on end devices which are able to sleep and with -CS_RX_ON_WHEN_IDLE set to false The latter implies that radio is being switched on only for a certain period of time when the stack sends data and waits for a reply ",
							" Parameters None ",
							" Returns ZDO_SUCCESS_STATUS (0x00) - operation completed successfully ZDO_INVALID_REQUEST_STATUS (0x80) - sync requests are already started ",
							" ZDO_StopSyncReq Function ",
							" C ZDO_Status_t ZDO_StopSyncReq(void); ",
							" Description Stops sending sync requests (polling the parent) The function turns off auto polling mechanism The stack stops sending polling requests to the parent automatically So if the parent node receives data frames for the node when the node is sleeping the node will not automatically request for those data frames stored by its parent In this case synchronization with the parent can be done manually by sending NWK_SyncReq() This can be useful if the application does dot want a node to perform any actions after it wakes up and wants to control fully data flow to end devices The function should be used only on end devices which are able to sleep and with -CS_RX_ON_WHEN_IDLE set to false The latter implies that radio is being switched on only for a certain period of time when the stack sends data and waits for a reply ",
							" Parameters None ",
							" Returns ZDO_SUCCESS_STATUS (0x00) - operation completed successfully ZDO_INVALID_REQUEST_STATUS (0x80) - sync requests are already stopped ",
							" ZDO_UnbindIndication Function ",
							" C void ZDO_UnbindIndication(ZDO_UnbindInd_t *unbindInd); ",
							" Description Indicates that a certain binding has been removed from the local binding table The function must be implemented by the application (the body may be left empty) The function is called by the stack when a ZDP unbinding request initiated either by a remote device or by the local device is executed (a binding entry is removed) When the APS_UnbindReq() function is called to remove an entry from the local binding table the indication function is not called ",
							" Parameters Param Description unbindInd ZDO Unbind indication parameters structure pointer For details go to ZDO_UnbindInd_t declaration ",
							" Returns None ",
							" ZDO_WakeUpInd Function ",
							" C void ZDO_WakeUpInd(void); ",
							" Description Sleep timer wake up indication This function is called after wake up due to a sleep timer When the function is entered the stack is already fully operational ",
							" Parameters None ",
							" Returns None ",
							" ZDO_WakeUpReq Function ",
							" C void ZDO_WakeUpReq(ZDO_WakeUpReq_t *req); ",
							" Description Forces the stack to wake up from the sleep mode This function should be used by the application to wake up the stack in case the wake up occured not due to the sleep timer but rather due to an external interrupt In this case when the callback for the interrupt is being executed the stck is not yet ready to operate and the application shall issue an asynchronous wake up request via this function Response statuses: Accessed via the ZDO_WakeUpConf_t-status field of the ZDO_WakeUpReq_t-ZDO_WakeUpConf callback's argument -ZDO_SUCCESS_STATUS (0x00) - operation has completed successfully the stack is functional n -ZDO_INVALID_REQUEST_STATUS (0x80) - the stack is awake ",
							" Parameters Param Description req wakeup request parameters ",
							" Returns None ",
							" ZDO_ZdpReq Function ",
							" C void ZDO_ZdpReq(ZDO_ZdpReq_t *zdpReq); ",
							" Description Sends a ZDP request This function is used by an application to send a ZigBee Device Profile (ZDP) request Request's type is determined by the argument's ZDO_ZdpReq_t-reqCluster field Possible values are listed ref ZdpClustersList \"here\" Specific request's parameters are set in the req reqPayload field Response statuses: Accessed via the ZDO_ZdpRespFrame_t-status field of the ZDO_ZdpResp_t-respPayload field of the ZDO_ZdpReq_t-ZDO_ZdpResp callback's argument All requests -ZDO_SUCCESS_STATUS (0x00) - the request executed successfully n -ZDO_FAIL_STATUS (0x07) - unknown error occured n -ZDO_RESPONSE_WAIT_TIMEOUT_STATUS (0x02) - response has not been received in required time This status is not valid for the match descriptor request -ZDO_NOT_SUPPORTED_STATUS (0x84) - the requested feature is not supported by the destination node -ZDO_NOT_AUTHORIZED_STATUS (0x8D) - the node is not authorized to make such request n n Match descriptor request -ZDO_CMD_COMPLETED_STATUS (0x0D) - response timer has expired - not more responses for the current request will be processed Binding request -ZDO_NO_ENTRY_STATUS (0x88) - unbinding request is unsuccessful because the requested entry has not been found in the binding table -ZDO_TABLE_FULL_STATUS (0x8C) - the destination binding table is full -ZDO_INVALID_REQUEST_STATUS (0x80) - invalid parameters have been provided (endpoint ID is out of range incorrect destination addressing mode is used - APS_EXT_ADDRESS is expected etc ) Simple descriptor and complex descriptor requests -ZDO_INVALID_EP_STATUS (0x82) - the specified endpoint has not been found on the destination node End device binding request -ZDO_NOT_PERMITTED_STATUS (0x8B) - indicates that the coordinator has already received end device binding requests from two other devices and cannot process one more request ",
							" Parameters Param Description zdpReq Determines the parameters of the ZDP request ",
							" Returns None ",
							" NWK APIs  Functions to access NWK related parameters and features which might be useful in user application code       Functions    bool  NWK_AddGroup(const NWK_GroupAddr_t addr const NWK_GroupData_t data) Add new entry to the group table    DeviceType_t  NWK_GetDeviceType(void) Getting a device type parameter value    const ExtAddr_t  NWK_GetExtByShortAddress(const ShortAddr_t shortAddr) Searching a extended address by the short address    ExtPanId_t  ExtPanId_t NWK_GetExtPanId(void) This function return a extended panid of network    Channel_t  Channel_t NWK_GetLogicalChannel(void) Current RF channel    Lqi_t  NWK_GetNeighborsLqi(NwkNeighbor_t const *const neighbor) Link quality indication for given neighbor    PanId_t  NWK_GetPanId(void) This function return a short panid of network    ShortAddr_t  NWK_GetParentShortAddr(void) This function return a short address of parent    ShortAddr_t  NWK_GetShortAddr(void) This function return a short address that is allocated by parent    NWK_GroupTableSize_t  NWK_GroupCapacity(void) Get remaining groups capacity    bool  NWK_IsGroupMember(const NWK_GroupAddr_t addr const NWK_GroupData_t data) Check group address and data in the group table    NWK_GroupTableEntry_t*  NWK_NextGroup(NWK_GroupTableEntry_t *entry) Get first or next non-free entry from the groups table    bool  NWK_RemoveAllGroups(const NWK_GroupData_t data) Remove all group entries with given group data    bool  NWK_RemoveGroup(const NWK_GroupAddr_t addr const NWK_GroupData_t data) Remove group entries from the group table      ",
							" NWK_AddGroup Function ",
							" C bool NWK_AddGroup(const NWK_GroupAddr_t addr const NWK_GroupData_t data); ",
							" Description Add new entry to the group table ",
							" Parameters Param Description addr address of group Valid range 0x0000 data value linked to group Valid range 0x01 ",
							" Returns 'true' if entry is added successfully otherwise 'false' ",
							" NWK_GetDeviceType Function ",
							" C DeviceType_t NWK_GetDeviceType(void); ",
							" Description Getting a device type parameter value ",
							" Parameters None ",
							" Returns device type parameter value ",
							" NWK_GetExtByShortAddress Function ",
							" C const ExtAddr_t* NWK_GetExtByShortAddress(const ShortAddr_t shortAddr); ",
							" Description Searching a extended address by the short address ",
							" Parameters Param Description shortAddr a short address ",
							" Returns Pointer to the extended address in the address map c NULL if the extended address is not found ",
							" NWK_GetExtPanId Function ",
							" C ExtPanId_t NWK_GetExtPanId(void); ",
							" Description This function return a extended panid of network ",
							" Parameters None ",
							" Returns extended panid or 0 ",
							" NWK_GetLogicalChannel Function ",
							" C Channel_t NWK_GetLogicalChannel(void); ",
							" Description Current RF channel ",
							" Parameters None ",
							" Returns None ",
							" NWK_GetNeighborsLqi Function ",
							" C Lqi_t NWK_GetNeighborsLqi(NwkNeighbor_t const *const neighbor); ",
							" Description Link quality indication for given neighbor ",
							" Parameters Param Description neighbor pointer to a entry of neighbor in the neighbor table ",
							" Returns LQI of received frames from a neighbor ",
							" NWK_GetPanId Function ",
							" C PanId_t NWK_GetPanId(void); ",
							" Description This function return a short panid of network ",
							" Parameters None ",
							" Returns short panid or 0xFFFF ",
							" NWK_GetParentShortAddr Function ",
							" C ShortAddr_t NWK_GetParentShortAddr(void); ",
							" Description This function return a short address of parent ",
							" Parameters None ",
							" Returns Short address of parent device or NWK_NO_SHORT_ADDR ",
							" NWK_GetShortAddr Function ",
							" C ShortAddr_t NWK_GetShortAddr(void); ",
							" Description This function return a short address that is allocated by parent ",
							" Parameters None ",
							" Returns Short address of this node or NWK_NO_SHORT_ADDR ",
							" NWK_GroupCapacity Function ",
							" C NWK_GroupTableSize_t NWK_GroupCapacity(void); ",
							" Description Get remaining groups capacity ",
							" Parameters None ",
							" Returns number of free entries in the group table ",
							" NWK_IsGroupMember Function ",
							" C bool NWK_IsGroupMember(const NWK_GroupAddr_t addr const NWK_GroupData_t data); ",
							" Description Check group address and data in the group table ",
							" Parameters Param Description addr address of group Valid range 0x0000 data value linked to group Valid range 0x01 If data is equal to NWK_ANY_GROUP_DATA that means any enties with given group address ",
							" Returns 'true' if pair addr and data is found in the group table otherwise 'false' ",
							" NWK_NextGroup Function ",
							" C NWK_GroupTableEntry_t* NWK_NextGroup(NWK_GroupTableEntry_t *entry); ",
							" Description Get first or next non-free entry from the groups table ",
							" Parameters Param Description entry address of the current entry or NULL to get the first entry ",
							" Returns pointer to the next non-free entry or NULL if no more entries exist ",
							" NWK_RemoveAllGroups Function ",
							" C bool NWK_RemoveAllGroups(const NWK_GroupData_t data); ",
							" Description Remove all group entries with given group data ",
							" Parameters Param Description data value linked to group Valid range 0x01 If data is equal to NWK_ANY_GROUP_DATA then remove all entries from table ",
							" Returns 'true' if any entry is removed successfully otherwise 'false' ",
							" NWK_RemoveGroup Function ",
							" C bool NWK_RemoveGroup(const NWK_GroupAddr_t addr const NWK_GroupData_t data); ",
							" Description Remove group entries from the group table ",
							" Parameters Param Description addr address of group Valid range 0x0000 data value linked to group Valid range 0x01 If data is equal to NWK_ANY_GROUP_DATA then remove all entries with given group address ",
							" Returns 'true' if any entry is removed successfully otherwise 'false' ",
							" CS APIs  Functions for controlling Configuration Server parameters        Functions    void  CS_ReadParameter (CS_MemoryItemId_t parameterId void *memoryPtr) Gets the value of the parameter specified by its ID and writes it to the provided address in memory    void  CS_WriteParameter (CS_MemoryItemId_t parameterId const void *parameterValue) Sets a value of a certain Configuration Server parameter specified by its ID    void  CS_GetMemory (CS_MemoryItemId_t memoryId void **memoryPtr) Gets a pointer to the memory allocated for a specific internal structure      ",
							" CS_GetMemory Function ",
							" C void CS_GetMemory(CS_MemoryItemId_t memoryId void **memoryPtr); ",
							" Description Gets a pointer to the memory allocated for a specific internal structure ingroup cs_functions The function is used to obtain a pointer to the memory identified by a special value The memory is allocated by the stack for certain internal buffers and tables For example this function can be employed to get the contents of bidning and routing tables APS key-pair set and other tables For some of these objects there is the API in BitCloud; the application must use such API rather than this function to access the contents of a buffer In case the API is absent the application may use this function to observe the memory occupied by the buffer but is restricted to use the pointer obtained with the function to write data to the memory or the memory may become corrupted The function should be provided with an address of a pointer variable which will be assigned to the starting point of the memory ",
							" Parameters Param Description memoryId and ID of a parameter or a specific part of the memory memoryPtr a pointer to which a starting address of the memory is written ",
							" Returns None ",
							" CS_ReadParameter Function ",
							" C void CS_ReadParameter(CS_MemoryItemId_t parameterId void *memoryPtr); ",
							" Description Gets the value of the parameter specified by its ID and writes it to the provided address in memory ingroup cs_functions The function reads the value of a ConfigServer parameter specified by its ID A parameter ID is a constant which name can be obtained by adding \"_ID\" suffix to the name of the parameter For example the identifier of the CS_NWK_PANID parameter is CS_NWK_PANID_ID The function copies the value to the location in memory specified by the second argument For example reading the extended address of the device is performed this way: ExtAddr_t ownExtAddr; CS_ReadParameter(CS_UID_ID ownExtAddr); ",
							" Parameters Param Description parameterId the ID of the parameter to be read memoryPtr a pointer to which the parameter's value is written ",
							" Returns None ",
							" CS_WriteParameter Function ",
							" C void CS_WriteParameter(CS_MemoryItemId_t parameterId const void *parameterValue); ",
							" Description Sets a value of a certain Configuration Server parameter specified by its ID The function assigns a new value to the specified Configuration Server parameter The value is copied from the addres specified by the second argument The first pargument is the parameter's identifier formed by adding \"_ID\" suffix to the parameter's name For example a specific value may be set to own extended address in the following way: ExtAddr_t ownExtAddr = 0x0123456789ABCDEF; CS_WriteParameter(CS_UID_ID ownExtAddr); ",
							" Parameters Param Description parameterId the ID of the parameter being written parameterValue the pointer to the parameter's new value ",
							" Returns None ",
							" System Environment APIs  API functions of the System Environment component        Functions    void  SYS_SubscribeToEvent (SYS_EventId_t id SYS_EventReceiver_t *recv) Subscribe a receiver to an event The same receiver may be subscribed to multiple events by calling this function several times    void  SYS_UnsubscribeFromEvent (SYS_EventId_t id SYS_EventReceiver_t *recv) Unsubscribe a receiver from an event    void  SYS_PostEvent (SYS_EventId_t id SYS_EventData_t data) Post an event to be delivered to all subscribed receivers    bool  SYS_IsEventDeliverable (SYS_EventId_t id) Check if event have at least one subscriber    bool  SYS_IsEventSubscriber (SYS_EventId_t id SYS_EventReceiver_t *recv) Check if the specified receiver is subscribed to an event    void  SYS_ClearEvents (void) Clear the events    bool  SYS_MutexLock (SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner) Makes the asynchronous request to lock the mutex    bool  SYS_MutexUnlock (SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner) Unlocks a mutex using synchronous request    bool  SYS_IsMutexLocked (SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner) Checks whether mutex is locked    INLINE void  SYS_PostTask (SYS_TaskId_t taskId) Posts a task to the task manager which is later processed by the task handler of the corresponding stack layer    bool  SYS_RunTask (void) This function is called by the stack or from the main() function to process tasks    SYS_InitStatus_t  SYS_SysInit (void) Initializes the microcontroller and the radio chip    static uint16_t  SYS_GetRandomNumber (void) Generates a random two-bytes number    uint16_t  SYS_GetNormalizedRandomNumber (uint16_t upperLimit) Generates a random two-bytes number normalized by given upper limit    int  SYS_GetRandomSequence (uint8_t *buffer unsigned long size) Generates a sequence of random numbers and copies them into the buffer    INLINE uint16_t  SYS_Crc16Ccitt (uint16_t initValue uint8_t byte) Calculates CRC using CRC-16-CCITT algorithm      ",
							" SYS_Initialize Function ",
							" C void SYS_Initialize( void *data ) ",
							" Description This function initializes all modules in the system including any drivers services middleware and applications ",
							" Returns None ",
							" SYS_ClearEvents Function ",
							" C void SYS_ClearEvents(void); ",
							" Description Clear the events ",
							" Parameters None ",
							" Returns None ",
							" SYS_Crc16Ccitt Function ",
							" C INLINE uint16_t SYS_Crc16Ccitt(uint16_t initValue uint8_t byte) ",
							" Description Calculates CRC using CRC-16-CCITT algorithm ingroup sys ",
							" Parameters Param Description initValue CRC initial value byte next byte to calculate CRC ",
							" Returns calculated CRC value ",
							" SYS_GetNormalizedRandomNumber Function ",
							" C uint16_t SYS_GetNormalizedRandomNumber(uint16_t upperLimit); ",
							" Description Generates a random two-bytes number normalized by given upper limit ingroup sys Generation of a random number is based on the seed value created in ZDO with the use of the radio (if the radio supports such mechanism) The stack creates the seed value on startup and updates it periodically later on ",
							" Parameters Param Description upperLimit The upper limit of random number ",
							" Returns s A normalized random number in the range 0x000 - upper limit ",
							" SYS_GetRandomNumber Function ",
							" C static inline uint16_t SYS_GetRandomNumber(void) ",
							" Description Generates a random two-bytes number Generation of a random number is based on the seed value created in ZDO with the use of the radio (if the radio supports such mechanism) The stack creates the seed value on startup and updates it periodically later on ",
							" Parameters None ",
							" Returns s A random number in the range 0x000 - 0xFFFF ",
							" SYS_GetRandomSequence Function ",
							" C int SYS_GetRandomSequence(uint8_t *buffer unsigned long size); ",
							" Description Generates a sequence of random numbers and copies them into the buffer ingroup sys The function uses the same mechanism as the SYS_GetRandomNumber() function but creates the specified number of random bytes ",
							" Parameters Param Description buffer The buffer to hold generated random data size The number of bytes of random data to compute and store in the buffer ",
							" Returns 0 - indicates successful completion ",
							" SYS_IsEventDeliverable Function ",
							" C bool SYS_IsEventDeliverable(SYS_EventId_t id); ",
							" Description Check if event have at least one subscriber ingroup sys ",
							" Parameters Param Description id event ID ",
							" Returns result ",
							" SYS_IsEventSubscriber Function ",
							" C bool SYS_IsEventSubscriber(SYS_EventId_t id SYS_EventReceiver_t *recv); ",
							" Description Check if the specified receiver is subscribed to an event ingroup sys ",
							" Parameters Param Description id event ID recv receiver's descriptor ",
							" Returns result ",
							" SYS_IsMutexLocked Function ",
							" C bool SYS_IsMutexLocked(SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner); ",
							" Description Checks whether mutex is locked ingroup sys ",
							" Parameters Param Description mutex the pointer to a locked mutex owner the pointer to owner's structure Memory for this structure can be reused after this operation ",
							" Returns true - the mutex is locked by the owner false - the mutex is not locked by the owner ",
							" SYS_MutexLock Function ",
							" C bool SYS_MutexLock(SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner); ",
							" Description Makes the asynchronous request to lock the mutex ingroup sys DECLARE_MUTEX(aesMutex); SYS_MutexOwner_t sspOwnerOfAesMutex = { SYS_MutexLockConf = callback}; if ( SYS_MutexLock( aesMutex sspOwnerOfAesMutex)) return; // Wait the callback function // Work with the resource which is locked by the mutex ",
							" Parameters Param Description mutex the pointer to created mutex owner the pointer to owner's structure Memory for this structure is allocated by the owner Memory can't be reused by owner the mutex is locked by the owner ",
							" Returns true - the locking operation finishes successfuly otherwise false - the operation was postponed The SYS_MutexLockConf() will be called when the mutex is locked for this owner ",
							" SYS_MutexUnlock Function ",
							" C bool SYS_MutexUnlock(SYS_Mutex_t *const mutex SYS_MutexOwner_t *const owner); ",
							" Description Unlocks a mutex using synchronous request ote The mutex will be unlocked immediately ingroup sys ",
							" Parameters Param Description mutex the pointer to a locked mutex owner the pointer to owner's structure Memory for this structure can be reused after this operation ",
							" Returns true - the unlocking operation finishes successfuly otherwise false - the mutex is not locked by the owner ",
							" SYS_PostEvent Function ",
							" C void SYS_PostEvent(SYS_EventId_t id SYS_EventData_t data); ",
							" Description Post an event to be delivered to all subscribed receivers ingroup sys ",
							" Parameters Param Description id event ID data associated data that will be passed to callback functions of event's receivers ",
							" Returns None ",
							" SYS_PostTask Function ",
							" C INLINE void SYS_PostTask(SYS_TaskId_t taskId) ",
							" Description Posts a task to the task manager which is later processed by the task handler of the corresponding stack layer A task is processed in the SYS_RunTask() function ",
							" Parameters Param Description taskId ID of the posted task The application's ID is ::APL_TASK_ID IDs of the tasks are listed in the SYS_TaskId enum Each task has its own priority and is called only if there is no any task with higher priority A handler is called when respective task can be run Each task has its own task handler Correspondence between tasks and handlers is listed below: n HAL HAL_TaskHandler() n BSP BSP_TaskHandler() n MAC_PHY_HWD MAC_PHY_HWD_TaskHandler() n MAC_HWI MAC_HWI_TaskHandler() n ZGP ZGP_TaskHandler() n NWK NWK_TaskHandler() n ZDO ZDO_TaskHandler() n APS APS_TaskHandler() n APL APL_TaskHandler() n ",
							" Returns None ",
							" SYS_RunTask Function ",
							" C void SYS_RunTask(void); ",
							" Description This function is called by the stack or from the c main() function to process tasks If several tasks have been posted by the moment of the function's call they are executed in order of layers' priority: a task of the layer with the highest priority is executed first ingroup sys ",
							" Parameters None ",
							" Returns None ",
							" SYS_SubscribeToEvent Function ",
							" C void SYS_SubscribeToEvent(SYS_EventId_t id SYS_EventReceiver_t *recv); ",
							" Description Subscribe a receiver to an event The same receiver may be subscribed to multiple events by calling this function several times ingroup sys ",
							" Parameters Param Description id event ID recv receiver's descriptor ",
							" Returns None ",
							" SYS_UnsubscribeFromEvent Function ",
							" C void SYS_UnsubscribeFromEvent(SYS_EventId_t id SYS_EventReceiver_t *recv); ",
							" Description Unsubscribe a receiver from an event ingroup sys ",
							" Parameters Param Description id event ID recv receiver's descriptor ",
							" Returns None ",
							" HAL APIs  HAL functions used for various purposes including functions that invoke hardware reset or read UID (extended address)         Functions    int  HAL_StartAppTimer (HAL_AppTimer_t *appTimer) Starts to count an interval (starts user timer)    int  HAL_StopAppTimer (HAL_AppTimer_t *appTimer) Stops the user timer    BcTime_t  HAL_GetSystemTime (void) Gets system time    void  HAL_WarmReset (void) Software reset       ",
							" HAL_GetSystemTime Function ",
							" C BcTime_t HAL_GetSystemTime(void); ",
							" Description Gets system time ",
							" Parameters None ",
							" Returns time since power up in millisecond 8 bytes ",
							" HAL_StartAppTimer Function ",
							" C int HAL_StartAppTimer(HAL_AppTimer_t *appTimer); ",
							" Description Starts to count an interval (starts user timer) ",
							" Parameters Param Description appTimer pointer to the timer structure HAL_APPTimer_t is type definition of BC_Timer_t ",
							" Returns 1 - pointer is NULL 0 - success ",
							" HAL_StopAppTimer Function ",
							" C int HAL_StopAppTimer(HAL_AppTimer_t *appTimer); ",
							" Description Stops the user timer ",
							" Parameters Param Description appTimer pointer to the timer structure ",
							" Returns 1 - there is no appTimer started or pointer is NULL 0 - success ",
							" ZCL APIs  All API functions of the ZCL component   OTAU  APIs ZCL functions used to implement Over-The-AIR upgrade  Security APIs ZCL functions used to start profile-specific security set security keys etc  Common APIs ZCL functions related to all clusters: functions for sending general and cluster-specific commands auxiliary APIs etc     ",
							" OTAU APIs  ZCL functions used to implement Over-The-AIR upgrade        Functions    ZCL_Cluster_t  ZCL_GetOtauClientCluster (void) Gets Otau's cluster    ZCL_Cluster_t  ZCL_GetOtauServerCluster (void) Gets Otau's cluster    ZCL_Status_t  ZCL_StartOtauService (ZCL_OtauInitParams_t *pInitParam ZCL_OtauStatInd_t ind) OTAU parametres initialization Start server discovery procedure on client side or start server    ZCL_Status_t  ZCL_StopOtauService (ZCL_OtauInitParams_t *pInitParam) Stop OTAU service (It is not implemented for client)    bool  ZCL_UnsolicitedUpgradeEndResp (ZCL_Addressing_t *addressing ZCL_OtauUpgradeEndResp_t *resp) The server may send an unsolicited Upgrade End Response command to the client This may be used for example if the server wants to synchronize the upgrade on multiple clients simultaneously    bool  ZCL_ImageNotifyReq (ZCL_Addressing_t *addressing ZCL_OtauImageNotify_t *resp) This is called by the server to send image notify command to client    void  ZCL_ConfigureOtauImageKey (void(*configureKeyDone)()) Configure OTAU image key      ",
							" ZCL_GetOtauClientCluster Function ",
							" C ZCL_Cluster_t ZCL_GetOtauClientCluster(void); ",
							" Description Gets Otau's cluster ingroup zcl_otau ",
							" Parameters None ",
							" Returns Otau's client cluster ",
							" ZCL_GetOtauServerCluster Function ",
							" C ZCL_Cluster_t ZCL_GetOtauServerCluster(void); ",
							" Description Gets Otau's cluster ingroup zcl_otau ",
							" Parameters None ",
							" Returns Otau's server cluster ",
							" ZCL_ImageNotifyReq Function ",
							" C bool ZCL_ImageNotifyReq(ZCL_Addressing_t *addressing ZCL_OtauImageNotify_t *resp); ",
							" Description This is called by the server to send image notify command to client ingroup zcl_otau ",
							" Parameters Param Description addressing pointer to structure with addressing information; resp pointer to image notify command payload ",
							" Returns true - data is sending false ",
							" ZCL_StartOtauService Function ",
							" C ZCL_Status_t ZCL_StartOtauService(ZCL_OtauInitParams_t *pInitParam ZCL_OtauStatInd_t ind); ",
							" Description OTAU parametres initialization Start server discovery procedure on client side or start server ingroup zcl_otau ",
							" Parameters Param Description pInitParam pointer to init structure ind indication for OTAU actions n (\"ind\" can be NULL if indication is not required ) ",
							" Returns Service status ",
							" ZCL_StopOtauService Function ",
							" C ZCL_Status_t ZCL_StopOtauService(ZCL_OtauInitParams_t *pInitParam); ",
							" Description Stop OTAU service (It is not implemented for client) ingroup zcl_otau ",
							" Parameters Param Description pInitParam pointer to init structure ",
							" Returns Service status ",
							" ZCL_UnsolicitedUpgradeEndResp Function ",
							" C bool ZCL_UnsolicitedUpgradeEndResp(ZCL_Addressing_t *addressing ZCL_OtauUpgradeEndResp_t *resp); ",
							" Description The server may send an unsolicited Upgrade End Response command to the client This may be used for example if the server wants to synchronize the upgrade on multiple clients simultaneously ingroup zcl_otau ",
							" Parameters Param Description addressing pointer to structure with addressing information; resp pointer to upgrade end response payload ",
							" Returns true - data is sending false ",
							" ZCL Security APIs  ZCL APIs to implement security related functionalities       Functions    void  ZCL_Get(ZCL_Get_t *req); Gets security parameters from ZCL    void  ZCL_ResetSecurity(void) Resets the security component of ZCL Resets the Key Establishment    void  ZCL_Set(ZCL_Set_t *req) Sets security parameters in ZCL    void  void ZCL_StartSecurityReq(ZCL_StartSecurityReq_t *req) Initializes the KE cluster discovers KE devices and performs key establishment      ",
							" ZCL_Get Function ",
							" C void ZCL_Get(ZCL_Get_t *req); ",
							" Description Gets security parameters from ZCL The function is used in profile-based applications to obtain various security parameters including link keys network key and Key Establishment cluster's data The type of security parameter obtained by the funciton depends on the value of the argument's c attr id field Possible values are given by the ZCL_SecurityAttrId_t enumeration type The function is executed synchronously Response statuses: Accessed via the argument's ZCL_Get_t-status field -ZCL_SUCCESS_STATUS (0x00) - operation completed successfully n -ZCL_INVALID_ATTRIBUTE_VALUE_STATUS (0x02) - the requested link key has not been found the provided endpoint is invalid or null certificate description is provided -ZCL_UNSUPPORTED_ATTRIBUTE_STATUS (0x86) - an unsupported value has been set to the argument's c attr id field ",
							" Parameters Param Description req request structure to pass attribute id ",
							" Returns None ",
							" ZCL_ResetSecurity Function ",
							" C void ZCL_ResetSecurity(void); ",
							" Description Resets the security component of ZCL Resets the Key Establishment cluster if Certicom security is used ",
							" Parameters None ",
							" Returns None ",
							" ZCL_Set Function ",
							" C void ZCL_Set(ZCL_Set_t *req); ",
							" Description Sets security parameters in ZCL The function is used in profile-based applications to set various security parameters including link keys network key and Key Establishment cluster's data The type of security parameter set by the funciton depends on the value of the argument's c attr id field Possible values are given by the ZCL_SecurityAttrId_t enumeration type The function is executed synchronously Response statuses: Accessed via the argument's ZCL_Set_t-status field -ZCL_SUCCESS_STATUS (0x00) - operation completed successfully n -ZCL_INVALID_ATTRIBUTE_VALUE_STATUS (0x02) - the provided endpoint is invalid or null certificate description is provided -ZCL_TC_PERMISSION_TABLE_ERROR_STATUS (0x03) - adding the device to the TC permission table has failed -ZCL_APS_LINK_KEY_ERROR_STATUS (0x04) - setting the link key via APS has failed n -ZCL_UNSUPPORTED_ATTRIBUTE_STATUS (0x86) - an unsupported value has been set to the argument's c attr id field ",
							" Parameters Param Description req request structure to pass attribute id ",
							" Returns None ",
							" ZCL_StartSecurityReq Function ",
							" C void ZCL_StartSecurityReq(ZCL_StartSecurityReq_t *req); ",
							" Description Initializes the KE cluster discovers KE devices and performs key establishment The function should be called in applications supporting the Key Establishment (KE) cluster to perform key establishment procedures The behavior is different on the trust center and common devices On the trust center: If the c remoteAddress field is set to 0 KE cluster will be initialized Key establishment will not be performed with any device If c remoteAddress is set to the extended address of a remote device the trust center will start key establishment with it On a common device: If the c remoteAddress field is set to 0 or to the extended address of the trust center the key establishment with the trust center will start Otherwise the request will eventually fail If Certicom Security is not used the success status is always reported Response statuses: Accessed via the ZCL_StartSecurityConf_t-status field of the ZCL_StartSecurityReq_t-ZCL_StartSecurityConf callback's argument All possible status codes are wrapped in the -ZCL_SecurityStatus_t enumeration ",
							" Parameters Param Description req request structure to pass attribute id ",
							" Returns None ",
							" ZCL Generic APIs  ZCL functions related to all clusters: functions for sending general and cluster-specific commands auxiliary APIs etc        Functions    void  ZCL_RegisterEndpoint (ZCL_DeviceEndpoint_t *endpoint) Registers an application endpoint    void  ZCL_UnregisterEndpoint (ZCL_DeviceEndpoint_t *endpoint) Unregisters an application endpoint    void  ZCL_ResetReq (void)Resets the ZCL component    ZCL_Status_t  ZCL_ReadAttributeValue (Endpoint_t endpointId ClusterId_t clusterId uint8_t clusterSide ZCL_AttributeId_t attrId uint8_t *attrType uint8_t *attrValue) Finds an attribute in ZCL and returns its value    ZCL_Status_t  ZCL_WriteAttributeValue (Endpoint_t endpointId ClusterId_t clusterId uint8_t clusterSide ZCL_AttributeId_t attrId uint8_t attrType uint8_t *attrValue) Finds an attribute in ZCL and rewrites its value by the new one    void  ZCL_AttributeReq (ZCL_Request_t *req) Sends a general ZCL command related to attributes to a remote device    void  ZCL_CommandReq(ZCL_Request_t *req) Sends a cluster-specific command    uint16_t  ZCL_GetAttributeLength (uint8_t typeId const uint8_t *value) This function returns bytes amount of a type by the type's ID     ZCL_Status_t  ZCL_PutNextElement (ZCL_NextElement_t *element) Adds an element to the outgoing command payload    ZCL_Status_t  ZCL_GetNextElement (ZCL_NextElement_t *element) Gets an element from the incoming command's payload       ",
							" ZCL_AttributeReq Function ",
							" C void ZCL_AttributeReq(ZCL_Request_t *req); ",
							" Description Sends a general ZCL command related to attributes to a remote device The function is used to read/write attributes from a remote device to report local attributes and to discover attributes supported by a particular cluster on a remote device Command's parameters include addressing information calback functions command's ID and the payload The payload may be formed via the ZCL_PutNextElement() function and an instance of ZCL_NextElement_t type The command may be used to perform actions on multiple attributes at a time; for example to read several attributes from a remote device Attribute related commands are usually send to specific short or extended addresses Sending such commands to bound devices (employing -APS_NO_ADDRESS mode) may not be as efficient because in case of responses from more than one device the ZCL component will process only the first one The callback function specified in the c req- ZCL_Notify field is called twice for most of the commands (excluding reporting): the first time to confirm that the command has been sent and the second time upon receiving the response command To differentiate these the callback's argument includes the ZCL_Notify_t-id field which equals -ZCL_APS_CONFIRM_ID in the first case and -ZCL_ZCL_RESPONSE_ID in the second Common uses of the function include sending the following commands (the command's ID listed below should be assigned to the c req- id field): -ZCL_READ_ATTRIBUTES_COMMAND_ID - reading remote attributes (obtaining values) -ZCL_WRITE_ATTRIBUTES_COMMAND_ID - writing remote attributes (assigning new values) -ZCL_REPORT_ATTRIBUTES_COMMAND_ID - reporting local attributes to remote devices (sending current attributes' values) -ZCL_DISCOVER_ATTRIBUTES_COMMAND_ID - discovering attributes of a remote device (obtaining data types and IDs of attributes supported by a particular cluster) -ZCL_DISCOVER_COMMANDS_RECEIVED_COMMAND_ID - discovering the commands received (obtaining the list of commands those can be received and processed -ZCL_DISCOVER_COMMANDS_GENEARATED_COMMAND_ID - discovering the commands generated (obtaining the list of commands those can be generated and processed -ZCL_DISCOVER_ATTRIBUTES_EXTENDED_COMMAND_ID - discovering attributes of a remote device (obtaining data types access control and IDs of attributes supported by a particular cluster) Response statuses: Accessed via the ZCL_Notify_t-status field of the callback function specified in the c req- ZCL_Notify field All commands -ZCL_SUCCESS_STATUS (0x00) - the request has been executed successfully (all attributes are written read or reported etc ) -ZCL_INSUFFICIENT_SPACE_STATUS (0x89) - the ZCL buffer is not big enough to hold the request's payload -ZCL_UNSUPPORTED_ATTRIBUTE_STATUS (0x86) - an attribute specified in the request is not supported by the destination node -ZCL_INVALID_FIELD_STATUS (0x85) - a command's field contains an incorrect value n -ZCL_INVALID_DATA_TYPE_STATUS (0x8D) - wrong attribute type has been specified n -ZCL_TIMEOUT_STATUS (0x94) - the response command is expected but has not been received in time: the timeout based on network parameters (such as max network depth) has occured Write attributes command -ZCL_WRITE_ATTRIBUTES_FAILURE_STATUS (0x0F) - not all attributes have been written; see individual statuses of attribute records to check each attribute Report attributes command -ZCL_UNREPORTABLE_ATTRIBUTE_STATUS (0x8C) - the requested attribute is not reportable ",
							" Parameters Param Description req command parameters ",
							" Returns None ",
							" ZCL_CommandReq Function ",
							" C void ZCL_CommandReq(ZCL_Request_t *req); ",
							" Description Sends a cluster-specific command The function sends a general cluster specific command The command's type is recognized according to the c req- id field Commands' IDs are defined in clusters' definition files which also contain all definition related to a particular cluster In addition to addressing information and command's ID eesential fields of the request parameters include the payload and the payload length The payload for each command is defined as a structure in the cluster's definition file The pointer to a properly configured instance of the command's payload shall be assigned to the c req- requestPayload field The callback function specified in the c req- ZCL_Notify field is called to indicate the status of the command's delivery (not a specific response for the command) If acknowledgment of the command's delivery is received the success status is reported in the callback A specific response to the command is processed by a special indication function registered for the command If a command does not imply a specific response the default response may be requested (to indicate that the command has been executed) To request the default response set the c req- defaultResponse field to -ZCL_FRAME_CONTROL_ENABLE_DEFAULT_RESPONSE To disable default response set c req- defaultResponse to -ZCL_FRAME_CONTROL_DISABLE_DEFAULT_RESPONSE Response statuses: The ZCL_Notify_t-status field of the callback function specified in the c req- ZCL_Notify field reports the status of command's transmission and acknowledgement -ZCL_SUCCESS_STATUS (0x00) - the command has been sent successfully and the acknowledgement has been received -ZCL_INSUFFICIENT_SPACE_STATUS (0x89) - the ZCL buffer is not big enough to hold the request's payload Error codes - all status codes returned by the APS_DataReq() function ",
							" Parameters Param Description req contains request descriptor ",
							" Returns None ",
							" ZCL_GetAttributeLength Function ",
							" C uint16_t ZCL_GetAttributeLength(uint8_t typeId const uint8_t *value); ",
							" Description This function returns bytes amount of a type by the type's ID ",
							" Parameters Param Description typeId type's ID value pointer to variable of typeId NULL means the maximum possible size ",
							" Returns None ",
							" ZCL_GetNextElement Function ",
							" C ZCL_Status_t ZCL_GetNextElement(ZCL_NextElement_t *element); ",
							" Description Gets an element from the incoming command's payload The function is used to simplify processing of responses fo general attributes related commands Such command may return information concerning several attributes in a single frame This function reads the next portion of information from the response payload To use the function configure an instance of ZCL_NextElement type The c element- payload field should be set to the response payload the c element- payloadLength to the reponse payload's length and the c element- id field to the ID of the response After calling this function the c element- content field may be casted to the appropriate response type (depending on the command's type); for example for read attributes response it is ZCL_ReadAttributeResp_t ",
							" Parameters Param Description element information about payload and element status of the operation: ::ZCL_SUCCESS_STATUS an element has been read successfully more elements are contained in the payload n ::ZCL_END_PAYLOAD_REACHED_STATUS (0xFD) an element has been read successfully and no more elements are left in the payload n ::ZCL_INVALID_PARAMETER_STATUS (0xFF) the argument is NULL ",
							" Returns None ",
							" ZCL_PutNextElement Function ",
							" C ZCL_Status_t ZCL_PutNextElement(ZCL_NextElement_t *element); ",
							" Description Adds an element to the outgoing command payload This function is used to simplify forming a correst payload for general commands (read/write attributes etc ) A single command may involve actions on several attributes and so the overall payload should contain pieces corresponding to each attribute The general idea is to provide a buffer for the payload and some content The function writes the content in a correct way to the buffer and calculate the overall payload length The buffer and the payload length are then passed as parameters to the ZCL_AttributeReq() function See the following example: ZCL_NextElement_t element; ZCL_ReadAttributeReq_t readAttrReqElement; ZCL_Request_t readAttrReq; uint8_t buffer[BUFFER_SIZE]; element payloadLength = 0; element payload = buffer; element id = ZCL_READ_ATTRIBUTES_COMMAND_ID; element content = readAttrReqElement; readAttrReqElement = ATTRIBUTE_ID1; //Set to the ID of the first attribute ZCL_PutNextElement( element); readAttrReqElement = ATTRIBUTE_ID2; //Set to the ID of the second attribute ZCL_PutNextElement( element); readAttrReq requestLength = element payloadLength; readAttrReq requestPayload = buffer; Note however that the usage may differ depending on a command's type ",
							" Parameters Param Description element information about payload and element status of the operation: ::ZCL_SUCCESS_STATUS (0x00) an element has been written to the payload successfully more elements can be added n ::ZCL_END_PAYLOAD_REACHED_STATUS (0xFD) an element has been written successfully and the payload is full no more elements can be added n ::ZCL_INVALID_PARAMETER_STATUS (0xFF) the argument is NULL ",
							" Returns None ",
							" ZCL_ReadAttributeValue Function ",
							" C ZCL_Status_t ZCL_ReadAttributeValue(Endpoint_t endpointId ClusterId_t clusterId uint8_t clusterSide ZCL_AttributeId_t attrId uint8_t *attrType uint8_t *attrValue); ",
							" Description Finds an attribute in ZCL and returns its valu The function may be used to obtain only local attributes To access an attribute on a remote device send a read attributes general cluster command via the ZCL_AttributeReq() function ",
							" Parameters Param Description endpointId endpoint on which cluster is registered clusterId cluster unique identifier clusterSide detects the cluster's side (client or server) attrId attribute unique identifier attrType pointer to attribute type determined and returned attrValue read out attribute value pointer Caller is responsible for providing big enough attrValue buffer ",
							" Returns The status of the operation: ::ZCL_SUCCESS_STATUS (0x00) - attribute value has been obtained successfully ::ZCL_UNSUPPORTED_ATTRIBUTE_STATUS (0x86) - the specified attribute is not supported ",
							" ZCL_RegisterEndpoint Function ",
							" C void ZCL_RegisterEndpoint(ZCL_DeviceEndpoint_t *endpoint); ",
							" Description Registers an application endpoint This function registers an application endpoint to make ZCL know which devices types are used by the application and which client and server clusters are supported ",
							" Parameters Param Description endpoint contains device descriptor ",
							" Returns None ",
							" ZCL_ResetReq Function ",
							" C void ZCL_ResetReq(void); ",
							" Description Resets the ZCL component ",
							" Parameters none ",
							" Returns None ",
							" ZCL_UnregisterEndpoint Function ",
							" C void ZCL_UnregisterEndpoint(ZCL_DeviceEndpoint_t *endpoint); ",
							" Description Unregisters an application endpoint This function unregisters an application endpoint ",
							" Parameters Param Description endpoint contains device descriptor ",
							" Returns None ",
							" ZCL_WriteAttributeValue Function ",
							" C ZCL_Status_t ZCL_WriteAttributeValue(Endpoint_t endpointId ClusterId_t clusterId uint8_t clusterSide ZCL_AttributeId_t attrId uint8_t attrType uint8_t *attrValue); ",
							" Description Finds an attribute in ZCL and rewrites its value by the new one The function may be used to set or rewrite only local attributes Affects attribute reporting on change To set a new value to an attribute on a remote device send a write attributes general cluster command via the ZCL_AttributeReq() function ",
							" Parameters Param Description endpointId endpoint on which cluster is registered clusterId cluster unique identifier clusterSide detects the cluster's side (client or server) attrId attribute unique identifier attrType type of the attribute to be set attrValue pointer to attribute value to be set ",
							" Returns The status of the operation: ::ZCL_SUCCESS_STATUS (0x00) - new value has been written successfully ::ZCL_UNSUPPORTED_ATTRIBUTE_STATUS (0x86) - the specified attribute is not supported ::ZCL_INVALID_PARAMETER_STATUS (0xFF) - NULL has been provided as the attribute's value ::ZCL_INVALID_DATA_TYPE_STATUS (0x8D) - the attribute's type is not the same as specified in the argument ::ZCL_READ_ONLY_STATUS (0x88) - the attribute's value cannot be changed because the attribute is read-only ",
							" ZGP APIs  ZGP functions related to commission control or get the information from the Green power device  Some functions that are not intended to be used by the application but internally by the stack only are not listed  See more information on API usage with code examples on ZGP device functionalities       Functions    void  ZGP_GetChannel(uint8_t *channel); Get zgp channel    void  ZGP_ResetReq(ZGP_ResetReq_t *reqParams) To raise ZGP reset Req    void  ZGP_SetChannel(uint8_t channel) set zgp channel    void  ZGP_UnsubscribeCommissioning(void) This unsubscription will be used to deregister a commissioning callback which will be used in Bidirectional commissioning    void  ZGPH_ProxyBasicInit(void) To initialize high proxy    ZGP_InfraDeviceStatus_t  ZGPH_PutLocalSinkInCommissioningMode(ZGP_SinkCommissioningModeOptions_t *sinkCommModeOptions uint8_t endPoint bool unicastComm) To put local sink in commissioning mode    void  ZGPH_SinkBasicInit(void) To initialize high sink    void  ZGPL_EnableDisableDirectMode(bool enabled) Enable/Disable direct mode to receive GPDF    void  ZGPL_FlushTxQueue(void) Flushout gpTxqueue    ZGP_Mode_t  ZGPL_GetDeviceMode(bool isProxy) To get the Device Mode (operational/Commissioning Mode)    void  ZGPL_GpdfDataRequest(ZGP_GpdfDataReq_t *zgpGpdfDataReq) GP-Data-Request(Raising from higher layer to dStub)    void  ZGPL_Init(void) Init low zgp    void  ZGPL_KeyDerivationHmac(ZGP_SinkTableEntry_t* sinkTableEntry uint8_t *derivedKey void (*keyedHashMacCb)(void)) To derive the GPD security key from network/group key This is mainly used by high sink     void  ZGPL_NvmTableInit(void) Initialize zgp NVM table    void  ZGPL_ResetTableEntry(void *entry ZGP_EntryType_t tableType) To reset all the parameters of the given entry to init value    void  ZGPL_SendDeviceAnnounceCmd(uint16_t nwkAddr uint64_t extAddr) Sending device annce    void  ZGPL_SendSimpleDescReq(ShortAddr_t addr uint8_t ep) To send simple descriptor request    void  ZGPL_SetDeviceMode(bool isProxy ZGP_Mode_t mode) To set the Device in operational/Commissioning Mode      ",
							" ZGP_GetChannel Function ",
							" C void ZGP_GetChannel(uint8_t *channel); ",
							" Description get zgp channel ",
							" Parameters Param Description channel pointer to get the channel value ",
							" Returns None ",
							" ZGP_ResetReq Function ",
							" C void ZGP_ResetReq(ZGP_ResetReq_t *reqParams); ",
							" Description To raise ZGP reset Req ",
							" Parameters Param Description reqParams reset request parameters structure ",
							" Returns None ",
							" ZGP_SetChannel Function ",
							" C void ZGP_SetChannel(uint8_t channel); ",
							" Description set zgp channel ",
							" Parameters Param Description channel pointer to the channel value ",
							" Returns None ",
							" ZGP_UnsubscribeCommissioning Function ",
							" C void ZGP_UnsubscribeCommissioning(void); ",
							" Description This unsubscription will be used to deregister a commissioning callback which will be used in Bidirectional commissioning ",
							" Parameters None ",
							" Returns None ",
							" ZGPH_ProxyBasicInit Function ",
							" C void ZGPH_ProxyBasicInit(void); ",
							" Description To initialize high proxy ",
							" Parameters None ",
							" Returns None ",
							" ZGPH_PutLocalSinkInCommissioningMode Function ",
							" C ZGP_InfraDeviceStatus_t ZGPH_PutLocalSinkInCommissioningMode(ZGP_SinkCommissioningModeOptions_t *sinkCommModeOptions uint8_t endPoint bool unicastComm); ",
							" Description To put local sink in commissioning mode ",
							" Parameters Param Description sinkCommModeOptions commissioning mode options endPoint Endpoint to be put in commissioning mode unicastComm unicast proxy comm mode ",
							" Returns status ",
							" ZGPL_ReadTableEntryFromNvm Function ",
							" C ZGP_ReadOperationStatus_t ZGPL_ReadTableEntryFromNvm(void *entryPtr ZGP_TableOperationField_t tableOperationField ZGP_GpdId_t *gpdId uint8_t endPoint); ",
							" Description To read a proxy/sink entry from NVm ",
							" Parameters Param Description entryPtr pointer to sink/proxy table entry tableOperationField filter fields for read operation gpdId pointer to address info endPoint GPD end point ",
							" Returns read status ",
							" ZGPH_SinkBasicInit Function ",
							" C void ZGPH_SinkBasicInit(void); ",
							" Description To initialize high sink ",
							" Parameters None ",
							" Returns None ",
							" ZGPH_SendProxyCommissioningModeCommand Function ",
							" C ZCL_Status_t ZGPH_SendProxyCommissioningModeCommand(zgpGpProxyCommModeOptions_t options uint16_t commissioningWindow uint8_t channel); ",
							" Description Send proxy commissioning mode command ",
							" Parameters Param Description options options field commissioningWindow commissioningWindow field channel channel field ",
							" Returns zcl status ",
							" ZGPH_SendReadAttribute Function ",
							" C ZCL_Status_t ZGPH_SendReadAttribute(uint16_t addr uint8_t dir uint16_t attrId); ",
							" Description Sending read attribute command ",
							" Parameters Param Description addr dst addr dir server to client / client to server attrId attribute id ",
							" Returns zcl status ",
							" ZGPH_SendProxyTableRequest Function ",
							" C ZCL_Status_t ZGPH_SendProxyTableRequest(uint16_t addr uint8_t options uint64_t gpdId_Ieee uint8_t ep uint8_t index); ",
							" Description Sending proxy table request ",
							" Parameters Param Description addr dst addr options options field gpdId_Ieee gpdId / IEEE addr ep ep for IEEE addr gpd index index field ",
							" Returns zcl status ",
							" ZGPH_SendSinkTableRequest Function ",
							" C ZCL_Status_t ZGPH_SendSinkTableRequest(uint16_t addr uint8_t options uint64_t gpdId_Ieee uint8_t ep uint8_t index); ",
							" Description Sending sink table request ",
							" Parameters Param Description addr dst addr options options field gpdId_Ieee gpdId / IEEE addr ep ep for IEEE addr gpd index index field ",
							" Returns zcl status ",
							" ZGPH_UpdateLocalSinkEntry Function ",
							" C ZGP_InfraDeviceStatus_t ZGPH_UpdateLocalSinkEntry(ZGP_SinkTableEntry_t *sinkEntry ZGP_SinkTableActions_t action); ",
							" Description To update sink entry locally on NVM based on the given action ",
							" Parameters Param Description sinkEntry entry fields(if proper security key(non-zero) is not provided this will be derived based on gpsSharedKeyType action EXTEND_SINKTABLE_ENTRY/REMOVE_GPD supported ",
							" Returns status ",
							" ZGPH_SetSinkGroupEntry Function ",
							" C ZGP_InfraDeviceStatus_t ZGPH_SetSinkGroupEntry(GroupAddr_t sinkGroupId); ",
							" Description : To set sink group id used for the GPD to be commissioned ",
							" Parameters Param Description sinkGroupId sink group Id to be set ",
							" Returns Status ",
							" ZGPH_SetGPDAssignedAlias Function ",
							" C ZGP_InfraDeviceStatus_t ZGPH_SetGPDAssignedAlias(ShortAddr_t gpdAssignedAlias); ",
							" Description To set assigned alias used for the GPD to be commissioned ",
							" Parameters Param Description gpdAssignedAlias The commissioned 16-bit ID to be used as alias for this GPD ",
							" Returns Status ",
							" ZGPH_GetSinkTableEntryByIndex Function ",
							" C bool ZGPH_GetSinkTableEntryByIndex(ZGP_SinkTableEntry_t *entry uint8_t index); ",
							" Description To read the sink entry based on the index ",
							" Parameters Param Description entry entry to be populated index entry index ",
							" Returns true - entry found false - entry not found ",
							" ZGPL_EnableDisableDirectMode Function ",
							" C void ZGPL_EnableDisableDirectMode(bool enabled); ",
							" Description Enable/Disable direct mode to receive GPDF ",
							" Parameters Param Description enabled true to enable false to disable ",
							" Returns None ",
							" ZGPL_DeleteTableEntryFromNvm Function ",
							" C bool ZGPL_DeleteTableEntryFromNvm(ZGP_TableOperationField_t filterField ZGP_GpdId_t *gpdId uint8_t endPoint); ",
							" Description To delete proxy/sink entry ",
							" Parameters Param Description tableOperationField table operation gpdId address info endPoint GPD end point ",
							" Returns true for successful operation false otherwise ",
							" ZGPL_TotalNonEmptyEntries Function ",
							" C uint8_t ZGPL_TotalNonEmptyEntries(bool isProxyTable); ",
							" Description To fetch the total no of non-empty entries This is mainly used by high sink/proxy while sending sink/proxy table response ",
							" Parameters Param Description isProxyTable true for proxy table false for sink table ",
							" Returns No of Non Empty Sink Table Entries ",
							" ZGPL_FlushTxQueue Function ",
							" C void ZGPL_FlushTxQueue(void); ",
							" Description Flushout gpTxqueue ",
							" Parameters None ",
							" Returns None ",
							" ZGPL_AddOrUpdateTableEntryOnNvm Function ",
							" C bool ZGPL_AddOrUpdateTableEntryOnNvm(void *entryPtr ZGP_TableUpdateAction_t action ZGP_EntryType_t tableType); ",
							" Description To add/update proxy/sink entry on NVM ",
							" Parameters Param Description entryPtr pointer to the entry to be operated action to be performed on the entry tableType proxy or sink entry ",
							" Returns true for successful operation false otherwise ",
							" ZGPL_GetDeviceMode Function ",
							" C ZGP_Mode_t ZGPL_GetDeviceMode(bool isProxy); ",
							" Description To get the Device Mode (operational/Commissioning Mode) ",
							" Parameters Param Description isProxy true if the device is proxy false for sink ",
							" Returns CurrentMode of Device ",
							" ZGPL_GpdfDataRequest Function ",
							" C void ZGPL_GpdfDataRequest(ZGP_GpdfDataReq_t *zgpGpdfDataReq); ",
							" Description GP-Data-Request(Raising from higher layer to dStub) ",
							" Parameters Param Description zgpGpdfDataReq request parameters ",
							" Returns None ",
							" ZGPL_Init Function ",
							" C void ZGPL_Init(void); ",
							" Description Init low zgp ",
							" Parameters None ",
							" Returns None ",
							" ZGPL_KeyDerivationHmac Function ",
							" C void ZGPL_KeyDerivationHmac(ZGP_SinkTableEntry_t* sinkTableEntry uint8_t *derivedKey void (*keyedHashMacCb)(void)); ",
							" Description To derive the GPD security key from network/group key This is mainly used by high sink ",
							" Parameters Param Description sinkTableEntry sink entry derivedKey key to be derived keyedHashMacCb callback function ",
							" Returns None ",
							" ZGPL_NvmTableInit Function ",
							" C void ZGPL_NvmTableInit(void); ",
							" Description Initialize zgp NVM table ",
							" Parameters None ",
							" Returns None ",
							" ZGPL_ResetTableEntry Function ",
							" C void ZGPL_ResetTableEntry(void *entry ZGP_EntryType_t tableType); ",
							" Description To reset all the parameters of the given entry to init value ",
							" Parameters Param Description entry table entry pointer tableType proxy or sink ",
							" Returns None ",
							" ZGPH_SendCmdInRawMode Function ",
							" C ZCL_Status_t ZGPH_SendCmdInRawMode(ZCL_Addressing_t *dstAddr bool dir uint8_t cmdId uint8_t payLoadLength uint8_t *payLoad); ",
							" Description Send ZGP cluster command in raw mode ",
							" Parameters Param Description addr dst addr dir server to client / client to server cmdId cluster cmd id payloadLength length of payload to be sent payload payload to be sent ",
							" Returns zcl status ",
							" ZGPL_SendDeviceAnnounceCmd Function ",
							" C void ZGPL_SendDeviceAnnounceCmd(uint16_t nwkAddr uint64_t extAddr); ",
							" Description Sending device annce ",
							" Parameters Param Description nwkAddr nwk addr to be placed in the device annce extAddr ext addr to be placed in the device annce ",
							" Returns None ",
							" ZGPL_SendSimpleDescReq Function ",
							" C void ZGPL_SendSimpleDescReq(ShortAddr_t addr uint8_t ep); ",
							" Description Sending simple descritor request ",
							" Parameters Param Description shortAddr addr of the node ep endpoint of the node ",
							" Returns None ",
							" ZGPL_SetDeviceMode Function ",
							" C void ZGPL_SetDeviceMode(bool isProxy ZGP_Mode_t mode); ",
							" Description To set the Device in operational/Commissioning Mode ",
							" Parameters Param Description isProxy is proxy or sink device mode operational/Commissioning ",
							" Returns None ",
							" ZGPL_IsValidSrcId Function ",
							" C bool ZGPL_IsValidSrcId(uint32_t srcId ZGP_FrameType_t frameType bool isPairingConfig); ",
							" Description To check whether the SrcID is valid or not considering the Frame Type ",
							" Parameters Param Description srcId GPD srcId frameType Maintanence Frame/Data Frame isPairingConfig srcId received in PairingConfig/Commissioning ",
							" Returns true if srcId is Valid false otherwise ",
							" ZGPL_IskeyValid Function ",
							" C bool ZGPL_IskeyValid(uint8_t *key); ",
							" Description To check whether the key is valid or not ",
							" Parameters Param Description  key ",
							" Returns true - valid false - invalid ",
							" ZGPL_GetAliasSourceAddr Function ",
							" C uint16_t ZGPL_GetAliasSourceAddr(ZGP_GpdId_t *gpdId); ",
							" Description To derive alias addr for the given srcId/Ieee addr ",
							" Parameters Param Description gpdId gpdId ",
							" Returns AliasAddr ",
							" ZGPL_CheckForDuplicate Function ",
							" C bool ZGPL_CheckForDuplicate(ZGP_LowDataInd_t *dStubDataInd); ",
							" Description check for duplicate packet ",
							" Parameters Param Description dstubDataInd dstub data indication ",
							" Returns true - non-duplicate packet false otherwise ",
							" ZGPL_ResetTableToFN Function ",
							" C void ZGPL_ResetTableToFN(void); ",
							" Description To reset all table entries on NVM ",
							" Parameters Param Description  None ",
							" Returns None ",
							" ZGPL_AddSinkGroupEntry Function ",
							" C bool ZGPL_AddSinkGroupEntry(ZGP_SinkTableEntry_t *currEntry ZGP_SinkGroup_t *groupEntry); ",
							" Description add sink group entry to the sink table entry ",
							" Paremeters currEntry - pointer to the entry to be added (or) extended groupEntry - sink group entry to be added ",
							" Returns None ",
							" ZGPL_SinkEntryIsPairingInfoEmpty Function ",
							" C bool ZGPL_SinkEntryIsPairingInfoEmpty(ZGP_SinkTableEntry_t *currEntry); ",
							" Description To check whether pairing info in the sink entry is empty or not ",
							" Parameters Param Description currEntry Proxy table entry address ",
							" Returns true - Pairing Info empty false - Pairing Infor non-empty ",
							" ZGPL_FrameCounterReadorUpdateOnNvm Function ",
							" C bool ZGPL_FrameCounterReadorUpdateOnNvm(uint32_t *frameCounter ZGP_TableOperationField_t tableOperationField ZGP_GpdId_t *gpdId uint8_t endPoint ",
							" Description To read/update frameCounter ",
							" Parameters Param Description frameCounter pointer to frameCounter tableOperationField filter field for frame counter operation gpdId address info endPoint GPD end point isUpdateOperation true for update false for read ",
							" Returns true for successful operation false otherwise ",
							" Components Data Structures ",
							" APS DataStructures ",
							" Endpoint_t typedef ",
							" C typedef uint8_t Endpoint_t; ",
							" Description The type for holding endpoint ID ",
							" APS_AddGroupReq_t Struct ",
							" C typedef struct { /** Endian \"[LE]\" The 16-bit address of the group being added */ GroupAddr_t groupAddress; /** The endpoint to which the given group is being added */ Endpoint_t endpoint; /** The confirm primitive as transaction result */ APS_AddGroupConf_t confirm; } APS_AddGroupReq_t; ",
							" Description struct APS_AddGroupReq_t apsmeGroup h \"aps h\" Parameters of the APS_AddGroupReq() function ",
							" APS_BindConf_t Struct ",
							" C typedef struct { // The status of the binding request See BindReqStatuses details APS_Status_t status; } APS_BindConf_t; ",
							" Description struct APS_BindConf_t apsmeBind h \"aps h\" The structure is used to report the result of a binding request Conforms to APSME-BIND confirm primitive ",
							" APS_BindReq_t Struct ",
							" C typedef struct { /** Endian \"[LE]\" The source IEEE address for the binding entry */ ExtAddr_t srcAddr; /** The source endpoint for the binding entry Valid range: 0x01-0xFE */ Endpoint_t srcEndpoint; /** Endian \"[LE]\" The identifier of the cluster on the source device * that is to be bound to the destination device */ ClusterId_t clusterId; /** The addressing mode for the destination address This parameter can take * a value from the following list: APS_GROUP_ADDRESS - 16-bit dst group is used to identify the destination group APS_EXT_ADDRESS - the destination node is identified with extended address; * dst unicast extAddr holds the extended address dst unicast endpoint holds the endpoint **/ APS_AddrMode_t dstAddrMode; /** Endian \"[LE]\" The destination address for the binding entry */ APS_DstBindAddr_t dst; /** The field to keep the result of the request*/ APS_BindConf_t confirm; } APS_BindReq_t; ",
							" Description struct APS_BindReq_t apsmeBind h \"aps h\" The structure used to hold parameters for APS_BindReq() A pointer to an instance of this type should be passed to APS_BindReq() function The structure conforms to the APSME-BIND request primitive defined in ZigBee specification ",
							" APS_DataConf_t Struct ",
							" C typedef struct { /** The status of the data request See ref DataReqStatuses \"details\" */ APS_Status_t status; /** Timestamp for the transmitted packet based on the local clock * as provided by the NWK layer */ uint32_t txTime; } APS_DataConf_t; ",
							" Description struct APS_DataConf_t apsdeData h \"aps h\" The structure for reporting the result of APS_DataReq() function A pointer to an instance of this type is received as an argument in a confirmation callback for APS_DataReq() request reporting the result of data transmission The structure definition follows APSDE-DATA confirm primitive described in ZigBee Specification r18 2 2 4 1 2 APSDE-DATA confirm page 27 ",
							" APS_DataInd_t struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { void *next; /* Service field for queue support */ #ifdef _ZAPPSI_ /* to be compatible with MAC service */ uint8_t requestId; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; #endif /* # _ZAPPSI_ */ } service; /** endcond **/ /** The addressing mode used to identify the destination * in the data frame that has been received * May take any non-reserved value from the following list: APS_NO_ADDRESS (0x00) - used for binding; set dstAddress and dstEndpoint APS_GROUP_ADDRESS (0x01) - used for group transmission; 16-bit group address should be specified in dstAddress; dstEndpoint is not set APS_SHORT_ADDRESS (0x02) - identifying the destination (unicast or broadcast) with a 16-bit short address specified * in dstAddress and the endpoint set in dstEndpoint APS_EXT_ADDRESS (0x03) - identifying the destination with a 64-bit extended address specified in dstAddress and the endpoint set in dstEndpoint 0x04 0xff - reserved values must not be used by the application*/ APS_AddrMode_t dstAddrMode; /** Endian \"[LE]\" The individual device address or group addressto which * the ASDU is directed Value size depends on the dstAddrMode parameter */ APS_Address_t dstAddress; /** The target endpoint on the local entity to which the ASDU is directed */ Endpoint_t dstEndpoint; /** The addressing mode for the source address used in this primitive * and of the APDU that has been received May possess any non-reserved value * from the following list: APS_SHORT_ADDRESS (0x02) - short address is used in srcAddress and srcEndpoint is specified APS_EXT_ADDRESS (0x03) - extended address is used in srcAddress and srcEndpoint is specified * */ APS_AddrMode_t srcAddrMode; /** Endian \"[LE]\" The individual device address of the entity from which * the ASDU has been received * Value type and size is depend of the srcAddrMode parameter */ APS_Address_t srcAddress; /** Endian \"[LE]\" Network address of previous hop from which the packet * received */ ShortAddr_t prevHopAddr; /** The number of the individual endpoint of the entity from * which the ASDU has been received */ Endpoint_t srcEndpoint; /** Endian \"[LE]\" The identifier of the profile from * which this frame originates */ ProfileId_t profileId; /** Endian \"[LE]\" The identifier of the received object */ ClusterId_t clusterId; /** The number of octets comprising the ASDU being indicated by the APSDE */ uint16_t asduLength; /** The set of octets comprising the ASDU being indicated by the APSDE */ uint8_t *asdu; /** The status of the incoming frame processing */ APS_Status_t status; /** APS_UNSECURED_STATUS=0xaf if the ASDU was received without any security APS_SECURED_NWK_KEY_STATUS=0xac if the received ASDU was secured with the NWK key APS_SECURED_LINK_KEY_STATUS=0xab if the ASDU was secured with a link key APS_SECURED_TRUST_CENTER_LINK_KEY_STATUS=0xb1 if the ASDU was secured with the trust center link key APS_SECURED_HASH_OF_TRUST_CENTER_LINK_KEY_STATUS=0xb2 if secured with hash of the trust center link key */ APS_Status_t securityStatus; /** The status of whether the NSDU is using security: TRUE = use * FALSE = doesn't use */ bool nwkSecurityStatus; /** The link quality indication delivered by the NLDE */ uint8_t linkQuality; /** Timestamp for the received packet based on the local clock * as provided by the NWK layer */ uint32_t rxTime; int8_t rssi; } APS_DataInd_t; ",
							" Description struct APS_DataInd_t apsdeData h \"aps h\" The structure for indication of data reception A pointer to an instance of this type is passed to a data indication callback registered for a given endpoint when the data is received destined to the endpoint The structure definition follows APSDE-DATA indication primitive described in Zigbee Specification r18 2 2 4 1 3 APSDE-DATA indication page 29 ",
							" APS_DataReq_t struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { void *next; /* Used for queue support */ #ifdef _ZAPPSI_ /* to be compatible with MAC service */ uint8_t requestId; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; #endif /* # _ZAPPSI_ */ ZDO_ResolveAddrReq_t resolveAddrReq; /* Used for address resolving */ } service; /** endcond **/ /** The addressing mode for identifying the destination of a data request * May take any non-reserved value from the following list: APS_NO_ADDRESS (0x00) - used for binding; set dstAddress and dstEndpoint APS_GROUP_ADDRESS (0x01) - used for group transmission; 16-bit group address should be specified in dstAddress; dstEndpoint is not set APS_SHORT_ADDRESS (0x02) - identifying the destination (unicast or broadcast) with a 16-bit short address specified * in dstAddress and the endpoint set in dstEndpoint APS_EXT_ADDRESS (0x03) - identifying the destination with a 64-bit extended address specified in dstAddress and the endpoint set in dstEndpoint 0x04 0xff - reserved values must not be used by the application */ APS_AddrMode_t dstAddrMode; /** * Endian \"[LE]\" The address of the individual device or group address * of the entity to which the ASDU is being transferred **/ APS_Address_t dstAddress; /** This parameter shall be present if and only if the DstAddrMode parameter * value is 0x02 or 0x03 and if present shall contain either the number of * individual endpoints of the entity to which the ASDU is being transferred * or the broadcast endpoint (0xff) */ Endpoint_t dstEndpoint; /** Endian \"[LE]\" The identifier of the profile for which * this frame is intended */ ProfileId_t profileId; /** Endian \"[LE]\" The identifier of the cluster for which * this frame is intended */ ClusterId_t clusterId; /** The endpoint on the request originator node from * which the data frame is being transferred */ Endpoint_t srcEndpoint; /** The number of octets comprising the ASDU to be transferred * The maximum length of an individual APS frame payload is given * as NsduLength-apscMinHeaderOverhead Assuming the possibility * of fragmentation a maximum-sized single ASDU consists of 256 such blocks **/ uint16_t asduLength; /** The set of octets comprising the ASDU to be transferred */ uint8_t *asdu; /** The transmission options for the ASDU to be transferred * See structure definition for details */ APS_TxOptions_t txOptions; #if defined _GREENPOWER_SUPPORT_ /* Alias usage by for the current frame */ bool useAlias; /* The source address to be used for this NSDU If the UseAlias parameter has a value of FALSE the AliasSrcAddr parameter is ignored */ ShortAddr_t aliasSrcAddr; /* The sequence number to be used for this NSDU If the UseAlias parameter has a value of FALSE the AliasSeqNumb parameter is ignored */ uint8_t aliasSeqNumber; #endif /*_GREENPOWER_SUPPORT_*/ /** The distance in hops that a transmitted frame will be allowed to * travel via the network*/ uint8_t radius; /** A pointer to a callback function called upon request * completion Must not be set to NULL */ void (*APS_DataConf)(APS_DataConf_t *conf); /** Confirm primitive passed to the callback and containing the results of request execution*/ APS_DataConf_t confirm; } APS_DataReq_t; ",
							" Description The structure represents parameters of data request i e the request for sending data across the network A pointer to an instance of the structure should to be passed as an argument to APS_DataReq() function The structure definition follows APSDE-DATA request primitive described in Zigbee Specification r18 2 2 4 1 1 APSDE-DATA request page 23 ",
							" APS_KeyHandle_t struct ",
							" C typedef struct { /** Key index */ APS_KeyPairIndex_t idx; /** Set of flags associated with key */ uint8_t flags; } APS_KeyHandle_t; ",
							" Description Type of cryptographic key handle ",
							" APS_RegisterEndpointReq_t Struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { void *next; /* Used for queue support */ bool noIndication; /* Disable indication to upper-layer */ } service; /** endcond **/ /** A pointer to a simple descriptor */ SimpleDescriptor_t *simpleDescriptor; /** A pointer to an indication callback function which is called when data is received addressed to * the endpoint; conforms to APSDE-DATA indication handler defined in ZigBee spec r19 2 2 4 1 3 1 page 30 */ void (*APS_DataInd)(APS_DataInd_t *ind); /** The status of endpoint registration; is written by the stack to report the result of the operation */ APS_Status_t status; } APS_RegisterEndpointReq_t; ",
							" Description struct APS_RegisterEndpointReq_t apsdeEndpoint h \"aps h\" Parameters of the APS_RegisterEndpointReq() function A pointer to an instance of this type shall be passed to APS_RegisterEndpointReq() function as an argument to register a new endpoint The structure contains simple descriptor configuration data indication callback pointer and the status field ",
							" APS_RemoveAllGroupsReq_t Struct ",
							" C typedef struct { /** The endpoint from which the group is being removed */ Endpoint_t endpoint; /** The confirm primitive as transaction result */ APS_RemoveAllGroupsConf_t confirm; } APS_RemoveAllGroupsReq_t; ",
							" Description struct APS_RemoveAllGroupsReq_t apsmeGroup h \"aps h\" Parameters of the APS_RemoveAllGroupsReq() function ",
							" APS_RemoveGroupReq_t Struct ",
							" C typedef struct { /** Endian \"[LE]\" The 16-bit address of the group being removed */ GroupAddr_t groupAddress; /** The endpoint at which the given group is being removed */ Endpoint_t endpoint; /** The confirm primitive containing the result of the function call */ APS_RemoveGroupConf_t confirm; } APS_RemoveGroupReq_t; ",
							" Description struct APS_RemoveGroupReq_t apsmeGroup h \"aps h\" Parameters of the APS_RemoveGroupReq() function ",
							" APS_RequestKeyReq_t Struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { /** Service field used for queue support */ QueueElement_t qelem; /** Request to send APS Update Device command */ ApsCommandReq_t commandReq; uint32_t ttl; bool transportKeyReceived; bool requestKeySent; } service; /** endcond **/ /** Endian \"[LE]\" The extended 64-bit address of the device to which * the request-key command should be sent */ ExtAddr_t destAddress; /** The type of key being requested: 0x01 = Network key 0x02 = Application key 0x04 = Trust Center Link Key */ APS_RequestKeyType_t keyType; /** Endian \"[LE]\" If the KeyType parameter indicates an application key * this parameter shall indicate an extended 64-bit address of a device that * shall receive the same key as the device requesting the key */ ExtAddr_t partnerAddress; /** Canfirmation parameters sa APS_RequestKeyConf_t */ APS_RequestKeyConf_t confirm; /** Callback function pointer as a handler of corresponding confirm primitive Must not be set to NULL */ void (*APS_RequestKeyConf)(APS_RequestKeyConf_t *conf); } APS_RequestKeyReq_t; ",
							" Description struct APS_RequestKeyReq_t apsmeRequestKey h \"aps h\" Parameters of APSME-REQUEST-KEY request primitive See ZigBee Specification r19 Table 4 24 page 465 ",
							" APS_Status_t Enum ",
							" C typedef enum { /** A request has been executed successfully */ APS_SUCCESS_STATUS = 0x00 /** IEEE 802 15 4-2006 Table 83 */ /** Valid values of the Association Status field */ APS_MAC_PAN_AT_CAPACITY_STATUS = 0x01 APS_MAC_PAN_ACCESS_DENIED_STATUS = 0x02 /** The supplied endpoint was equal to 0x00 or 0xff */ APS_INVALID_EP_STATUS = 0x82 /** A transmit request has failed since the ASDU is too large and fragmentation * is not supported */ APS_ASDU_TOO_LONG_STATUS = 0xa0 /** A received fragmented frame can not be defragmented currently */ APS_DEFRAG_DEFERRED_STATUS = 0xa1 /** A received fragmented frame can not be defragmented because the device * does not support fragmentation */ APS_DEFRAG_UNSUPPORTED_STATUS = 0xa2 /** APS is in a state when request's execution is impossible */ APS_ILLEGAL_REQUEST_STATUS = 0xa3 /** An APSME-UNBIND request has failed because the requested binding link does not * exist in the binding table */ APS_INVALID_BINDING_STATUS = 0xa4 /** An APSME-REMOVE-GROUP request has been issued with a group identifier * that is absent in the group table */ APS_INVALID_GROUP_STATUS = 0xa5 /** A parameter's value is invalid or out of range */ APS_INVALID_PARAMETER_STATUS = 0xa6 /** An APSDE-DATA request requesting acknowledged transmission has failed * because of no acknowledgement being received */ APS_NO_ACK_STATUS = 0xa7 /** An APSDE-DATA request with the destination addressing mode set to 0x00 * has failed because no devices are bound to this device */ APS_NO_BOUND_DEVICE_STATUS = 0xa8 /** An APSDE-DATA request with the destination addressing mode * set to 0x03 has failed because the corresponding short address has not been found * in the address map table */ APS_NO_SHORT_ADDRESS_STATUS = 0xa9 /** An APSDE-DATA request with the destination addressing mode set to 0x00 * has failed because the binding table is not supported on the device */ APS_NOT_SUPPORTED_STATUS = 0xaa /** An ASDU secured using a link key has been received */ APS_SECURED_LINK_KEY_STATUS = 0xab /** An ASDU secured using a network key has been received */ APS_SECURED_NWK_KEY_STATUS = 0xac /** An APSDE-DATA request requesting security has resulted in an error * during the corresponding security processing */ APS_SECURITY_FAIL_STATUS = 0xad /** An APSME-BIND request or APSME ADDGROUP request have been issued while the binding * table or the group table respectively is full */ APS_TABLE_FULL_STATUS = 0xae /** An unsecured ASDU has been received */ APS_UNSECURED_STATUS = 0xaf /** An APSME-GET request or APSMESET request has been issued with an * unknown attribute's identifier */ APS_UNSUPPORTED_ATTRIBUTE_STATUS = 0xb0 /** An ASDU secured using the trust center link key has been received */ APS_SECURED_TRUST_CENTER_LINK_KEY_STATUS = 0xb1 /** An ASDU secured using the trust center's link key's hash has been received */ APS_SECURED_HASH_OF_TRUST_CENTER_LINK_KEY_STATUS = 0xb2 /** An invalid or out-of-range parameter has been passed to a primitive from * the next higher layer */ APS_NWK_INVALID_PARAMETERS_STATUS = 0xC1 /** The next higher layer has issued a request that is invalid or cannot be * executed given the current state of the NWK layer */ APS_NWK_INVALID_REQUEST_STATUS = 0xC2 /** An NLME-JOIN request has been disallowed */ APS_NWK_NOT_PERMITTED_STATUS = 0xC3 /** An NLME-NETWORK-FORMATION request has failed to start a network */ APS_NWK_STARTUP_FAILURE_STATUS = 0xC4 /** A device with the address supplied to the NLMEDIRECT-JOIN request is * already present in the neighbor table of the device on which * the NLME-DIRECT-JOIN request has been issued */ APS_NWK_ALREADY_PRESENT_STATUS = 0xC5 /** An NLME-SYNC request has failed at the MAC layer */ APS_NWK_SYNC_FAILURE_STATUS = 0xC6 /** An NLME-JOIN-DIRECTLY request has failed because there the neighbor table is full */ APS_NWK_NEIGHBOR_TABLE_FULL_STATUS = 0xC7 /** An NLME-LEAVE request has failed because the device addressed in * the parameter list is not in the neighbor table of the issuing device */ APS_NWK_UNKNOWN_DEVICE_STATUS = 0xC8 /** An NLME-GET request or NLME-SET request has been issued with * an unknown attribute's identifier */ APS_NWK_UNSUPPORTED_ATTRIBUTE_STATUS = 0xC9 /** No networks has been detected after an NLME-JOIN request has been issued */ APS_NWK_NO_NETWORKS_STATUS = 0xCA /** Security processing has been attempted on an outgoing frame * and has failed because the frame counter has reached its maximum value */ APS_NWK_MAX_FRM_COUNTER_STATUS = 0xCC /** Security processing has been attempted on an outgoing frame * and has failed because no key was available with which to process it */ APS_NWK_NO_KEY_STATUS = 0xCD /** Security processing has been attempted on an outgoing frame * and has failed because the security engine produced erroneous output */ APS_NWK_BAD_CCM_OUTPUT_STATUS = 0xCE /** An attempt to discover a route has failed because of a lack of routing table's * or discovery table's capacity */ APS_NWK_NO_ROUTING_CAPACITY_STATUS = 0xCF /** An attempt to discover a route has failed owing to a reason other * than a lack of routing tables' capacity */ APS_NWK_ROUTE_DISCOVERY_FAILED_STATUS = 0xD0 /** An NLDE-DATA request has failed due to a routing * failure on the sending device */ APS_NWK_ROUTE_ERROR_STATUS = 0xD1 /** An attempt to send a broadcast frame or member mode multicast has failed * because there is no room in the broadcast transmission table */ APS_NWK_BT_TABLE_FULL_STATUS = 0xD2 /** An NLDE-DATA request has failed owing to a lack of buffered space */ APS_NWK_FRAME_NOT_BUFFERED_STATUS = 0xD3 /** IEEE 802 15 4-2006 Table 78 MAC enumerations description */ /** The frame counter purportedly applied by the originator of the * received frame is invalid */ APS_MAC_COUNTER_ERROR_STATUS = 0xDB /** The key purportedly applied by the originator of the received frame is * not allowed to be used with that frame type according to the key usage * policy of the recipient */ APS_MAC_IMPROPER_KEY_TYPE_STATUS = 0xDC /** The security level purportedly applied by the originator of the received * frame does not meet the minimum security level required/expected by * the recipient for that frame type */ APS_MAC_IMPROPER_SECURITY_LEVEL_STATUS = 0xDD /** The received frame was purportedly secured using security based on * IEEE Std 802 15 4-2003 though such security is not supported by this standard **/ APS_MAC_UNSUPPORTED_LEGACY_STATUS = 0xDE /** The security purportedly applied by the originator of the received frame * is not supported */ APS_MAC_UNSUPPORTED_SECURITY_STATUS = 0xDF /** The beacon was lost following a synchronization request */ APS_MAC_BEACON_LOSS_STATUS = 0xE0 /** A transmission could not take place due to activity on the channel * i e the CSMA-CA mechanism has failed */ APS_MAC_CHANNEL_ACCESS_FAILURE_STATUS = 0xE1 /** The GTS request has been denied by the PAN coordinator */ APS_MAC_DENIED_STATUS = 0xE2 /** The attempt to disable the transceiver has failed */ APS_MAC_DISABLE_TRX_FAILURE_STATUS = 0xE3 /** Either a frame resulting from processing has a length that is * greater than aMaxPHYPacketSize or a requested transaction is * too large to fit in the CAP or GTS */ APS_MAC_FRAME_TOO_LONG_STATUS = 0xE5 /** The requested GTS transmission has failed because the specified * GTS either does not have a transmit GTS direction or has not been defined */ APS_MAC_INVALID_GTS_STATUS = 0xE6 /** A request to purge an MSDU from the transaction queue was made using * an MSDU handle that was not found in the transaction table */ APS_MAC_INVALID_HANDLE_STATUS = 0xE7 /** A parameter in the primitive is either not supported or is out of * the valid range */ APS_MAC_INVALID_PARAMETER_STATUS = 0xE8 /** No acknowledgment was received after macMaxFrameRetries */ APS_MAC_NO_ACK_STATUS = 0xE9 /** A scan operation failed to find any network beacons */ APS_MAC_NO_BEACON_STATUS = 0xEA /** No response data were available following a request */ APS_MAC_NO_DATA_STATUS = 0xEB /** The operation failed because a 16-bit short address was not allocated */ APS_MAC_NO_SHORT_ADDRESS_STATUS = 0xEC /** A receiver enable request was unsuccessful because it could not be * completed within the CAP */ APS_MAC_OUT_OF_CAP_STATUS = 0xED /** A PAN identifier conflict has been detected and communicated * to the PAN coordinator */ APS_MAC_PAN_ID_CONFLICT_STATUS = 0xEE /** A coordinator realignment command has been received */ APS_MAC_REALIGNMENT_STATUS = 0xEF /** The transaction has expired and its information was discarded */ APS_MAC_TRANSACTION_EXPIRED_STATUS = 0xF0 /** There is no capacity to store the transaction */ APS_MAC_TRANSACTION_OVERFLOW_STATUS = 0xF1 /** The transceiver was in the transmitter enabled state when the receiver * was requested to be enabled */ APS_MAC_TX_ACTIVE_STATUS = 0xF2 /** The key purportedly used by the originator of the received frame is * not available or if available the originating device is not known * or is blacklisted with that particular key */ APS_MAC_UNAVAILABLE_KEY_STATUS = 0xF3 /** A SET/GET request was issued with the identifier of a PIB * attribute that is not supported */ APS_MAC_UNSUPPORTED_ATTRIBUTE_STATUS = 0xF4 /** A request to send data was unsuccessful because neither the source address * parameters nor the destination address parameters were present */ APS_MAC_INVALID_ADDRESS_STATUS = 0xF5 /** A receiver enable request was unsuccessful because it specified a number * of symbols that was longer than the beacon interval */ APS_MAC_ON_TIME_TOO_LONG_STATUS = 0xF6 /** A receiver enable request was unsuccessful because it could not be * completed within the current superframe and was not permitted to be * deferred until the next superframe */ APS_MAC_PAST_TIME_STATUS = 0xF7 /** The device was instructed to start sending beacons based on the * timing of the beacon transmissions of its coordinator but the device * is not currently tracking the beacon of its coordinator */ APS_MAC_TRACKING_OFF_STATUS = 0xF8 /** An attempt to write to a MAC PIB attribute that is in a table failed * because the specified table index was out of range */ APS_MAC_INVALID_INDEX_STATUS = 0xF9 /** There are some unscanned channels yet but there is no memory */ APS_MAC_LIMIT_REACHED_STATUS = 0xFA /** A SET/GET request was issued with the identifier of an attribute * that is read only */ APS_MAC_READ_ONLY_STATUS = 0xFB /** A request to perform a scan operation failed because the MLME was * in the process of performing a previously initiated scan operation */ APS_MAC_SCAN_IN_PROGRESS_STATUS = 0xFC /** The device was instructed to start sending beacons based on the timing of * the beacon transmissions of its coordinator but the instructed start time * overlapped the transmission time of the beacon of its coordinator */ APS_MAC_SUPERFRAME_OVERLAP_STATUS = 0xFD } APS_Status_t; ",
							" Description APS status values used in most of standard primives ",
							" APS_SwitchKeyReq_t Struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { /** Request to send APS Remove Device command */ ApsCommandReq_t commandReq; } service; /** endcond **/ /** Endian \"[LE]\" The extended 64-bit address of the device to * which the switch-key command is sent */ ExtAddr_t destAddress; /** A sequence number assigned to a network key by the Trust Center * and used to distinguish network keys */ uint8_t keySeqNumber; /** Confirm primitive as a parameter of the callback function */ APS_SwitchKeyConf_t confirm; /** Callback function pointer as a handler of corresponding * confirm primitive Must not be set to NULL */ void (*APS_SwitchKeyConf)(APS_SwitchKeyConf_t *conf); } APS_SwitchKeyReq_t; ",
							" Description struct APS_SwitchKeyReq_t apsmeSwitchKey h \"aps h\" Parameters of APSME-SWITCH-KEY request primitive See ZigBee Specification r19 Table 4 26 page 468 ",
							" APS_TransportKeyReq_t struct ",
							" C typedef struct { /** ref Endian \"[LE]\" * The extended 64-bit address of the destination device */ ExtAddr_t destAddress; /** cond SERVICE_FIELDS **/ struct { ApsCommandReq_t commandReq; /** Global internal state of APS Transport Key component */ enum { APS_TRANSPORT_KEY_BEGIN_STATE APS_TRANSPORT_KEY_CONFIRM_STATE APS_TRANSPORT_KEY_PROCESS_STATE } state; } service; /** endcond **/ /** The key being transported along with identification * and usage parameters */ APS_ReqTransportKeyData_t transportKeyData; /** Callback function pointer as a handler of corresponding * confirm primitive Must not be set to NULL */ void (*APS_TransportKeyConf)(APS_TransportKeyConf_t *conf); /** Confirm primitive as a parameter of the callback function */ APS_TransportKeyConf_t confirm; /** Identifies the type of key material that should be transported; * See ZigBee Specification r19 Table 4 12 page 452 */ APS_TransportKeyType_t keyType; } APS_TransportKeyReq_t; ",
							" Description struct APS_TransportKeyReq_t apsmeTransportKey h \"aps h\" Parameters of APSME-TRANSPORT-KEY request primitive See ZigBee Specification r19 4 4 3 1 page 451 ",
							" APS_UnregisterEndpointReq_t struct ",
							" C typedef struct { /* The endpoint which is to be unregistered */ Endpoint_t endpoint; /* The status of endpoint unregistration; is written by the stack to report the result * of the operation execution */ APS_Status_t status; } APS_UnregisterEndpointReq_t; ",
							" Description struct APS_UnregisterEndpointReq_t apsdeEndpoint h \"aps h\" Parameters of the APS_UnregisterEndpointReq() function ",
							" ApsBindingEntry_t typedef ",
							" C typedef APS_BindReq_t ApsBindingEntry_t; ",
							" Description struct ApsBindingEntry_t apsmeBind h \"aps h\" A type for a binding table entry ",
							" ExtAddr_t typedef ",
							" C typedef uint64_t ExtAddr_t; ",
							" Description Extended address type declaration ",
							" SimpleDescriptor_t Struct ",
							" C typedef struct PACK { /* ID of the endpoint within the node to which this description refers Applications shall only use endpoints 1-240 */ Endpoint_t endpoint; /* Profile that is supported on this endpoint */ ProfileId_t AppProfileId; /* Device description supported on this endpoint */ uint16_t AppDeviceId; /* Version of the device description supported on this endpoint */ uint8_t AppDeviceVersion : 4; /* Reserved */ uint8_t Reserved : 4; /* Number of input clusters supported on this endpoint If 0 the application input cluster list field shall not be included */ uint8_t AppInClustersCount; /* List of input clusters supported on this endpoint */ ClusterId_t* AppInClustersList; /* Number of output clusters supported on this endpoint If 0 the application output cluster list field shall not be included */ uint8_t AppOutClustersCount; /* List of output clusters supported on this endpoint */ ClusterId_t* AppOutClustersList; } SimpleDescriptor_t; ",
							" Description Simple Descriptor Mandatory for each endpoint present in the node ",
							" DeviceType_t enum ",
							" C typedef enum { DEVICE_TYPE_COORDINATOR = DEV_TYPE_COORDINATOR DEVICE_TYPE_ROUTER = DEV_TYPE_ROUTER DEVICE_TYPE_END_DEVICE = DEV_TYPE_ENDDEVICE } DeviceType_t; ",
							" Description Intended for specifying device role ",
							" BDB DataStructures ",
							" BDB_InvokeCommissioningReq t ",
							" C typedef struct { /** Commissioning options to be executed */ BDB_CommissioningMode_t mode; /** Parameters used in f b and touchlink Ignore if touchlink or finding and binding is not set in mode */ BDB_InitiatorReq_t* initiatorReq; /** Parameters of the confirm being returned in BDB_InvokeCommissioningConf() */ BDB_InvokeCommissioningConf_t confirm; /** The callback function to be called to confirm the request Must not be set to NULL */ void (*BDB_InvokeCommissioningConf)(BDB_InvokeCommissioningConf_t *conf); } BDB_InvokeCommissioningReq_t; ",
							" Description Describes the parameters of the BDB_InvokeCommissioningReq() function ",
							" BDB_InvokeCommissioningConf_t Struct ",
							" C typedef struct { BDB_CommissioningStatus_t status; } BDB_InvokeCommissioningConf_t; ",
							" Description Describes the parameters of the BDB_InvokeCommissioningConf() function ",
							" BDB_CommissioningStatus_t Enum ",
							" C typedef enum { // commissioning sub procedure is successful BDB_COMMISSIONING_SUCCESS // One of the commissioning sub-procedures has started but is not yet complete BDB_COMMISSIONING_IN_PROGRESS // The initiator is not address assignment capable during touchlink BDB_COMMISSIONING_NOT_AA_CAPABLE // A network has not been found during network steering or touchlink BDB_COMMISSIONING_NO_NETWORK // A node has not joined a network when requested during touchlink BDB_COMMISSIONING_TARGET_FAILURE // A network could not be formed during network formation BDB_COMMISSIONING_FORMATION_FAILURE // No response to an identify query command has been received during finding binding BDB_COMMISSIONING_NO_IDENTIFY_QUERY_RESPONSE // A binding table entry could not be created due to insufficient space in the binding table during finding binding BDB_COMMISSIONING_BINDING_TABLE_FULL // No response to a scan request inter-PAN command has been received during touchlink BDB_COMMISSIONING_NO_SCAN_RESPONSE // A touchlink (steal) attempt was made when a node is already connected to a centralized security network BDB_COMMISSIONING_NOT_PERMITTED // The Trust Center link key exchange procedure has failed attempting to join a centralized security network BDB_COMMISSIONING_TCLK_EX_FAILURE // Other Bitcloud defined statuses // The given commissioning is not supported BDB_COMMISSIONING_NOT_SUPPORTED } BDB_CommissioningStatus_t; ",
							" Description Describes the the status of its commissioning attempt Currently it specifies only spec specified values May be modified based on implementation requirement ",
							" BDB_ChannelMaskType_t enum ",
							" C typedef enum _BDB_ChannelMaskType_t { PRIMARY_CHANNEL_MASK SECONDARY_CHANNEL_MASK }BDB_ChannelMaskType_t; ",
							" Description Describes the channel mask used for set ",
							" BDB_CommissioningMode_t typedef ",
							" C typedef uint8_t BDB_CommissioningMode_t; ",
							" Description Values for BDB commissioningModes BDB_COMMISSIONING_TOUCHLINK 0 BDB_COMMISSIONING_NWK_STEERING 1 BDB_COMMISSIONING_NWK_FORMATION 2 BDB_COMMISSIONING_FINDING_BINDING 3 ",
							" BDB_NodeCommissioningCapability_t Struct ",
							" C typedef struct PACK _BDB_NodeCommissioningCapability_t { LITTLE_ENDIAN_OCTET(5 ( uint8_t nwkSteeringSupported : 1 uint8_t nwkFormationSupported : 1 uint8_t findingAndBindingSupported : 1 uint8_t touchlinkComissioningSupported : 1 uint8_t reserved : 4 )) } BDB_NodeCommissioningCapability_t; ",
							" Description specifies the commissioning capabilities of the node ",
							" BDB_ResetTargetCallback_t typedef ",
							" C typedef void (*ResetTargetCallback_t)(ResetTargetStatus_t status); ",
							" Description Describes the reset using Touchlink commissioning cluster callback typedef ",
							" ResetTargetStatus_t enum ",
							" C typedef enum ResetTargetStatus_t { /** Reset Target device is success */ RESET_TARGET_SUCCESS /** Reset Target device is failed */ RESET_TARGET_FAILURE }ResetTargetStatus_t; ",
							" Description Describes the resetToFactory defaults using Touchlink commissioning cluster status values ",
							" BdbEventSubscriber_t Struct ",
							" C typedef struct _BdbEventSubscriber_t { struct { void *next; }service; /* Indicates the device has been (re)connected to the network */ void (*connected)(void); /* Indicates the device has lost it connection to the network */ void (*disconnected)(void); /* Network Formation Completed with Status */ void (*networkFormationCompleted)(BDB_CommissioningStatus_t status); /* Indicates Network Steering is in progress either in network or not in network */ void (*SteeringNetwork)(void); /* Indicates steering completion */ void (*SteeringCompleted)(BDB_CommissioningStatus_t status); /* Indicates Touchlink scanning started */ void (*scanning)(void); /* Indicates Touchlink identifying the target */ void (*identifying)(void); /* Indicates joining during touchlink is in progress */ void (*joining)(void); /* Indicates scan request reception */ void (*scanIndication)(void); /* Requests the application to identify itself with the given timeout */ void (*identifyStartIndication)(uint16_t timeoutInSec); /* Requests the application to stop identifying itself */ void (*identifyStopIndication)(void); /* Requests the application to reset itself to factory defaults */ void (*ResetToFactoryDefaults)(void); /* Indicates that the device has been linked to a new network by the initiator */ void (*joinNetworkIndication)(uint16_t groupIdFirst uint16_t groupIdLast); /* Touchlink Complete with status */ void (*touchlinkCompleted)(BDB_CommissioningStatus_t status); /* Indication that the network settings of the device have been updated by the initiator */ void (*updateNetworkIndication)(void); /* Indicates Trust center exchange procedure started */ void (*tclkProcedureOngoing)(void); /* Indicates Trust center exchange procedure completed */ void (*tclkProcedureCompleted)(void); /* Indicates identify querying for finding and binding */ void (*querying)(void); /* Indicates identify query completed for finding and binding */ void (*queryingCompleted)(void); /*Indicates binding links adding ongoing after touchlinking*/ void (*addingBindingLinks)(void); /*Finding and binding completion with status*/ void (*findingBindingCompleted)(BDB_CommissioningStatus_t status); /*Finding and binding initiator mode completion*/ void (*findingBindingInitiatorModeCompleted)(void); } BdbEventSubscriber_t; ",
							" Description Describes the parameters of the BDB_EventsSubscribe () function ",
							" ZDO DataStructures ",
							" NodeAddr_t struct ",
							" C typedef struct PACK { ShortAddr_t shortAddr; // Short address ExtAddr_t extAddr; // Extended address } NodeAddr_t; ",
							" Description Information about the addresses of a device ",
							" ZDO_BindInd_t typedef ",
							" C typedef ZDO_BindReq_t ZDO_BindInd_t; ",
							" Description Declaration of ZDO Bind indication parameters structure For details go to ZDO_BindReq declaration ZB Specification extension ",
							" ZDO_GetChildrenAddr_t struct ",
							" C typedef struct { uint8_t childrenCount; // Number of children NodeAddr_t *childrenTable; // Pointer to the memory allocated for children information } ZDO_GetChildrenAddr_t; ",
							" Description Describes the parameters of the ZDO_ChildrenAddrReq() function ",
							" ZDO_GetLqiRssi_t struct ",
							" C typedef struct { ShortAddr_t nodeAddr; // Address of the requested node uint8_t lqi; /* Pointer to the memory allocated for LQI The range of the LQI value is from 0 to 255 */ int8_t rssi; /* Pointer to the memory allocated for RSSI The RSSI value range is different for various radio chips RF230A RF230B RF212: from -91 dBm to -7 dBm RF231: from -90 dBm to -7 dBm */ } ZDO_GetLqiRssi_t; ",
							" Description Describes the parameters of the ZDO_LqiRssiReq() function ",
							" ZDO_MatchDescReq_t Struct ",
							" C typedef struct PACK { /* NWK address for the request */ ShortAddr_t nwkAddrOfInterest; /* Profile ID to be matched at the destination */ ProfileId_t profileId; /* The number of Input Clusters provided for matching within the InClusterList */ uint8_t numInClusters; /* List of Input ClusterIDs to be used for matching; the InClusterList is the desired list to be matched by the Remote Device (the elements of the InClusterList are the supported output clusters of the Local Device) */ ClusterId_t inClusterList[MAX_REQUESTED_CLUSTER_NUMBER]; /* The number of Output Clusters provided for matching within OutClusterList */ uint8_t numOutClusters; /* List of Output ClusterIDs to be used for matching; the OutClusterList is the desired list to be matched by the Remote Device (the elements of the OutClusterList are the supported input clusters of the Local Device) */ ClusterId_t outClusterList[MAX_REQUESTED_CLUSTER_NUMBER]; } ZDO_MatchDescReq_t; ",
							" Description ZDO Match Descriptor request primitive allows to find remote devices supporting a specific simple descriptor match criterion Conforms to ZigBee spec r17 Table 2 50 page 105 ",
							" ZDO_MatchDescResp_t Struct ",
							" C typedef struct PACK { ShortAddr_t nwkAddrOfInterest; uint8_t matchLength; uint8_t matchList[MAX_REQUESTED_CLUSTER_NUMBER]; } ZDO_MatchDescResp_t; ",
							" Description ZDO Match Descriptor response structure parameters ",
							" ZDO_IeeeAddrReq_t Struct ",
							" C typedef struct PACK { /* NWK address that is used for IEEE address mapping */ ShortAddr_t nwkAddrOfInterest; /* Request type for this command: - SINGLE_RESPONSE_REQUESTTYPE - only the address of the target node is requested - EXTENDED_RESPONSE_REQUESTTYPE - addresses of target's child nodes are also requested */ uint8_t reqType; /* If the Request type for this command is Extended response the StartIndex provides the starting index for the requested elements of the associated devices list */ uint8_t startIndex; } ZDO_IeeeAddrReq_t; ",
							" Description This request is generated from a Local Device wishing to inquire as to the 64-bit IEEE address of the Remote Device based on their known 16-bit address The destination addressing on this command shall be unicast ",
							" ZDO_IeeeAddrResp_t Struct ",
							" C typedef struct PACK { /* 64-bit address for the Remote Device */ ExtAddr_t ieeeAddrRemote; /* 16-bit address for the Remote Device */ ShortAddr_t nwkAddrRemote; /* Count of the number of 16-bit short addresses to follow If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device this field shall be set to 0 If an error occurs or the RequestType in the request is for a Single Device Response this field shall not be included in the frame */ uint8_t numAssocDev; /* Starting index into the list of associated devices for this report If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device this field shall not be included in the frame If an error occurs or the RequestType in the request is for a Single Device Response this field shall not be included in the frame */ uint8_t startIndex; /* A list of 16-bit addresses one corresponding to each associated device to Remote Device The number of 16-bit network addresses contained in this field is specified in the NumAssocDev field If the RequestType in the request is Extended Response and there are no associated devices on the Remote Device this field shall not be included in the frame If an error occurs or the RequestType in the request is for a Single Device Response this field shall not be included in the frame*/ ShortAddr_t nwkAddrAssocDevList[ZDP_ADDR_LIST_SIZE]; } ZDO_IeeeAddrResp_t; ",
							" Description This command is generated by a Remote Device in response to an IEEE_addr_req command inquiring as to the 64-bit IEEE address of the Remote Device or the 64-bit IEEE address of an address held in a local discovery cache The destination addressing on this command shall be unicast ",
							" ZDO_MgmtNwkUpdateNotf_t struct ",
							" C typedef struct PACK { /* The parameter shows the notification status and can be: n ::ZDO_SUCCESS_STATUS n ::ZDO_INVALID_PARAMETERS_STATUS n ::ZDO_FAIL_STATUS n ::ZDO_RESPONSE_WAIT_TIMEOUT_STATUS n ::ZDO_NETWORK_STARTED_STATUS n ::ZDO_NETWORK_LEFT_STATUS n ::ZDO_NETWORK_LOST_STATUS n ::ZDO_CHILD_JOINED_STATUS n ::ZDO_CHILD_REMOVED_STATUS n ::ZDO_USER_DESCRIPTOR_UPDATE_STATUS n ::ZDO_STATIC_ADDRESS_CONFLICT_STATUS n ::ZDO_NWK_UPDATE_STATUS n ::ZDO_NO_KEY_PAIR_DESCRIPTOR_STATUS n For details see ref network_notf */ uint8_t status; union PACK { // Conflicting address ShortAddr_t conflictAddress; // ED scan result EDScan_t scanResult; // Network information updated NetworkInf_t nwkUpdateInf; // Information about joined device or failed to authenticate child event ChildInfo_t childInfo; // Addresses of removed device NodeAddr_t childAddr; // Extended address of updated device ExtAddr_t deviceExtAddr; }; } ZDO_MgmtNwkUpdateNotf_t; ",
							" Description The type used to pack information about network updates in an argument of ZDO_MgmtNwkUpdateNotf() function The struct of this type comprises information about certain network updates The type of the event is indicated by the ZDO_MgmtNwkUpdateNotf_t::status field Additional event data is provided by the fields of the unnamed union ",
							" ZDO_Neib_t struct ",
							" C typedef struct { ShortAddr_t shortAddr; // Short address of the node ExtAddr_t extAddr; // Extended address of the node DeviceType_t deviceType; // Device type of the node uint8_t lqi; // LQI value for the node int8_t rssi; // RSSI value for the node bool rxOnWhenIdle; // Idle portions of the node Relationship_t relationship; // Type of relationship between the current node and the neighbor node ExtPanId_t extPanId; // Extended PAN identifier of the node uint8_t logicalChannel; // Logical channel of the node uint8_t depth; // Network depth on the node i e the number of parent links from the node to the coordinator bool permitJoining; // Indicates whether the node permits joining devices not present in the network before bool potentialParent; // Indicates whether the node can serve as a parent for the current node } ZDO_Neib_t; ",
							" Description Describes neighbor table entry Neighbor table is an essential object involved in many network-related stack operations It is also used by a number of synchronous functions performing network control The neighbor table is filled on the network start procedure The stack maintains the table updating it upon receiving various network requests such as Link status frames leave requests child joining and loss etc ",
							" ZDO_NwkStatus_t enum ",
							" C typedef enum { ZDO_IN_NETWORK_STATUS // device is in the network ZDO_OUT_NETWORK_STATUS // device is out of the network } ZDO_NwkStatus_t; ",
							" Description List of network status ",
							" ZDO_ResetNetworkReq_t Struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { #ifdef _ZAPPSI_ void *next; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; /* to be compatible with MAC and SSP service */ uint8_t requestId; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; APS_ResetReq_t apsResetReq; } service; // Service field for internal use only should not be touched by user /** endcond **/ ZDO_ResetNetworkConf_t confParams; // Parameters of the confirm being returned in ZDO_ResetNetworkConf() void (*ZDO_ResetNetworkConf)(ZDO_ResetNetworkConf_t *conf); // The function called to confirm the request Must not be set to NULL } ZDO_ResetNetworkReq_t; ",
							" Description Describes the parameters of the ZDO_ResetNetworkReq() function ",
							" ZDO_ResolveAddrReq_t struct ",
							" C typedef struct _ZDO_ResolveAddrReq_t { /** cond SERVICE_FIELDS **/ struct { QueueElement_t next; } service; // Service field for internal use only should not be touched by user /** endcond **/ uint8_t reqSeqNo; uint8_t reqSeqNo; ZdoAddrResolvingReqState_t resolveAddrState; APS_AddrMode_t dstAddrMode; // The addressing mode for identifying the destination APS_Address_t dstAddress; // Address of device for which the resolving will be executed ZDO_ResolveAddrConf_t confirm; // Parameters of the confirm being rturned in ZDO_ResolveAddrConf() void (*ZDO_ResolveAddrConf)(ZDO_ResolveAddrConf_t *conf); // The function called to confirm the request } ZDO_ResolveAddrReq_t; ",
							" Description Describes the parameters of the ZDO_ResolveAddrReq() function ",
							" ZDO_SetTxPowerReq_t struct ",
							" C typedef struct { uint8_t txPower; /* Transmitter power to be set (dBm) Valid range is hardware-dependent: for AT86RF230 RF part it is from 0xEF to 0x03 (-17 to 3) For AT86RF212 RF part it is from 0xF5 to 0x0B (-11 to 11) */ void (* ZDO_SetTxPowerConf)(ZDO_SetTxPowerConf_t *conf); // The function called to confirm the request Must not be set to NULL ZDO_SetTxPowerConf_t confirm; // Parameters of the confirm being returned in ZDO_SetTxPowerConf() } ZDO_SetTxPowerReq_t; ",
							" Description Describes the parameters of the ZDO_SetTxPowerReq() function ",
							" ZDO_SleepReq_t struct ",
							" C typedef struct { #ifdef _ZAPPSI_ /** cond SERVICE_FIELDS **/ struct { void *next; /* to be compatible with MAC and SSP service */ uint8_t requestId; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; } service; // Service field for internal use only should not be touched by user #endif /* _ZAPPSI_ */ ZDO_SleepConf_t confirm; // Parameters of the confirm being returned in ZDO_SleepConf() void (*ZDO_SleepConf)(ZDO_SleepConf_t *conf); // The function called to confirm the request Must not be set to NULL } ZDO_SleepReq_t; ",
							" Description Describes the parameters of the ZDO_SleepReq() function ",
							" ZDO_StartNetworkReq_t Struct ",
							" C typedef struct { /** cond SERVICE_FIELDS **/ struct { void *next; /* to be compatible with MAC and SSP service */ uint8_t requestId; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; } service; // Service field for internal use only should not be touched by user /** endcond **/ ZDO_StartNetworkConf_t confirm; // Parameters of the confirm being returned in ZDO_StartNetworkConf() ShortAddr_t parent; // Known parent address (0xffff if unknown) /** The callback function to be called to confirm the request Must not be set to NULL */ void (*ZDO_StartNetworkConf)(ZDO_StartNetworkConf_t *conf); } ZDO_StartNetworkReq_t; ",
							" Description Describes the parameters of the ZDO_StartNetworkReq() function ",
							" ZDO_StartNetworkConf_t Struct ",
							" C typedef struct { uint8_t activeChannel; // Current channel on which the device has connected ShortAddr_t shortAddr; // Assigned short address PanId_t PANId; // Received short network PANId uint64_t extPANId; // Received extended PANId if it was not determined during startup ShortAddr_t parentAddr; // Parent short address //Resulting status of a network start operation //See StartNwkStatuses \"details\" */ ZDO_Status_t status; } ZDO_StartNetworkConf_t; ",
							" Description Describes the parameters of the ZDO_StartNetworkConf() function ",
							" ZDO_Status_t enum ",
							" C typedef enum { // The primitive has finished successfully ZDO_SUCCESS_STATUS = 0x00 // Wrong parameters were put into the primitive ZDO_INVALID_PARAMETERS_STATUS = 0x01 // Response waiting timer has expired Response is not received in time ZDO_RESPONSE_WAIT_TIMEOUT_STATUS = 0x02 // ZDO layer is busy and cannot execute the primitive ZDO_BUSY_STATUS = 0x04 // No network was found ZDO_NO_NETWORKS_STATUS = 0x05 // There is a network with the same extended PANID ZDO_EXTPANID_ALREADY_EXIST_STATUS = 0x06 // Unknown error ZDO_FAIL_STATUS = 0x07 ZDO_AUTHENTICATION_SUCCESS_STATUS = 0x08 // Authentication failed during network start ZDO_AUTHENTICATION_FAIL_STATUS = 0x09 ZDO_SECURITY_SUCCESS_STATUS = 0x0A ZDO_SECURITY_FAIL_STATUS = 0x0B ZDO_SECURITY_NOT_SUPPORTED_STATUS = 0x0C /* Indicates that command execution has finished For a match descriptor request the confirmation with this status is issued if the timeout for ZDP response has exceeded and the stack has ceased waiting */ ZDO_CMD_COMPLETED_STATUS = 0x0D ZDO_KEY_ESTABLISHMENT_NOT_SUPPORTED_STATUS = 0x0E // Trust center could not find key pair descriptor to authenticate device ZDO_NO_KEY_PAIR_DESCRIPTOR_STATUS = 0x50 // Link key for device was updated ZDO_UPDATE_LINK_KEY_STATUS = 0x51 // Master key for device was updated ZDO_UPDATE_MASTER_KEY_STATUS = 0x52 // Key pair descriptor was deleted ZDO_DELETE_KEY_PAIR_STATUS = 0x53 // Link key for device was deleted ZDO_DELETE_LINK_KEY_STATUS = 0x54 // TC is not responding to keep-alive requests ZDO_TC_NOT_AVAILABLE_STATUS = 0x60 // ZDP request is invalid ZDO_INVALID_REQUEST_STATUS = 0x80 // Requested device was not found ZDO_DEVICE_NOT_FOUND_STATUS = 0x81 // Unsupported endpoint of 0x00 or between 0xF1 and 0xFF was requested ZDO_INVALID_EP_STATUS = 0x82 // Requested endpoint has not been registered ZDO_NOT_ACTIVE_STATUS = 0x83 // Requested optional feature is not supported ZDO_NOT_SUPPORTED_STATUS = 0x84 // Timeout occured during the requested operation ZDO_TIMEOUT_STATUS = 0x85 // End device bind request is unsuccessful due to a failure to match any suitable clusters ZDO_NO_MATCH_STATUS = 0x86 // Unbind request is unsuccessful ZDO_NO_ENTRY_STATUS = 0x88 // Child descriptor is not available ZDO_NO_DESCRIPTOR_STATUS = 0x89 // Device does not have enough storage space ZDO_INSUFFICIENT_SPACE_STATUS = 0x8A // The device does not have storage space to support the requested operation ZDO_NOT_PERMITTED_STATUS = 0x8B // Device does not have enough table space ZDO_TABLE_FULL_STATUS = 0x8C // Request is not authorized from this device ZDO_NOT_AUTHORIZED_STATUS = 0x8D // Network parameters have been updated (channel PanId shortAddr ) ZDO_NWK_UPDATE_STATUS = 0x8E // Device has joined/rejoined a network and data can be transmitted ZDO_NETWORK_STARTED_STATUS = 0x8F // Device has lost connection with a parent and the stack tries rejoin by itself In this case transmission should be stopped ZDO_NETWORK_LOST_STATUS = 0x90 // Device has left a network If autonetwork option is on the stack will rejoin a network Otherwise an application should rejoin ZDO_NETWORK_LEFT_STATUS = 0x91 // New device has joined a network as a child of this device ZDO_CHILD_JOINED_STATUS = 0x92 // Child has been removed from children list ZDO_CHILD_REMOVED_STATUS = 0x93 // User descriptor is changed event ZDO_USER_DESCRIPTOR_UPDATE_STATUS = 0x94 // On the device with static addressing the conflict of network addresses has been detected ZDO_STATIC_ADDRESS_CONFLICT_STATUS = 0x95 } ZDO_Status_t; ",
							" Description ZDO result status primitives ",
							" ZDO_UnbindInd_t typedef ",
							" C typedef ZDO_UnbindReq_t ZDO_UnbindInd_t; ",
							" Description Declaration of ZDO Unbind indication parameters structure For details go to ZDO_UnbindReq declaration ZB Specification extension ",
							" ZDO_WakeUpReq_t struct ",
							" C typedef struct { ZDO_WakeUpConf_t confirm; // Parameters of the confirm being returned in ZDO_WakeUpConf() void (*ZDO_WakeUpConf)(ZDO_WakeUpConf_t *conf); // The function called to confirm the request Must not be set to NULL } ZDO_WakeUpReq_t; ",
							" Description Describes the parameters of the ZDO_WakeUpReq() function ",
							" ZDO_ZdpReq_t struct ",
							" C typedef struct { // cond internal struct { void *next; #ifdef _ZAPPSI_ /* to be compatible with MAC and SSP service */ uint8_t requestId; /* Sequence number to identify request-response pair */ uint8_t sequenceNumber; union { /* Callback wrapper routine pointer */ void (*callback)(void*); /* Processing routine pointer to call after required memory will become free */ void (*process)(void*); } zsi; #endif /* _ZAPPSI_ */ uint32_t ttl; uint8_t state; uint8_t seqNumCopy; //used to prevent seq number encription APS_DataReq_t apsDataReq; } service; // endcond // Address fields uint16_t reqCluster; // Request's type; takes values from the ref ZdpClustersList \"enumeration\" APS_AddrMode_t dstAddrMode; // Destination address mode either short (network) address group or extended address mode APS_Address_t dstAddress; // ZDP frame for sending out ZDO_ZdpFrame_t req; // ZDP request parameters //Callback and Response void (*ZDO_ZdpResp)(ZDO_ZdpResp_t *zdpResp); // Response callback Must not be set to NULL ZDO_ZdpResp_t resp; // ZDP response parameters } ZDO_ZdpReq_t; ",
							" Description ZDP request Describes the parameters of the ZDO_ZdpReq() function ",
							" NWK DataStructures Enter a short description of your topic here (optional)  This is the start of your topic  ",
							" Channel_t Typedef ",
							" C typedef uint8_t Channel_t; ",
							" Description Type of MAC channel number ",
							" ExtPanId_t; Typedef ",
							" C typedef uint64_t ExtPanId_t; ",
							" Description Type of the 64-bit PAN identifier of the network ",
							" Lqi_t Typedef ",
							" C typedef uint8_t Lqi_t; ",
							" Description Type of link quality indicator ",
							" NWK_GroupAddr_t Typedef ",
							" C typedef GroupAddr_t NWK_GroupAddr_t; ",
							" Description Type definition of group address ",
							" NWK_GroupData_t Typedef ",
							" C typedef uint8_t NWK_GroupData_t; ",
							" Description Type of data linked to group ",
							" NWK_GroupTableEntry t ",
							" C typedef struct _NWK_GroupTableEntry_t { /** The data used by user for example APS end point */ NWK_GroupData_t data; /** Address of group */ NWK_GroupAddr_t addr; } NWK_GroupTableEntry_t; ",
							" Description Type of group table entry ",
							" NWK_GroupTableSize_t Typedef ",
							" C typedef uint8_t NWK_GroupTableSize_t; ",
							" Description Type of size of the group table ",
							" NWK_JoinControl_t Struct ",
							" C typedef struct _NWK_JoinControl_t { /** The method of joining the network */ NWK_JoinMethod_t method; /** If this parameter is TRUE than NWK layer will encrypt all NWK packet * during join procedure It means that if the method parameter is equal * to NWK_JOIN_VIA_REJOIN than NWK layer will encrypt rejoin request * command and will expect encrypted rejoin response command */ bool secured; /** TRUE means that NWK performs active scan to discover networks in * neighborhood otherwise NWK uses the neighbor table as is In that * case (FALSE value) you can put all known neighbors to the neighbor table * before join and NWK will try to join only to these neighbors */ bool discoverNetworks; /** Notify other ZigBee devices that the device has joined or re-joined the network */ bool annce; /** The flag indicates that the neighbor table must be cleared or not */ bool clearNeighborTable; } NWK_JoinControl_t; ",
							" Description The type defines network join method and joining settings ",
							" PanId_t Typedef ",
							" C typedef uint16_t PanId_t; ",
							" Description PAN identifier type declaration ",
							" System Environment DataStructures ",
							" SYS_EventData_t typedef ",
							" C typedef uintptr_t SYS_EventData_t; ",
							" Description Data for event Arbitrary unsigned integer but large enough to hold pointer if required (such use is generally discouraged) ",
							" SYS_EventId_t Typedef ",
							" C typedef uint8_t SYS_EventId_t; ",
							" Description The type for event identifier Note that identifiers of events raised by the stack are defined in the ::BcEvents_t enumeration The user can define its own set of event IDs in the application subscribe to them and raise them though the over all number of event IDs defined by both the stack and the application can not be greater than ::SYS_MAX_EVENTS and an event ID value must not be greater than ::SYS_MAX_EVENTS ",
							" SYS_EventReceiver_t struct ",
							" C typedef struct _SYS_EventReceiver_t { // Internal service fields for handler // Do not rely on them // They may be changed at future releases // cond internal SYS_EventService_t service; SYS_EventService_t service; // endcond /** Function to be called on event Must not be set to NULL */ void (*func)(SYS_EventId_t id SYS_EventData_t data); } SYS_EventReceiver_t; ",
							" Description Structure for declaring an event receiver ",
							" SYS_Mutex_t Typedef ",
							" C typedef QueueDescriptor_t SYS_Mutex_t; ",
							" Description Mutex type It's a kind of queue to order incoming lock requests ",
							" SYS_MutexOwner_t struct ",
							" C typedef struct _SYS_MutexOwner_t { /** Service fields - for internal needs */ struct { QueueElement_t qelem; /** link used for queuing */ } service; /** Purpose of this parameter is to save owner's execution context It's up to the owner how to use this parameter Mutex implementation must not modify this parameter */ void *context; /** This function is called in the case when the SYS_MutexLock() operation was postponed and now the mutex is locked by the owner */ void (*SYS_MutexLockConf)(SYS_Mutex_t *const mutex void *context); } SYS_MutexOwner_t; ",
							" Description Type of mutex owner ",
							" SYS_TaskId_t Enum ",
							" C typedef enum { MAC_PHY_HWD_TASK_ID = 1 0 // Task ID of the MAC-PHY-HWD layer HAL_TASK_ID = 1 1 // Task ID of HAL (Hardware Abstraction Layer) MAC_HWI_TASK_ID = 1 2 // Task ID of the MAC-HWI layer (a part of MAC independent of radio) NWK_TASK_ID = 1 3 // Task ID of the NWK layer ZDO_TASK_ID = 1 4 // Task ID of the ZDO layer APS_TASK_ID = 1 5 // Task ID of the APS layer ZGP_TASK_ID = 1 6 // Task ID of the ZGP layer SSP_TASK_ID = 1 7 // Task ID of Security Service Provider TC_TASK_ID = 1 8 // Task ID of the Trust Center component ZSI_TASK_ID = 1 9 // Task ID of the ZAppSI component ZCL_TASK_ID = 1 10 // Task ID of ZigBee Cluster Library ZLL_TASK_ID = 1 11 // Service Task ID APL_TASK_ID = 1 12 // Task ID of the application ZGP_DSTUB_TASK_ID = 1 13 // Task ID of the ZGP Dstub component } SYS_TaskId_t; ",
							" Description The list of task IDs The IDs are sorted according to descending priority For each task ID there is the corresponding task handler function ",
							" ZGB_InitStatus_t Enum ",
							" C typedef enum { INIT_SUCCES = 1 0 // Initialization is a success RF_NOT_RESPOND = 1 1 // Radio has not responded HAL_NOT_RESPOND = 1 2 // HAL has not responded RF_PLL_NOT_RESPOND = 1 3 // HAL has not responded } ZGB_InitStatus_t; ",
							" Description Possible results of system's initialization ",
							" BcTime_t typedef ",
							" C typedef uint64_t BcTime_t; ",
							" Description 64-bit time interval ",
							" CS DataStructures ",
							" CS_MemoryItemId_t Enum ",
							" C typedef enum _CS_MemoryItemId_t { } CS_MemoryItemId_t; ",
							" Description List of the Configuration Server parameter identifiers Identifiers are automatically sorted by memory location and item types (atomic parameter or memory region) The parameters themselves are defined in the csDefaults h file Parameter ID's name is got by adding \"_ID\" to the name of a parameter ",
							" HAL DataStructures ",
							" HAL_AppTimer_t typedef ",
							" C typedef BC_Timer_t HAL_AppTimer_t; ",
							" Description fields of structure uint32_t interval - timer firing interval Interval must be more than 10 ms (set by user TimerMode_t mode - timer work mode (set by user) Must be chosen from TIMER_REPEAT_MODE TIMER_ONE_SHOT_MODE void (callback)(void) - pointer to timer callback function (set by user) Must not be set to NULL ",
							" ZCL DataStructures ",
							" ZCL_Addressing_t struct ",
							" C typedef struct { APS_AddrMode_t addrMode; // Address mode indicates which type of address shall be used APS_Address_t addr; // Can be set to either short extended or group addresses depending on the address mode ProfileId_t profileId; // Profile ID Endpoint_t endpointId; // Endpoint ID ClusterId_t clusterId; // Cluster ID uint8_t clusterSide; // Cluster's side: server or client uint16_t manufacturerSpecCode; // Manufacturer-specific code uint8_t sequenceNumber; // ZCL sequence number #ifdef _GREENPOWER_SUPPORT_ ShortAddr_t aliasSrcAddr; // Green power alias addr NwkSequenceNumber_t aliasSeqNumber; // Green power alias seq no uint8_t radius; // Groupcast radius APS_AddrMode_t indDstAddrMode; // destination address mode APS_Address_t indDstAddr; // destination address #endif bool nonUnicast; // Received request is not a unicast one } ZCL_Addressing_t; ",
							" Description Type describing address fields of some attributes in ZCL ",
							" ZCL_Cluster_t struct ",
							" C typedef struct { ClusterId_t id; // Cluster ID ZCL_ClusterOptions_t options; uint8_t attributesAmount; // Number of cluster attributes uint8_t *attributes; // Cluster attribute descriptors uint8_t commandsAmount; // Number of cluster-specific commands uint8_t *commands; // Cluster-specific command descriptors uint8_t isReporting; // Service field - indicates if any automatic attribute reports are in progress // Callback on Report attributes command reception Can be set to NULL void (*ZCL_ReportInd)(ZCL_Addressing_t *addressing uint8_t reportLength uint8_t *reportPayload); // Callback on Default response command reception Can be set to NULL void (*ZCL_DefaultRespInd)(ZCL_Request_t *req ZCL_Addressing_t *addressing uint8_t payloadLength uint8_t *payload); // Callback indicates action on cluster's attribute Can be set to NULL void (*ZCL_AttributeEventInd)(ZCL_Addressing_t *addressing ZCL_AttributeId_t attributeId ZCL_AttributeEvent_t event); } ZCL_Cluster_t; ",
							" Description Type describing ZCL Cluster ",
							" ZCL_DeviceEndpoint_t struct ",
							" C typedef struct { // Service structure struct { union { APS_RegisterEndpointReq_t apsEndpoint; APS_UnregisterEndpointReq_t unregEpReq; }; } service; SimpleDescriptor_t simpleDescriptor; // Device endpoint Simple Descriptor ZCL_Cluster_t *serverCluster; // Device server clusters #if APP_CLUSTERS_IN_FLASH == 1 ZCL_ClusterPartRam_t *serverClusterPartRam; // Device server clusters mutable part defined in ram memory ZCL_ClusterPartFlash_t *serverClusterPartFlash; // Device server clusters immutable part defined in flash memory #endif ZCL_Cluster_t *clientCluster; // Device client clusters #if APP_CLUSTERS_IN_FLASH == 1 ZCL_ClusterPartRam_t *clientClusterPartRam; // Device server clusters mutable part defined in ram memory ZCL_ClusterPartFlash_t *clientClusterPartFlash; // Device server clusters immutable part defined in flash memory #endif } ZCL_DeviceEndpoint_t; ",
							" Description Type describing parameter of ZCL_RegisterEndpoint() function ",
							" ZCL_Get_t struct ",
							" C typedef struct { ZCL_SecurityAttr_t attr; ZCL_Status_t status; // The status of getting a security attribute } ZCL_Get_t; ",
							" Description Parameters of the ZCL_Get() function ",
							" ZCL_NextElement_t struct ",
							" C typedef struct { uint8_t id; // Element's ID Can be either ::ZCL_GeneralCommandId_t value or a special cluster command ID uint8_t payloadLength; // Payload's length after adding of a new element uint8_t *payload; // Payload's pointer to the place where an element is added void *content; // Pointer to content (memory) which shall be added/filled to/from the payload } ZCL_NextElement_t; ",
							" Description Type describing information which is necessary for put/get element to/from payload ",
							" ZCL_Notify_t struct ",
							" C typedef struct { ZCL_Status_t status; // status of command ZCL_NotifyId_t id; // id of notification ZCL_Addressing_t *addressing; // sender addressing (ZCL response case) uint8_t responseLength; // length of response payload uint8_t *responsePayload; // pointer to response payload Response payload can be parsed by ZCL_GetNextElement() function } ZCL_Notify_t; ",
							" Description Type describing ZCL response ",
							" ZCL_OtauImageNotify_t struct ",
							" C typedef struct PACK { ZCL_ImageNotifyPayloadType_t payloadType; uint8_t queryJitter; uint16_t manufacturerCode; uint16_t imageType; uint32_t newFileVersion; } ZCL_OtauImageNotify_t; ",
							" Description ZCL OTAU Cluster commands Image Notify Command ",
							" ZCL_OtauInitParams_t struct ",
							" C typedef struct { /** Cluster side Must be chosen from: n ZCL_SERVER_CLUSTER_TYPE n ZCL_CLIENT_CLUSTER_TYPE */ uint8_t clusterSide; /** Endpoint for cluster */ Endpoint_t otauEndpoint; /** Profile ID that uses otau service */ ProfileId_t profileId; /** Current firmware version Parameter is valid only for client */ ZCL_OtauFirmwareVersion_t firmwareVersion; } ZCL_OtauInitParams_t; ",
							" Description Initialization parameters for OTAU service ",
							" ZCL_OtauUpgradeEndResp_t struct ",
							" C typedef struct PACK { uint16_t manufacturerId; ZCL_OtauImageType_t imageType; ZCL_OtauFirmwareVersion_t firmwareVersion; uint32_t currentTime; uint32_t upgradeTime; } ZCL_OtauUpgradeEndResp_t; ",
							" Description Upgrade End Response Command ",
							" ZCL_ReadAttributeReq_t struct ",
							" C typedef struct PACK { ZCL_AttributeId_t id; // Requested attribute id } ZCL_ReadAttributeReq_t; ",
							" Description Type describing payload element of read request command This type can be used to add one attribute entry to the read request payload ",
							" ZCL_Request_t struct ",
							" C typedef struct { // Service structure - for internal use ZCL_Service_t service; ZCL_Notify_t notify; // Response structure Notify ZCL_Notify; // Callback function for response Can be set to NULL ZCL_Addressing_t dstAddressing; // Addressing info on a destination node Endpoint_t endpointId; // Endpoint ID of the request's originator uint8_t id; // Command ID uint8_t requestLength; // Request's payload length uint8_t defaultResponse; // Default response bit state uint8_t *requestPayload; // Request payload Can be filled by the ZCL_PutNextElement() function uint32_t responseWaitTimeout; // response waiting timeout } ZCL_Request_t; ",
							" Description ZCL request to input the parameters for raising a request to ZCL component ",
							" ZCL_SecurityStatus_t Enum ",
							" C typedef enum { /* Key establishment completed successfully or the Certicom security mode is not used */ ZCL_SECURITY_STATUS_SUCCESS = 0x00 #if CERTICOM_SUPPORT == 1 /* The Key Establishment cluster can not be bound because devices supporting it have not been found */ ZCL_SECURITY_STATUS_DISCOVERY_FAIL = 0x01 /* Adding an entry to the local binding table failed while starting security */ ZCL_SECURITY_STATUS_APS_BINDING_FAIL = 0x02 ZCL_SECURITY_STATUS_TIMEOUT = 0x03 /* Key establishment has been terminated */ ZCL_SECURITY_STATUS_TERMINATED = 0x04 /* Failed to send one of KE cluster's commands during key establishment */ ZCL_SECURITY_STATUS_SEND_COMMAND_FAIL = 0x05 /* Invalid data (extended address or endpoint) have been provided or the KE cluster is already processing a transaction */ ZCL_SECURITY_STATUS_INVALID_SETTINGS = 0x06 #endif // CERTICOM_SUPPORT == 1 } ZCL_SecurityStatus_t; ",
							" Description Enumerated status values used in by the security procedures in ZCL ",
							" ZCL_Set_t struct ",
							" C typedef struct { ZCL_SecurityAttr_t attr; ZCL_Status_t status; // The status of setting a security attribute } ZCL_Set_t; ",
							" Description Parameters of the ZCL_Set() function ",
							" ZCL_StartSecurityConf_t struct ",
							" C typedef struct { ZCL_SecurityStatus_t status; // The status of starting KE security } ZCL_StartSecurityConf_t; ",
							" Description Confirmation parameters for the start security callback function ",
							" ZCL_StartSecurityReq_t struct ",
							" C typedef struct { ExtAddr_t remoteAddress; ZCL_StartSecurityConf_t confirm; // Confirmation callback Can be set to NULL void (* ZCL_StartSecurityConf)(ZCL_StartSecurityConf_t *conf); } ZCL_StartSecurityReq_t; ",
							" Description Parameters of the ZCL_StartSecurityReq() function ",
							" ZCL_Status_t Enum ",
							" C typedef enum { ZCL_SUCCESS_STATUS = 0x00 ZCL_UNSUPPORTED_ATTRIBUTE_STATUS = 0x01 ZCL_INVALID_ATTRIBUTE_VALUE_STATUS = 0x02 ZCL_TC_PERMISSION_TABLE_ERROR_STATUS = 0x03 ZCL_APS_LINK_KEY_ERROR_STATUS = 0x04 } ZCL_Status_t; ",
							" Description Status of ZCL operation Used to return status of ZCL operation ",
							" ZCL_OtauStatInd_t typedef ",
							" C typedef void (* ZCL_OtauStatInd_t)(ZCL_OtauAction_t action); ",
							" Description Function pointer for the callback of indications for otau actions ",
							" ZCL_WriteAttributeReq t ",
							" C typedef struct PACK { ZCL_AttributeId_t id; // requested attribute id uint8_t type; // requested attribute type uint8_t value[1]; // requested attribute value } ZCL_WriteAttributeReq_t; ",
							" Description Type describing payload element of write request commands This type can be used to add one attribute entry to the write request payload ",
							" ZCL_ReadAttributeResp_t struct ",
							" C typedef struct PACK { ZCL_AttributeId_t id; // requested attribute id uint8_t status; // status of reading attribute operation uint8_t type; // requested attribute type uint8_t value[1]; // requested attribute value } ZCL_ReadAttributeResp_t; ",
							" Description Type describing payload element of response to read request command This type can be used to get one attribute entry from the read response payload ",
							" ZCL_WriteAttributeResp_t Struct ",
							" C typedef struct PACK { uint8_t status; // status of writing attribute operation ZCL_AttributeId_t id; // requested attribute id } ZCL_WriteAttributeResp_t; ",
							" Description Type describing payload element of response to write request command This type can be used to get next writing status from the write response payload ",
							" ZGP DataStructures ",
							" ZGP_DataReq_t struct ",
							" C typedef struct _ZGP_DataReq_t { /** cond SERVICE_FIELDS **/ // Service fields for internal use only should not be touched by user // Service fields for internal use only should not be touched by user ZGP_Service_t service; /** endcond **/ //bool action; ZGPD_TxOptions_t txOptions; ZGP_ApplicationId_t appId; uint8_t eppHandle; ZgpSourceId_t srcId; uint64_t zgpIEEEAddr; uint8_t endPoint; uint8_t asduLength; uint8_t *asdu; uint16_t zgpTxQueueEntryLifetime; // ZGP confirm callback function's pointer void (*ZGP_DataConf)(ZGP_DataConf_t *conf); // ZGP confirm argument structure Shall not be filled by user ZGP_DataConf_t confirm; }ZGP_DataReq_t; ",
							" Description Input structure for ZGP_DataReq() ",
							" ZGP_FrameType_t enum ",
							" C typedef enum _ZgpFrameType_t { ZGP_FRAME_DATA = 0x00 ZGP_FRAME_MAINTENANCE = 0x01 }ZGP_FrameType_t; ",
							" Description Green power frame type ",
							" ZGP_GpdfDataReq_t struct ",
							" C typedef struct PACK { ExtAddr_t gpdIeeeAddress; uint32_t gpTxQueueEntryLifeTime; ZGP_FrameDir_t frameDir; ZGP_GpdfTxOptions_t txOptions; ZGP_ApplicationId_t applicationId; ZGP_SourceId_t srcId; uint8_t endpoint; ZGP_CommandId_t gpdCommandId; uint8_t gpdAsduLength; uint8_t *gpdAsdu; uint8_t gpepHandle; // ZGP confirm argument structure Shall not be filled by user ZGP_GpdfDataConfirm_t confirm; bool action; } ZGP_GpdfDataReq_t; ",
							" Description Input structure to send GPDF Data ",
							" ZGP_PairingConfigCmdInfo_t struct ",
							" C typedef struct PACK _ZGP_PairingConfigCmdInfo_t { ZGP_GpdAppInfo_t *appInfo; ZGP_ApplicationId_t appId; ZGP_GpdId_t gpdId; uint8_t gpdEndPoint; zgpPairingConfigActions_t action; zgpCommunicationMode_t commMode; bool functionalityMatching; uint8_t deviceId; } ZGP_PairingConfigCmdInfo_t; ",
							" Description Input structure for sending pairing config command ",
							" ZGP_ResetReq_t ",
							" C typedef struct _ZGP_ResetReq_t { ZGP_Service_t service; // MAC confirm callback function's pointer void (*ZGP_ResetConf)(ZGP_ResetConf_t *conf); // MCPS-DATA confirm parameters' structure ZGP_ResetConf_t confirm; }ZGP_ResetReq_t; ",
							" Description Input structure to raise ZGP reset request ",
							" ZGP_SinkGroup_t struct ",
							" C typedef struct PACK _ZGP_SinkGroup_t { uint16_t sinkGroup; uint16_t alias; }ZGP_SinkGroup_t; ",
							" Description Sink group structure to hold the sink group id and corresponding alias ",
							" ZGP_SinkTableEntry_t struct ",
							" C typedef struct PACK _ZGP_SinkTableEntry_t { // Generic info - common to sink and proxy table zgpTableGenericInfo_t tableGenericInfo; // entry options zgpSinkTableEntryOptions_t options; // comm mode mask // FULL_UNICAST - (1 0x00) // DERIVED_GROUPCAST - (1 0x01) // PRECOMMISSIONED_GROUPCAST - (1 0x02) // LIGHTWEIGHT_UNICAST - (1 0x03) uint8_t commModeMask; uint8_t deviceId; } ZGP_SinkTableEntry_t; ",
							" Description Structure for storing details about device in sink table ",
							" ZGP_CommissionConf_t struct ",
							" C typedef struct _ZGP_CommissionConf_t { ZGP_Status_t status; }ZGP_CommissionConf_t; ",
							" Description Commissioning confirm status ",
							" ZGP_TableOperationField_t struct ",
							" C typedef struct _ZGP_TableOperationField_t { uint8_t appId; uint8_t entryType; uint8_t commMode; uint8_t nonEmptyIndexForRead; } ZGP_TableOperationField_t; ",
							" Description Structure to input details about the device entry to be operated (fetched or added or deleted) from tables in infrastructure ",
							" ZGP_InfraDeviceStatus_t Enum ",
							" C typedef enum _ZGP_InfraDeviceStatus_t { ZGP_SUCCESS = 0x00 ZGP_ALREADY_IN_COMMISSIONING_MODE = 0x01 ZGP_ENDPOINT_NOT_REGISTERED = 0x02 ZGP_INVALID_ACTION = 0x03 ZGP_NO_FREE_ENTRY = 0x04 ZGP_ENTRY_NOT_AVAILABLE = 0x05 ZGP_INSUFFICIENT_SPACE_STATUS = 0x06 ZGP_NOT_IN_EXPECTED_STATE = 0x07 } ZGP_InfraDeviceStatus_t; ",
							" Description ",
							" ZGP_EntryType_t Enum ",
							" C typedef enum _ZgpTableType_t { ZGP_PROXY_ENTRY = 0x0 ZGP_SINK_ENTRY = 0x1 ZGP_UNINIT_TABLE_TYPE = 0x3 } ZGP_EntryType_t; ",
							" Description Different ZGP Entry type proxy/sink ",
							" ZGP_TableUpdateAction_t struct ",
							" C typedef enum _ZpTableUpdateAction_t { UPDATE_ENTRY = 0x1 REPLACE_ENTRY = 0x2 REMOVE_PAIRING_ENTRY = 0x3 } ZGP_TableUpdateAction_t; ",
							" Description Table Update actions ",
							" ZGP_Status_t enum ",
							" C typedef enum { ZGP_SUCCESS_STATUS = 0x00 /** ZGP Data request queue is full */ ZGP_TX_QUEUE_FULL = 0x70 /* previous GPDF is overwritten */ ZGP_ENTRY_REPLACED = 0x71 /* GPDF is added to the zgp TxQueue */ ZGP_ENTRY_ADDED = 0x72 /* zgpTxQueueEntryLifetime timeout */ ZGP_ENTRY_EXPIRED = 0x73 ZGP_ENTRY_REMOVED = 0x74 ZGP_GPDF_SENDING_FINALIZED = 0x75 /* No reply received for commissioning request */ ZGP_NO_COMMISSIONING_REPLY = 0x76 /* No confirmation for commissioning request */ ZGP_COMMISSIONING_TIMEOUT = 0x77 /* Commissioning reply has invalid parameter */ ZGP_COMMISSIONING_REPLY_FAILURE = 0x78 /* Commissioning/Decommissioning invalid request */ ZGP_COMMISSIONING_REQ_INVALID = 0x79 /* ZGP key unavailable*/ ZGP_UNAVAILABLE_KEY_STATUS = 0x7A /* ZGP bad state */ ZGP_BAD_STATE = 0x7B /* Invalid parameter */ ZGP_INVALID_PARAMETER = 0x7C /* Invalid parameter */ ZGP_NO_CHANNEL_MASK = 0x7D /* ZGP_SECURITY_LEVEL_NOT_MATCHED */ ZGP_SECURITY_LEVEL_NOT_MATCHED = 0x7E /* No reply received for channel request*/ ZGP_NO_CHANNEL_CONFIG_REPLY = 0x7F /** IEEE 802 15 4-2006 Table 78 MAC enumerations description */ /** The frame counter purportedly applied by the originator of the * received frame is invalid */ ZGP_MAC_COUNTER_ERROR_STATUS = 0xDB /** The key purportedly applied by the originator of the received frame is * not allowed to be used with that frame type according to the key usage * policy of the recipient */ ZGP_MAC_IMPROPER_KEY_TYPE_STATUS = 0xDC /** The security level purportedly applied by the originator of the received * frame does not meet the minimum security level required/expected by * the recipient for that frame type */ ZGP_MAC_IMPROPER_SECURITY_LEVEL_STATUS = 0xDD /** The received frame was purportedly secured using security based on * IEEE Std 802 15 4-2003 and such security is not supported by this standard **/ ZGP_MAC_UNSUPPORTED_LEGACY_STATUS = 0xDE /** The security purportedly applied by the originator of the received frame * is not supported */ ZGP_MAC_UNSUPPORTED_SECURITY_STATUS = 0xDF /** The beacon was lost following a synchronization request */ ZGP_MAC_BEACON_LOSS_STATUS = 0xE0 /** A transmission could not take place due to activity on the channel * i e the CSMA-CA mechanism has failed */ ZGP_MAC_CHANNEL_ACCESS_FAILURE_STATUS = 0xE1 /** The GTS request has been denied by the PAN coordinator */ ZGP_MAC_DENIED_STATUS = 0xE2 /** The attempt to disable the transceiver has failed */ ZGP_MAC_DISABLE_TRX_FAILURE_STATUS = 0xE3 /** Either a frame resulting from processing has a length that is * greater than aMaxPHYPacketSize or a requested transaction is * too large to fit in the CAP or GTS */ ZGP_MAC_FRAME_TOO_LONG_STATUS = 0xE5 /** The requested GTS transmission failed because the specified * GTS either did not have a transmit GTS direction or was not defined */ ZGP_MAC_INVALID_GTS_STATUS = 0xE6 /** A request to purge an MSDU from the transaction queue was made using * an MSDU handle that was not found in the transaction table */ ZGP_MAC_INVALID_HANDLE_STATUS = 0xE7 /** A parameter in the primitive is either not supported or is out of * the valid range */ ZGP_MAC_INVALID_PARAMETER_STATUS = 0xE8 /** No acknowledgment was received after macMaxFrameRetries */ ZGP_MAC_NO_ACK_STATUS = 0xE9 /** A scan operation failed to find any network beacons */ ZGP_MAC_NO_BEACON_STATUS = 0xEA /** No response data were available following a request */ ZGP_MAC_NO_DATA_STATUS = 0xEB /** The operation failed because a 16-bit short address was not allocated */ ZGP_MAC_NO_SHORT_ADDRESS_STATUS = 0xEC /** A receiver enable request was unsuccessful because it could not be * completed within the CAP */ ZGP_MAC_OUT_OF_CAP_STATUS = 0xED /** A PAN identifier conflict has been detected and communicated * to the PAN coordinator */ ZGP_MAC_PAN_ID_CONFLICT_STATUS = 0xEE /** A coordinator realignment command has been received */ ZGP_MAC_REALIGNMENT_STATUS = 0xEF /** The transaction has expired and its information was discarded */ ZGP_MAC_TRANSACTION_EXPIRED_STATUS = 0xF0 /** There is no capacity to store the transaction */ ZGP_MAC_TRANSACTION_OVERFLOW_STATUS = 0xF1 /** The transceiver was in the transmitter enabled state when the receiver * was requested to be enabled */ ZGP_MAC_TX_ACTIVE_STATUS = 0xF2 /** The key purportedly used by the originator of the received frame is * not available or if available the originating device is not known * or is blacklisted with that particular key */ ZGP_MAC_UNAVAILABLE_KEY_STATUS = 0xF3 /** A SET/GET request was issued with the identifier of a PIB * attribute that is not supported */ ZGP_MAC_UNSUPPORTED_ATTRIBUTE_STATUS = 0xF4 /** A request to send data was unsuccessful because neither the source address * parameters nor the destination address parameters were present */ ZGP_MAC_INVALID_ADDRESS_STATUS = 0xF5 /** A receiver enable request was unsuccessful because it specified a number * of symbols that was longer than the beacon interval */ ZGP_MAC_ON_TIME_TOO_LONG_STATUS = 0xF6 /** A receiver enable request was unsuccessful because it could not be * completed within the current superframe and was not permitted to be * deferred until the next superframe */ ZGP_MAC_PAST_TIME_STATUS = 0xF7 /** The device was instructed to start sending beacons based on the * timing of the beacon transmissions of its coordinator but the device * is not currently tracking the beacon of its coordinator */ ZGP_MAC_TRACKING_OFF_STATUS = 0xF8 /** An attempt to write to a MAC PIB attribute that is in a table failed * because the specified table index was out of range */ ZGP_MAC_INVALID_INDEX_STATUS = 0xF9 /** There are some unscanned channels yet but there is no memory */ ZGP_MAC_LIMIT_REACHED_STATUS = 0xFA /** A SET/GET request was issued with the identifier of an attribute * that is read only */ ZGP_MAC_READ_ONLY_STATUS = 0xFB /** A request to perform a scan operation failed because the MLME was * in the process of performing a previously initiated scan operation */ ZGP_MAC_SCAN_IN_PROGRESS_STATUS = 0xFC /** The device was instructed to start sending beacons based on the timing of * the beacon transmissions of its coordinator but the instructed start time * overlapped the transmission time of the beacon of its coordinator */ ZGP_MAC_SUPERFRAME_OVERLAP_STATUS = 0xFD }ZGP_Status_t; ; ",
							" Description ZGP primitive return code ",
							" ZGP_ReadOperationStatus_t struct ",
							" C typedef enum _ZgpReadOperationStatus_t { ENTRY_NOT_AVAILABLE = 0x0 ACTIVE_ENTRY_AVAILABLE = 0x1 } ZGP_ReadOperationStatus_t; ",
							" Description Read operation status ",
							" zgpGpProxyCommModeOptions_t struct ",
							" C typedef struct PACK { uint8_t action : 1; uint8_t commWindowPresent : 1; zgpGpProxyCommModeExitMode_t exitMode : 2; uint8_t channelPresent : 1; uint8_t unicastCommunication : 1; uint8_t reserved : 2; }zgpGpProxyCommModeOptions_t; ",
							" Description proxy commissioning mode configurations ",
							" ZGP_SinkTableActions_t struct ",
							" C typedef enum _ZGP_SinkTableActions_t { NO_ACTION = 0 EXTEND_SINKTABLE_ENTRY = 1 REPLACE_SINKTABLE_ENTRY = 2 REMOVE_PAIRING = 3 REMOVE_GPD = 4 APPLICATION_DESCRIPTION = 5 } ZGP_SinkTableActions_t; ",
							" Description List of actions can be taken on sink table "];

