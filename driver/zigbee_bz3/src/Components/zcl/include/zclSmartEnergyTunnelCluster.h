 /*******************************************************************************
  ZCL Smart Energy Tunnel Cluster Header File

  Company:
    Microchip Technology Inc.

  File Name:
    zclSmartEnergyTunnelCluster.h

  Summary:
    Definition of the Smart Energy Tunneling (Complex Metering) Cluster.

  Description:
    Definition of the Smart Energy Tunneling (Complex Metering) Cluster.
 *******************************************************************************/

// DOM-IGNORE-BEGIN
/*******************************************************************************
* Copyright (C) 2018 Microchip Technology Inc. and its subsidiaries.
*
* Subject to your compliance with these terms, you may use Microchip software
* and any derivatives exclusively with Microchip products. It is your
* responsibility to comply with third party license terms applicable to your
* use of third party software (including open source software) that may
* accompany Microchip software.
*
* THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES, WHETHER
* EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE, INCLUDING ANY IMPLIED
* WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY, AND FITNESS FOR A
* PARTICULAR PURPOSE.
*
* IN NO EVENT WILL MICROCHIP BE LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE,
* INCIDENTAL OR CONSEQUENTIAL LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND
* WHATSOEVER RELATED TO THE SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS
* BEEN ADVISED OF THE POSSIBILITY OR THE DAMAGES ARE FORESEEABLE. TO THE
* FULLEST EXTENT ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN
* ANY WAY RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
* THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
*******************************************************************************/
// DOM-IGNORE-END

#ifndef _ZCLSMARTENERGYTUNNEL_H
#define _ZCLSMARTENERGYTUNNEL_H
/**
 *   The Smart Energy Tunneling Cluster provides an interface for tunneling
 * protocols. It is comprised of commands and attributes required to transport
 * any existing metering communication protocol within the payload of standard
 * ZigBee frames (including the handling of issues such as addressing,
 * fragmentation and flow control). Examples for such protocols are DLMS/COSEM,
 * IEC61107, ANSI C12, M-Bus, ClimateTalk etc.
 * See ZigBee Smart Energy Profile Specification r17, D.6, page 268.
 **/
/******************************************************************************
                                Includes section
 ******************************************************************************/
#include <clusters.h>

/******************************************************************************
                               Definition section
 ******************************************************************************/
/**
 * In case of unseccussful tunnel opening tunnelId should have value 0xFFFF in
 * RequestTunnelResponse command.
 * ZigBee Smart Energy Profile Specification r17, D.6.2.5.1.2, page 284.
*/
#define ZCL_SE_ERROR_TUNNEL_ID 0xFFFF

/**
 * Total number of the SE Tunnel Cluster commands sent by the server.
 * The number includes mandatory commands:
 * - RequestTunnelResponse, TransferData, TransferDataError
 * and optional commands:
 * - AckTransferData, ReadyData, Supported Tunnel Protocols Response,
 *   and TunnelClosureNotification.
 * See ZigBee Smart Energy Profile Specification r17, Table D.65, page 283.
 **/
#define ZCL_SE_TUNNEL_CLUSTER_CLIENT_COMMANDS_AMOUNT 7

/** \brief Command identifiers that are generated by the server.
 * See ZigBee Smart Energy Profile Specification r17, Table D.65. */
/** The command is sent by the server in response to a RequestTunnel
 * command previously received from the client. */
#define REQUEST_TUNNEL_RESPONSE_COMMAND_ID              0x00 /* M */
/** Command that transfers data from server to the client. */
#define TRANSFER_DATA_CLIENT_COMMAND_ID                 0x01 /* M */
/**  This command is generated by the receiver of a TransferData command
 * if the tunnel status indicates that something is wrong..*/
#define TRANSFER_DATA_ERROR_CLIENT_COMMAND_ID           0x02 /* M */
/** The command is confirmation of a DataTransfer command. */
#define ACK_TRANSFER_DATA_CLIENT_COMMAND_ID             0x03 /* O */
/** The command is generated – after a receiver had to stop the dataflow
 * using the AckTransferData(0) command – to indicate that the device
 * is now ready to continue receiving data.*/
#define READY_DATA_CLIENT_COMMAND_ID                    0x04 /* O */
/** Supported Tunnel Protocols Response is sent in response to
 * a Get Supported Tunnel Protocols command previously received.
 * The response contains a list of tunnel protocols supported by the device. */
#define SUPPORTED_TUNNEL_PROTOCOLS_RESPONSE_COMMAND_ID  0x05 /* O */
/** The command is sent by the server to indicate that a tunnel has been
 * closed due to expiration of a CloseTunnelTimeout. */
#define TUNNEL_CLOSURE_NOTIFICATION_COMMAND_ID          0x06 /* O */

/**************************************************************************//**
  \brief Macro defines the ZCL SE Tunnel Cluster on client side.
  \note The client has no attributes. See ZSE Profile Spec. r17, D.6.3.2.

  \param [in] clcommands - pointer to commands of the SE Tunneling Cluster
                         on client and server side. \see ZCL_SeTunnelCommands_t.
  \return None.
 ******************************************************************************/
#define ZCL_DEFINE_SE_TUNNEL_CLIENT(clcommands)                               \
  {                                                                           \
    .id = ZCL_SE_TUNNEL_CLUSTER_ID,                                           \
    .options =                                                                \
    {                                                                         \
      .type = ZCL_CLIENT_CLUSTER_TYPE,                                        \
      .security = ZCL_APPLICATION_LINK_KEY_CLUSTER_SECURITY,                  \
      .reserved = 0,                                                          \
    },                                                                        \
    .attributesAmount = 0,                                                    \
    .attributes = NULL,                                                       \
    .commandsAmount = ZCL_SE_TUNNEL_CLUSTER_CLIENT_COMMANDS_AMOUNT            \
                      + ZCL_SE_TUNNEL_CLUSTER_SERVER_COMMANDS_AMOUNT,         \
    .commands = (uint8_t *) clcommands                                        \
  }

#define ZCL_DEFINE_SE_TUNNEL_CLIENT_FLASH(clcommands)                         \
  {                                                                           \
    .id = ZCL_SE_TUNNEL_CLUSTER_ID,                                           \
    .options =                                                                \
    {                                                                         \
      .type = ZCL_CLIENT_CLUSTER_TYPE,                                        \
      .security = ZCL_APPLICATION_LINK_KEY_CLUSTER_SECURITY,                  \
      .reserved = 0,                                                          \
    },                                                                        \
    .attributesAmount = 0,                                                    \
    .attributes = NULL,                                                       \
    .commandsAmount = ZCL_SE_TUNNEL_CLUSTER_CLIENT_COMMANDS_AMOUNT            \
                      + ZCL_SE_TUNNEL_CLUSTER_SERVER_COMMANDS_AMOUNT,         \
    .commands = (FLASH_PTR uint8_t *) clcommands                              \
  }
/**
 * Total number of tunneling cluster attributes on server side.
 * See See ZSE Profile Spec. r17, D.6.2.2.
 **/
#define ZCL_SE_TUNNEL_CLUSTER_SERVER_ATTRIBUTES_AMOUNT 1
/** Identifier of the CloseTunnelTimeout attribute on server side.
 * See ZSE Profile Specification r17, Table D.60. */
#define CLOSE_TUNNEL_TIMEOUT_ATTRIBUTE_ID  CCPU_TO_LE16(0x0000) /* M */
/** \details The attribute defines the minimum number of seconds that the server
 *  waits on an inactive tunnel before closing it on its own and freeing
 *  its resources. See ZSE Profile Spec. r17, D.6.2.2.1.
 * \note Default attribute value is 0xFFFF. */
#define ZCL_DEFINE_SE_TUNNEL_CLUSTER_SERVER_ATTRIBUTES() \
  DEFINE_ATTRIBUTE(closeTunnelTimeoutAttr,               \
    ZCL_READONLY_ATTRIBUTE,                              \
    CLOSE_TUNNEL_TIMEOUT_ATTRIBUTE_ID,                   \
    ZCL_U16BIT_DATA_TYPE_ID) /* Valid range: 0x0001-0xFFFF. */

/**
 * Total number of cluster-specific commands sent by the server.
 * Mandatory commands:
 *  - RequestTunnel, CloseTunnel, TransferData and TransferDataError
 * Optional commands:
 *  - AckTransferData, ReadyData and GetSupportedTunnelProtocols.
 **/
#define ZCL_SE_TUNNEL_CLUSTER_SERVER_COMMANDS_AMOUNT 7

/** Command identifiers that are received by the server.
 * See ZigBee Smart Energy Profile Specification r17, Table D.62. */
/** The command is used to setup a tunnel association with the server. */
#define REQUEST_TUNNEL_COMMAND_ID                  0x00 /* M */
/** The command is used to close the tunnel with the server. */
#define CLOSE_TUNNEL_COMMAND_ID                    0x01 /* M */
/** The Command indicates (if received) that the client has sent
 * data to the server.*/
#define TRANSFER_DATA_SERVER_COMMAND_ID            0x02 /* M */
/** This command is generated by the receiver of a TransferData command
 * if the tunnel status indicates that something is wrong. */
#define TRANSFER_DATA_ERROR_SERVER_COMMAND_ID      0x03 /* M */
/** Command sent in response to each TransferData command in case – and only in
 * case – flow control has been requested. */
#define ACK_TRANSFER_DATA_SERVER_COMMAND_ID        0x04 /* O */
/** The command indicates that the device is now ready
 * to continue receiving data. */
#define READY_DATA_SERVER_COMMAND_ID               0x05 /* O */
/** The command is used to determine the tunnel protocols supported
 * on another device. */
#define GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND_ID  0x06 /* O */

/** Definitions that halp to initialize a command descriptor. By default all
 * commands require APS acknoledgement. */
/** There is a relevant response for a RequestTunnel command.
 * It is the RequestTunnelResponse command. */
#define ZCL_DEFINE_REQUEST_TUNNEL_COMMAND(commandInd)                         \
  DEFINE_COMMAND(requestTunnel,                                               \
    REQUEST_TUNNEL_COMMAND_ID,                                                \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_RELEVANT_RESPONSE, ZCL_COMMAND_ACK       \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_DEFINE_CLOSE_TUNNEL_COMMAND(commandInd)                           \
  DEFINE_COMMAND(closeTunnel,                                                 \
    CLOSE_TUNNEL_COMMAND_ID,                                                  \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_TRANSFER_DATA_SERVER_COMMAND(commandInd, flowControl)             \
  DEFINE_COMMAND(transferDataToServer,                                        \
    TRANSFER_DATA_SERVER_COMMAND_ID,                                          \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, flowControl, ZCL_COMMAND_ACK                          \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_TRANSFER_DATA_ERROR_SERVER_COMMAND(commandInd)                    \
  DEFINE_COMMAND(transferDataErrorToServer,                                   \
    TRANSFER_DATA_ERROR_SERVER_COMMAND_ID,                                    \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_ACK_TRANSFER_DATA_SERVER_COMMAND(commandInd)                      \
  DEFINE_COMMAND(ackTransferDataToServer,                                     \
    ACK_TRANSFER_DATA_SERVER_COMMAND_ID,                                      \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_READY_DATA_SERVER_COMMAND(commandInd)                             \
  DEFINE_COMMAND(readyDataToServer,                                           \
    READY_DATA_SERVER_COMMAND_ID,                                             \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

/** Supported Tunnel Protocols Response is relevant response for this command. */
#define ZCL_GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND(commandInd)                \
  DEFINE_COMMAND(getSupportedProtocols,                                       \
    GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND_ID,                                \
    COMMAND_OPTIONS(                                                          \
      CLIENT_TO_SERVER, ZCL_THERE_IS_RELEVANT_RESPONSE, ZCL_COMMAND_ACK       \
    ),                                                                        \
    commandInd                                                                \
  )

/** Initialization macro for Smart Energy Tunnel command descriptors on server side. */
#define ZCL_SE_TUNNEL_ON_SERVER(flowControl, reqTunnelInd, closeTunnelInd,      \
    transferDataToServerInd, transferDataErrorToServerInd,                      \
    ackTransferDataToServerInd, readyDataToServerInd, getSupportedProtocolsInd) \
  ZCL_DEFINE_REQUEST_TUNNEL_COMMAND(reqTunnelInd),                              \
  ZCL_DEFINE_CLOSE_TUNNEL_COMMAND(closeTunnelInd),                              \
  ZCL_TRANSFER_DATA_SERVER_COMMAND(transferDataToServerInd, flowControl),       \
  ZCL_TRANSFER_DATA_ERROR_SERVER_COMMAND(transferDataErrorToServerInd),         \
  ZCL_ACK_TRANSFER_DATA_SERVER_COMMAND(ackTransferDataToServerInd),             \
  ZCL_READY_DATA_SERVER_COMMAND(readyDataToServerInd),                          \
  ZCL_GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND(getSupportedProtocolsInd),         \
  ZCL_DEFINE_REQUEST_TUNNEL_RESPONSE_COMMAND(NULL),                             \
  ZCL_TRANSFER_DATA_CLIENT_COMMAND(NULL, flowControl),                          \
  ZCL_TRANSFER_DATA_ERROR_CLIENT_COMMAND(NULL),                                 \
  ZCL_ACK_TRANSFER_DATA_CLIENT_COMMAND(NULL),                                   \
  ZCL_READY_DATA_CLIENT_COMMAND(NULL),                                          \
  ZCL_SUPPORTED_TUNNEL_PROTOCOLS_RESPONSE_COMMAND(NULL),                        \
  ZCL_TUNNEL_CLOSURE_NOTIFICATION_COMMAND(NULL)

#define ZCL_SE_TUNNEL_ON_SERVER_WITH_FLOW_CONTROL(reqTunnelInd, closeTunnelInd, \
    transferDataToServerInd, transferDataErrorToServerInd,                      \
    ackTransferDataToServerInd, readyDataToServerInd, getSupportedProtocolsInd) \
ZCL_SE_TUNNEL_ON_SERVER(ZCL_THERE_IS_RELEVANT_RESPONSE,                         \
    reqTunnelInd, closeTunnelInd,                                               \
    transferDataToServerInd, transferDataErrorToServerInd,                      \
    ackTransferDataToServerInd, readyDataToServerInd, getSupportedProtocolsInd) \

#define ZCL_SE_TUNNEL_ON_SERVER_WITHOUT_FLOW_CONTROL(reqTunnelInd, closeTunnelInd, \
    transferDataToServerInd, transferDataErrorToServerInd,                      \
    ackTransferDataToServerInd, readyDataToServerInd, getSupportedProtocolsInd) \
ZCL_SE_TUNNEL_ON_SERVER(ZCL_THERE_IS_NO_RELEVANT_RESPONSE,                      \
    reqTunnelInd, closeTunnelInd,                                               \
    transferDataToServerInd, transferDataErrorToServerInd,                      \
    ackTransferDataToServerInd, readyDataToServerInd, getSupportedProtocolsInd) \

/** Definitions that halp to initialize a command descriptor on client side.
 * By default all commands require APS acknoledgement. */
#define ZCL_DEFINE_REQUEST_TUNNEL_RESPONSE_COMMAND(commandInd)                \
  DEFINE_COMMAND(requestTunnelResponse,                                       \
    REQUEST_TUNNEL_RESPONSE_COMMAND_ID,                                       \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_TRANSFER_DATA_CLIENT_COMMAND(commandInd, flowControl)             \
  DEFINE_COMMAND(transferDataToClient,                                        \
    TRANSFER_DATA_CLIENT_COMMAND_ID,                                          \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, flowControl, ZCL_COMMAND_ACK                          \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_TRANSFER_DATA_ERROR_CLIENT_COMMAND(commandInd)                    \
  DEFINE_COMMAND(transferDataErrorToClient,                                   \
    TRANSFER_DATA_ERROR_CLIENT_COMMAND_ID,                                    \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_ACK_TRANSFER_DATA_CLIENT_COMMAND(commandInd)                      \
  DEFINE_COMMAND(ackTransferDataToClient,                                     \
    ACK_TRANSFER_DATA_CLIENT_COMMAND_ID,                                      \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_READY_DATA_CLIENT_COMMAND(commandInd)                             \
  DEFINE_COMMAND(readyDataToClient,                                           \
    READY_DATA_CLIENT_COMMAND_ID,                                             \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_SUPPORTED_TUNNEL_PROTOCOLS_RESPONSE_COMMAND(commandInd)           \
  DEFINE_COMMAND(supportedTunnelProtocolsResponse,                            \
    SUPPORTED_TUNNEL_PROTOCOLS_RESPONSE_COMMAND_ID,                           \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

#define ZCL_TUNNEL_CLOSURE_NOTIFICATION_COMMAND(commandInd)                   \
  DEFINE_COMMAND(tunnelClosureNotification,                                   \
    TUNNEL_CLOSURE_NOTIFICATION_COMMAND_ID,                                   \
    COMMAND_OPTIONS(                                                          \
      SERVER_TO_CLIENT, ZCL_THERE_IS_NO_RELEVANT_RESPONSE, ZCL_COMMAND_ACK    \
    ),                                                                        \
    commandInd                                                                \
  )

/** Initialization macro for Smart Energy Tunnel command descriptors on client side. */
#define ZCL_SE_TUNNEL_ON_CLIENT(flowControl, reqTunnelResponseInd, transferDataToClientInd,\
    transferDataErrorToClientInd, ackTransferDataToClientInd,                 \
    readyDataToClientInd, supportedTunnelProtocolsResponseInd,                \
    tunnelClosureNotification)                                                \
  ZCL_DEFINE_REQUEST_TUNNEL_COMMAND(NULL),                                    \
  ZCL_DEFINE_CLOSE_TUNNEL_COMMAND(NULL),                                      \
  ZCL_TRANSFER_DATA_SERVER_COMMAND(NULL, flowControl),                        \
  ZCL_TRANSFER_DATA_ERROR_SERVER_COMMAND(NULL),                               \
  ZCL_ACK_TRANSFER_DATA_SERVER_COMMAND(NULL),                                 \
  ZCL_READY_DATA_SERVER_COMMAND(NULL),                                        \
  ZCL_GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND(NULL),                           \
  ZCL_DEFINE_REQUEST_TUNNEL_RESPONSE_COMMAND(reqTunnelResponseInd),           \
  ZCL_TRANSFER_DATA_CLIENT_COMMAND(transferDataToClientInd, flowControl),     \
  ZCL_TRANSFER_DATA_ERROR_CLIENT_COMMAND(transferDataErrorToClientInd),       \
  ZCL_ACK_TRANSFER_DATA_CLIENT_COMMAND(ackTransferDataToClientInd),           \
  ZCL_READY_DATA_CLIENT_COMMAND(readyDataToClientInd),                        \
  ZCL_SUPPORTED_TUNNEL_PROTOCOLS_RESPONSE_COMMAND(supportedTunnelProtocolsResponseInd), \
  ZCL_TUNNEL_CLOSURE_NOTIFICATION_COMMAND(tunnelClosureNotification)

#define ZCL_SE_TUNNEL_ON_CLIENT_WITH_FLOW_CONTROL(reqTunnelResponseInd, transferDataToClientInd,\
    transferDataErrorToClientInd, ackTransferDataToClientInd,                 \
    readyDataToClientInd, supportedTunnelProtocolsResponseInd,                \
    tunnelClosureNotification)                                                \
ZCL_SE_TUNNEL_ON_CLIENT(ZCL_THERE_IS_RELEVANT_RESPONSE,                       \
    reqTunnelResponseInd, transferDataToClientInd, transferDataErrorToClientInd, \
    ackTransferDataToClientInd, readyDataToClientInd,                         \
    supportedTunnelProtocolsResponseInd, tunnelClosureNotification)

#define ZCL_SE_TUNNEL_ON_CLIENT_WITHOUT_FLOW_CONTROL(reqTunnelResponseInd, transferDataToClientInd,\
    transferDataErrorToClientInd, ackTransferDataToClientInd,                 \
    readyDataToClientInd, supportedTunnelProtocolsResponseInd,                \
    tunnelClosureNotification)                                                \
ZCL_SE_TUNNEL_ON_CLIENT(ZCL_THERE_IS_NO_RELEVANT_RESPONSE,                       \
    reqTunnelResponseInd, transferDataToClientInd, transferDataErrorToClientInd, \
    ackTransferDataToClientInd, readyDataToClientInd,                         \
    supportedTunnelProtocolsResponseInd, tunnelClosureNotification)

/**************************************************************************//**
  \brief Macro defines the ZCL SE Tunnel Cluster on server side.

  \param [in] clattributes - pointer to attributes of the SE Tunneling Cluster
                         on server side. \see ZCL_SeTunnelServerClusterAttributes_t.
  \param [in] clcommands - pointer to commands of the SE Tunneling Cluster
                         on server and client side. \see ZCL_SeTunnelmmands_t.
  \return None.
 ******************************************************************************/
#define ZCL_DEFINE_SE_TUNNEL_SERVER(clattributes, clcommands)                 \
  {                                                                           \
    .id = ZCL_SE_TUNNEL_CLUSTER_ID,                                           \
    .options =                                                                \
    {                                                                         \
      .type = ZCL_CLIENT_CLUSTER_TYPE,                                        \
      .security = ZCL_APPLICATION_LINK_KEY_CLUSTER_SECURITY,                  \
      .reserved = 0,                                                          \
    },                                                                        \
    .attributesAmount = ZCL_SE_TUNNEL_CLUSTER_SERVER_ATTRIBUTES_AMOUNT,       \
    .attributes = (uint8_t *) clattributes,                                   \
    .commandsAmount = ZCL_SE_TUNNEL_CLUSTER_SERVER_COMMANDS_AMOUNT            \
                      + ZCL_SE_TUNNEL_CLUSTER_CLIENT_COMMANDS_AMOUNT,         \
    .commands = (uint8_t *) clcommands                                        \
  }

#define ZCL_DEFINE_SE_TUNNEL_SERVER_FLASH(clattributes, clcommands)           \
  {                                                                           \
    .id = ZCL_SE_TUNNEL_CLUSTER_ID,                                           \
    .options =                                                                \
    {                                                                         \
      .type = ZCL_CLIENT_CLUSTER_TYPE,                                        \
      .security = ZCL_APPLICATION_LINK_KEY_CLUSTER_SECURITY,                  \
      .reserved = 0,                                                          \
    },                                                                        \
    .attributesAmount = ZCL_SE_TUNNEL_CLUSTER_SERVER_ATTRIBUTES_AMOUNT,       \
    .attributes = (uint8_t *) clattributes,                                   \
    .commandsAmount = ZCL_SE_TUNNEL_CLUSTER_SERVER_COMMANDS_AMOUNT            \
                      + ZCL_SE_TUNNEL_CLUSTER_CLIENT_COMMANDS_AMOUNT,         \
    .commands = (FLASH_PTR uint8_t *) clcommands                              \
  }
/******************************************************************************
                                Types section
 ******************************************************************************/
/** \brief Enumeration of protocol ids that can be tunneled.
 * See ZSE Profile Specification r17, Table D.63, page 276. */
typedef enum _ZCL_SeTunnelProtocolId_t
{
  ZCL_IEC_62056_PROTOCOL_ID      = 0, /*!< DLMS/COSEM */
  ZCL_IEC_61107_PROTOCOL_ID      = 1,
  ZCL_ANSI_C12_PROTOCOL_ID       = 2,
  ZCL_MBUS_PROTOCOL_ID           = 3,
  ZCL_SML_PROTOCOL_ID            = 4,
  ZCL_CLIMATE_TALK_PROTOCOL_ID   = 5,
  ZCL_FIRST_RESERVED_PROTOCOL_ID = 6,
  ZCL_LAST_RESERVED_PROTOCOL_ID  = 199,
  ZCL_FIRST_MANUFACTURER_DEFINED_PROTOCOL_ID = 200,
  ZCL_LAST_MANUFACTURER_DEFINED_PROTOCOL_ID  = 254,
  ZCL_RESERVED_PROTOCOL_ID  = 255
} ZCL_SeTunnelProtocolId_t;

/* Format of command payloads that are received by server. */
BEGIN_PACK
/** \details The request payload specifies the protocol identifier for the requested
 * tunnel, a manufacturer code in case of proprietary protocols and the use of flow
 * control for streaming protocols. See ZSE Profile Spec. r17, Figure D.38. */
typedef struct _ZclRequestTunnelPayload_t
{
  /** The identifier of the metering communication protocol for which
   * the tunnel is requested. \see ZclSeTunnelProtocolId_t. */
  uint8_t protocolId;
  /** A code that is allocated by the ZigBee Alliance, relating the manufacturer
   * to a device and – for the tunneling - a manufacturer specific protocol.
   * A value of 0xFFFF indicates that the Manufacturer Code is not used. */
  uint16_t manufacturerCode;
  /** A boolean type parameter that indicates whether flow control support
   * is requested from the tunnel (0x01) or not (0x00).*/
  uint8_t flowControlSupport;
  /** A value that defines the size, in octets, of the maximum data packet
   * that can be transferred to the client in the payload of a single
   * TransferData command.*/
  uint16_t maximumIncomingTransferSize;
} ZclRequestTunnelPayload_t;
END_PACK

/** \brief Command descriptor of the request tunnel command. */
typedef struct _ZclRequestTunnelCommand_t
{
  ZCL_CommandId_t id; /*!< Must be REQUEST_TUNNEL_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclRequestTunnelCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclRequestTunnelPayload_t *payload
  );
} ZclRequestTunnelCommand_t;

BEGIN_PACK
/** \brief The parameter in the payload specifies the tunnel identifier of the tunnel
 * that has to be closed. See ZSE Profile Spec. r17, Figure D.39. */
typedef struct _ZclCloseTunnelPayload_t
{
  /** It is the same number that has been previously returned in the response
   * to a RequestTunnel command. */
  uint16_t tunnelId;
} ZclCloseTunnelPayload_t;
END_PACK

/** \brief Command descriptor of the close tunnel command. */
typedef struct _ZclCloseTunnelCommand_t
{
  ZCL_CommandId_t id; /*!< Must be CLOSE_TUNNEL_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclRequestTunnelCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclCloseTunnelPayload_t *payload
  );
} ZclCloseTunnelCommand_t;

BEGIN_PACK
/** \brief Format of the TransferData Command Payload.
 * See ZigBee Smart Energy Profile Specification r17, Figure D.40 or D.46. */
typedef struct _ZclTransferDataPayload_t
{
  /** A number between 0..65535 that uniquely identifies the tunnel
   * that has been allocated in the server. */
  uint16_t tunnelId;
  /** Octet containing the data to be transferred through the tunnel
   * in the format of the communication protocol for which the tunnel
   * has been requested. See ZSE Profile Spec. r17, D.6.2.4.3.2 and D.6.2.5.2.2. */
  uint8_t data[1];
} ZclTransferDataPayload_t;
END_PACK

/** \brief Command descriptor of the transfer data command. */
typedef struct _ZclTransferDataCommand_t
{
  /** The parameter must be:
   *   \li TRANSFER_DATA_SERVER_COMMAND_ID or
   *   \li TRANSFER_DATA_CLIENT_COMMAND_ID. */
  ZCL_CommandId_t id;
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclTransferDataCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclTransferDataPayload_t *payload
  );
} ZclTransferDataCommand_t;

/** \brief Status of data transmission. See ZSE Profile Spec. r17, Table D.64. */
typedef enum _ZCL_SeTunnelTxStatus_t
{
  /** The TransferData command contains a TunnelID of a non-existent tunnel. */
  ZCL_SE_TUNNEL_NO_SUCH_TX_STATUS = 0x00,
  /** The TransferData command contains a TunnelID that does not match
   * the device sending the data. */
  ZCL_SE_TUNNEL_WRONG_DEVICE_TX_STATUS = 0x01,
  /** The TransferData command contains more data than indicated by
   * the MaximumIncomingTransferSize of the receiving device. */
  ZCL_SE_TUNNEL_DATA_OVERFLOW_TX_STATUS = 0x02,
  ZCL_SE_TUNNEL_FIRST_RESERVED_TX_STATUS = 0x03,
  ZCL_SE_TUNNEL_LAST_RESERVED_TX_STATUS = 0xFF
} ZCL_SeTunnelTxStatus_t;

BEGIN_PACK
/** \brief Format of the TransferDataError Command Payload.
 * See ZigBee Smart Energy Profile Specification r17, Figure D.41. */
typedef struct _ZclTransferDataErrorPayload_t
{
  /** A number between 0..65535 that uniquely identifies the tunnel. */
  uint16_t tunnelId;
  /** The field indicates the error that occurred within the receiver
   * after the last TransferData command. \see ZCL_SeTunnelStatus_t. */
  uint8_t status;
} ZclTransferDataErrorPayload_t;
END_PACK

/** \brief Command descriptor of the transfer data error command. */
typedef struct _ZclTransferDataErrorCommand_t
{
  /** The command identifier must be:
   *   \li TRANSFER_DATA_ERROR_SERVER_COMMAND_ID or
   *   \li TRANSFER_DATA_ERROR_CLIENT_COMMAND_ID. */
  ZCL_CommandId_t id;
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclTransferDataErrorCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclTransferDataErrorPayload_t *payload
  );
} ZclTransferDataErrorCommand_t;

BEGIN_PACK
/** \brief Format of the AckTransferData Command Payload.
 * See ZigBee Smart Energy Profile Specification r17, Figure D.42. */
typedef struct _ZclAckTransferDataPayload_t
{
  /** A number between 0..65535 that uniquely identifies the tunnel
   * that has been allocated in the server. */
  uint16_t tunnelId;
  /** Indicates the number of bytes that may still be received by
   * the initiator of this command (receiver).
   * See ZSE Profile Spec. r17, D.6.2.4.5.2, page 280. */
  uint16_t numberOfBytesLeft;
} ZclAckTransferDataPayload_t;
END_PACK

/** \brief Command descriptor of the ack transfer data command. */
typedef struct _ZclAckTransferDataCommand_t
{
  /*!< The parameter must be:
   *   \li ACK_TRANSFER_DATA_SERVER_COMMAND_ID or
   *   \li ACK_TRANSFER_DATA_CLIENT_COMMAND_ID. */
  ZCL_CommandId_t id;
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclAckTransferDataCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclAckTransferDataPayload_t *payload
  );
} ZclAckTransferDataCommand_t;

BEGIN_PACK
/** \brief Format of the ReadyData Command Payload.
 * See ZigBee Smart Energy Profile Specification r17, Figure D.43. */
typedef struct _ZclReadyDataPayload_t
{
  /** A number between 0..65535 that uniquely identifies the tunnel
   * that has been allocated in the server. */
  uint16_t tunnelId;
  /** Indicates the number of octets that may be received by
   *  the initiator of this command (receiver).
   * See ZSE Profile Spec. r17, D.6.2.4.6.2, page 281. */
  uint16_t numberOfBytesLeft;
} ZclReadyDataPayload_t;
END_PACK

/** \brief Command descriptor of the ready data command. */
typedef struct _ZclReadyDataCommand_t
{
  /** The parameter must be:
   *  \li READY_DATA_SERVER_COMMAND_ID or
   *  \li READY_DATA_CLIENT_COMMAND_ID. */
  ZCL_CommandId_t id;
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclReadyDataCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclReadyDataPayload_t *payload
  );
} ZclReadyDataCommand_t;

BEGIN_PACK
/** \brief Format of the GetSupportedTunnelProtocols Command Payload.
 * See ZigBee Smart Energy Profile Specification r17, Figure D.44. */
typedef struct _ZclGetSupportedTunnelProtocolsPayload_t
{
  /** Where there are more protocols supported than can be returned in
   * a single Supported Tunnel Protocols Response command.
   * See ZigBee Smart Energy Profile Specification r17, D.6.2.4.7.2. */
  uint8_t offset;
} ZclGetSupportedTunnelProtocolsPayload_t;
END_PACK

/** \brief Command descriptor of the GetSupportedTunnelProtocols command. */
typedef struct _ZclGetSupportedTunnelProtocolsCommand_t
{
  ZCL_CommandId_t id; /*!< Must be GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclGetSupportedTunnelProtocolsCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclGetSupportedTunnelProtocolsPayload_t *payload
  );
} ZclGetSupportedTunnelProtocolsCommand_t;

/* Format of command payloads that are received by client. */
typedef enum _ZCL_SeTunnelStatus_t
{
  /** The tunnel has been opened and may now be used to transfer data in both directions. */
  ZCL_SE_TUNNEL_SUCCESS_STATUS = 0x00,
  /** The server is busy and cannot create a new tunnel at the moment. The client may try
   * again after a recommended timeout of 3 minutes. */
  ZCL_SE_TUNNEL_BUSY_STATUS = 0x01,
  /** The server has no more resources to setup requested tunnel. Clients should close
   * any open tunnels before retrying. */
  ZCL_SE_TUNNEL_NO_MORE_ID_STATUS = 0x02,
  /** The server does not support the protocol that has been requested in the ProtocolID
   * parameter of the RequestTunnel command. */
  ZCL_SE_TUNNEL_PROTOCOL_NOT_SUPPORTED = 0x03,
  /** Flow control has been requested by the client in the RequestTunnel command but cannot
   * be provided by the server (missing resources or no support). */
  ZCL_SE_TUNNEL_FLOW_CONTROL_NOT_SUPPORTED = 0x04,
  /** Should not be returned and indicates an unknown error. */
  ZCL_SE_TUNNEL_FIRST_RESERVED_STATUS = 0x05,
  ZCL_SE_TUNNEL_LAST_RESERVED_STATUS = 0xFF
} ZCL_SeTunnelStatus_t;

BEGIN_PACK
/** \details RequestTunnelResponse is sent by the server in response to a RequestTunnel
 * command previously received from the client. See ZSE Profile Spec. r17, Figure D.45. */
typedef struct _ZclRequestTunnelResponsePayload_t
{
  /** A number between 0..65535 that uniquely identifies the tunnel. This ID must
   * now be used to send data through this tunnel (TunnelID, TransferData) and is also
   * required to close the tunnel again (CloseTunnel). If the command has failed, 
   * the TunnelStatus contains the reason of the error and the TunnelID is set to 0xFFFF. */
  uint16_t tunnelId;
  /** The TunnelStatus parameter indicates the server’s internal status after the execution
   * of a RequestTunnel command. \see ZCL_SeTunnelStatus_t. */
  uint8_t status;
  /** A value that defines the size, in octets, of the maximum data packet that can be
   * transferred to the server in the payload of a single TransferData command. */
  uint16_t maximumIncomingTransferSize;
} ZclRequestTunnelResponsePayload_t;
END_PACK

/** \brief Command descriptor of the request tunnel response command. */
typedef struct _ZclRequestTunnelResponseCommand_t
{
  ZCL_CommandId_t id; /*!< Must be REQUEST_TUNNEL_RESPONSE_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclRequestTunnelResponseCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclRequestTunnelResponsePayload_t *payload
  );
} ZclRequestTunnelResponseCommand_t;

BEGIN_PACK
/** Type of supported protocol entry. */
typedef struct _ZclSeTunnelSupportedProtocol_t
{
  /** A code that is allocated by the ZigBee Alliance, relating the manufacturer to a device
   * and - for tunneling - a manufacturer specific protocol. A value of 0xFFFF indicates 
   * a standard (i.e. non- manufacturer specific) protocol. */
  uint16_t manufacturerCode;
  /** An enumeration representing the identifier of the metering communication protocol
   * for the supported tunnel. See ZSE Profile Spec. r17, Table D.67. */
  uint8_t protocolId;
} ZclSeTunnelSupportedProtocol_t;

/** \details The response contains a list of tunnel protocols supported by the device.
 * See ZSE Profile Spec. r17, Figure D.47. */
typedef struct _ZclSupportedTunnelProtocolsResponsePayload_t
{
  /** \li A value of 0 indicates that there are more supported protocols available
   *      (if more than 16 protocols are supported).
   *  \li A value of 1 indicates that the list of supported protocols is complete. */
  uint8_t protocolListComplete;
  /** The number of Protocol fields contained in the response. */
  uint8_t protocolCount;
  /** Array of supported protocols. */
  ZclSeTunnelSupportedProtocol_t protocol[1];
} ZclSupportedTunnelProtocolsResponsePayload_t;
END_PACK

/** \brief Command descriptor of the supported tunnel protocols response command. */
typedef struct _ZclSupportedTunnelProtocolsResponseCommand_t
{
  ZCL_CommandId_t id; /*!< Must be GET_SUPPORTED_TUNNEL_PROTOCOLS_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclSupportedTunnelProtocolsResponseCommandInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclSupportedTunnelProtocolsResponsePayload_t *payload
  );
} ZclSupportedTunnelProtocolsResponseCommand_t;

BEGIN_PACK
/** \details TunnelClosureNotification is sent by the server to indicate
 * that a tunnel has been closed due to expiration of a CloseTunnelTimeout.
 * See ZSE Profile Spec. r17, Figure D.49. */
typedef struct _ZclTunnelClosureNotificationPayload_t
{
  /** The parameter must correspond to a tunnel that was still active and maintained
   * by the server. See ZSE Profile Specification r17, Figure D.49. */
  uint16_t tunnelId;
} ZclTunnelClosureNotificationPayload_t;
END_PACK

/** \brief Command descriptor of the tunnel closure notification command. */
typedef struct _ZclTunnelClosureNotificationCommand_t
{
  ZCL_CommandId_t id; /*!< Must be TUNNEL_CLOSURE_NOTIFICATION_COMMAND_ID */
  ZclCommandOptions_t options;
  ZCL_Status_t (*zclTunnelClosureNotificationInd)(
    ZCL_Addressing_t *addressing,
    uint8_t payloadLength,
    ZclTunnelClosureNotificationPayload_t *payload
  );
} ZclTunnelClosureNotificationCommand_t;

/**
 * \brief SE tunnel cluster commands.
 */
typedef struct _ZCL_SeTunnelCommands_t
{
  /* Commands that are received by server. */
  ZclRequestTunnelCommand_t requestTunnel;
  ZclCloseTunnelCommand_t closeTunnel;
  ZclTransferDataCommand_t transferDataToServer;
  ZclTransferDataErrorCommand_t transferDataErrorToServer;
  ZclAckTransferDataCommand_t ackTransferDataToServer;   
  ZclReadyDataCommand_t readyDataToServer;
  ZclGetSupportedTunnelProtocolsCommand_t getSupportedProtocols; 
  /* Commands that are received by client. */
  ZclRequestTunnelResponseCommand_t requestTunnelResponse;
  ZclTransferDataCommand_t transferDataToClient;
  ZclTransferDataErrorCommand_t transferDataErrorToClient;
  ZclAckTransferDataCommand_t ackTransferDataToClient;   
  ZclReadyDataCommand_t readyDataToClient;
  ZclSupportedTunnelProtocolsResponseCommand_t supportedTunnelProtocolsResponse;
  ZclTunnelClosureNotificationCommand_t tunnelClosureNotification;
} ZCL_SeTunnelCommands_t;

typedef struct PACK _ZCL_SeTunnelServerClusterAttributes_t
{
  /* The Close Tunnel Timeout Attribute descriptor */
  struct PACK
  {
    ZCL_AttributeId_t id;         /*!< Attribute Id (0x0000) */
    uint8_t type;                 /*!< Unsigned 16-bit Integer */
    uint8_t properties;           /*!< Attribute properties bitmask */
    /** CloseTunnelTimeout defines the minimum number of seconds that the server
     * waits on an inactive tunnel before closing it on its own and freeing its resources. */
    uint16_t closeTunnelTimeout;
  } closeTunnelTimeoutAttr;

} ZCL_SeTunnelServerClusterAttributes_t;

#endif /* _ZCLSMARTENERGYTUNNEL_H */
/** eof zclSmartEnergyTunnelCluster.h */
